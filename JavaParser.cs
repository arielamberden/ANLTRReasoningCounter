//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.1 C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g 2015-04-13 13:30:07

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

namespace  ANTLRReasoningCounter 
{
/** A Java 1.5 grammar for ANTLR v3 derived from the spec
 *
 *  This is a very close representation of the spec; the changes
 *  are comestic (remove left recursion) and also fixes (the spec
 *  isn't exactly perfect).  I have run this on the 1.4.2 source
 *  and some nasty looking enums from 1.5, but have not really
 *  tested for 1.5 compatibility.
 *
 *  I built this with: java -Xmx100M org.antlr.Tool java.g
 *  and got two errors that are ok (for now):
 *  java.g:691:9: Decision can match input such as
 *    "'0'..'9'{'E', 'e'}{'+', '-'}'0'..'9'{'D', 'F', 'd', 'f'}"
 *    using multiple alternatives: 3, 4
 *  As a result, alternative(s) 4 were disabled for that input
 *  java.g:734:35: Decision can match input such as "{'$', 'A'..'Z',
 *    '_', 'a'..'z', '\u00C0'..'\u00D6', '\u00D8'..'\u00F6',
 *    '\u00F8'..'\u1FFF', '\u3040'..'\u318F', '\u3300'..'\u337F',
 *    '\u3400'..'\u3D2D', '\u4E00'..'\u9FFF', '\uF900'..'\uFAFF'}"
 *    using multiple alternatives: 1, 2
 *  As a result, alternative(s) 2 were disabled for that input
 *
 *  You can turn enum on/off as a keyword :)
 *
 *  Version 1.0 -- initial release July 5, 2006 (requires 3.0b2 or higher)
 *
 *  Primary author: Terence Parr, July 2006
 *
 *  Version 1.0.1 -- corrections by Koen Vanderkimpen & Marko van Dooren,
 *      October 25, 2006;
 *      fixed normalInterfaceDeclaration: now uses typeParameters instead
 *          of typeParameter (according to JLS, 3rd edition)
 *      fixed castExpression: no longer allows expression next to type
 *          (according to semantics in JLS, in contrast with syntax in JLS)
 *
 *  Version 1.0.2 -- Terence Parr, Nov 27, 2006
 *      java spec I built this from had some bizarre for-loop control.
 *          Looked weird and so I looked elsewhere...Yep, it's messed up.
 *          simplified.
 *
 *  Version 1.0.3 -- Chris Hogue, Feb 26, 2007
 *      Factored out an annotationName rule and used it in the annotation rule.
 *          Not sure why, but typeName wasn't recognizing references to inner
 *          annotations (e.g. @InterfaceName.InnerAnnotation())
 *      Factored out the elementValue section of an annotation reference.  Created
 *          elementValuePair and elementValuePairs rules, then used them in the
 *          annotation rule.  Allows it to recognize annotation references with
 *          multiple, comma separated attributes.
 *      Updated elementValueArrayInitializer so that it allows multiple elements.
 *          (It was only allowing 0 or 1 element).
 *      Updated localVariableDeclaration to allow annotations.  Interestingly the JLS
 *          doesn't appear to indicate this is legal, but it does work as of at least
 *          JDK 1.5.0_06.
 *      Moved the Identifier portion of annotationTypeElementRest to annotationMethodRest.
 *          Because annotationConstantRest already references variableDeclarator which
 *          has the Identifier portion in it, the parser would fail on constants in
 *          annotation definitions because it expected two identifiers.
 *      Added optional trailing ';' to the alternatives in annotationTypeElementRest.
 *          Wouldn't handle an inner interface that has a trailing ';'.
 *      Swapped the expression and type rule reference order in castExpression to
 *          make it check for genericized casts first.  It was failing to recognize a
 *          statement like  "Class<Byte> TYPE = (Class<Byte>)...;" because it was seeing
 *          'Class<Byte' in the cast expression as a less than expression, then failing
 *          on the '>'.
 *      Changed createdName to use typeArguments instead of nonWildcardTypeArguments.
 *         
 *      Changed the 'this' alternative in primary to allow 'identifierSuffix' rather than
 *          just 'arguments'.  The case it couldn't handle was a call to an explicit
 *          generic method invocation (e.g. this.<E>doSomething()).  Using identifierSuffix
 *          may be overly aggressive--perhaps should create a more constrained thisSuffix rule?
 *
 *  Version 1.0.4 -- Hiroaki Nakamura, May 3, 2007
 *
 *  Fixed formalParameterDecls, localVariableDeclaration, forInit,
 *  and forVarControl to use variableModifier* not 'final'? (annotation)?
 *
 *  Version 1.0.5 -- Terence, June 21, 2007
 *  --a[i].foo didn't work. Fixed unaryExpression
 *
 *  Version 1.0.6 -- John Ridgway, March 17, 2008
 *      Made "assert" a switchable keyword like "enum".
 *      Fixed compilationUnit to disallow "annotation importDeclaration ...".
 *      Changed "Identifier ('.' Identifier)*" to "qualifiedName" in more
 *          places.
 *      Changed modifier* and/or variableModifier* to classOrInterfaceModifiers,
 *          modifiers or variableModifiers, as appropriate.
 *      Renamed "bound" to "typeBound" to better match language in the JLS.
 *      Added "memberDeclaration" which rewrites to methodDeclaration or
 *      fieldDeclaration and pulled type into memberDeclaration.  So we parse
 *          type and then move on to decide whether we're dealing with a field
 *          or a method.
 *      Modified "constructorDeclaration" to use "constructorBody" instead of
 *          "methodBody".  constructorBody starts with explicitConstructorInvocation,
 *          then goes on to blockStatement*.  Pulling explicitConstructorInvocation
 *          out of expressions allowed me to simplify "primary".
 *      Changed variableDeclarator to simplify it.
 *      Changed type to use classOrInterfaceType, thus simplifying it; of course
 *          I then had to add classOrInterfaceType, but it is used in several
 *          places.
 *      Fixed annotations, old version allowed "@X(y,z)", which is illegal.
 *      Added optional comma to end of "elementValueArrayInitializer"; as per JLS.
 *      Changed annotationTypeElementRest to use normalClassDeclaration and
 *          normalInterfaceDeclaration rather than classDeclaration and
 *          interfaceDeclaration, thus getting rid of a couple of grammar ambiguities.
 *      Split localVariableDeclaration into localVariableDeclarationStatement
 *          (includes the terminating semi-colon) and localVariableDeclaration.
 *          This allowed me to use localVariableDeclaration in "forInit" clauses,
 *           simplifying them.
 *      Changed switchBlockStatementGroup to use multiple labels.  This adds an
 *          ambiguity, but if one uses appropriately greedy parsing it yields the
 *           parse that is closest to the meaning of the switch statement.
 *      Renamed "forVarControl" to "enhancedForControl" -- JLS language.
 *      Added semantic predicates to test for shift operations rather than other
 *          things.  Thus, for instance, the string "< <" will never be treated
 *          as a left-shift operator.
 *      In "creator" we rule out "nonWildcardTypeArguments" on arrayCreation,
 *          which are illegal.
 *      Moved "nonWildcardTypeArguments into innerCreator.
 *      Removed 'super' superSuffix from explicitGenericInvocation, since that
 *          is only used in explicitConstructorInvocation at the beginning of a
 *           constructorBody.  (This is part of the simplification of expressions
 *           mentioned earlier.)
 *      Simplified primary (got rid of those things that are only used in
 *          explicitConstructorInvocation).
 *      Lexer -- removed "Exponent?" from FloatingPointLiteral choice 4, since it
 *          led to an ambiguity.
 *
 *      This grammar successfully parses every .java file in the JDK 1.5 source
 *          tree (excluding those whose file names include '-', which are not
 *          valid Java compilation units).
 *
 *  Known remaining problems:
 *      "Letter" and "JavaIDDigit" are wrong.  The actual specification of
 *      "Letter" should be "a character for which the method
 *      Character.isJavaIdentifierStart(int) returns true."  A "Java
 *      letter-or-digit is a character for which the method
 *      Character.isJavaIdentifierPart(int) returns true."
 */
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.1")]
[System.CLSCompliant(false)]
public partial class JavaParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABSTRACT", "AMP", "AMPAMP", "AMPEQ", "ASSERT", "BANG", "BANGEQ", "BAR", "BARBAR", "BAREQ", "BOOLEAN", "BREAK", "BYTE", "CARET", "CARETEQ", "CASE", "CATCH", "CHAR", "CHARLITERAL", "CLASS", "COLON", "COMMA", "COMMENT", "CONST", "CONTINUE", "DEFAULT", "DO", "DOT", "DOUBLE", "DOUBLELITERAL", "DoubleSuffix", "ELLIPSIS", "ELSE", "ENUM", "EQ", "EQEQ", "EXTENDS", "EscapeSequence", "Exponent", "FALSE", "FINAL", "FINALLY", "FLOAT", "FLOATLITERAL", "FOR", "FloatSuffix", "GOTO", "GT", "HexDigit", "HexPrefix", "IDENTIFIER", "IF", "IMPLEMENTS", "IMPORT", "INSTANCEOF", "INT", "INTERFACE", "INTLITERAL", "IdentifierPart", "IdentifierStart", "IntegerNumber", "LBRACE", "LBRACKET", "LINE_COMMENT", "LONG", "LONGLITERAL", "LPAREN", "LT", "LongSuffix", "MONKEYS_AT", "NATIVE", "NEW", "NULL", "NonIntegerNumber", "PACKAGE", "PERCENT", "PERCENTEQ", "PLUS", "PLUSEQ", "PLUSPLUS", "PRIVATE", "PROTECTED", "PUBLIC", "QUES", "RBRACE", "RBRACKET", "RETURN", "RPAREN", "SEMI", "SHORT", "SLASH", "SLASHEQ", "STAR", "STAREQ", "STATIC", "STRICTFP", "STRINGLITERAL", "SUB", "SUBEQ", "SUBSUB", "SUPER", "SWITCH", "SYNCHRONIZED", "SurrogateIdentifer", "THIS", "THROW", "THROWS", "TILDE", "TRANSIENT", "TRUE", "TRY", "VOID", "VOLATILE", "WHILE", "WS"
	};
	public const int EOF=-1;
	public const int ABSTRACT=4;
	public const int AMP=5;
	public const int AMPAMP=6;
	public const int AMPEQ=7;
	public const int ASSERT=8;
	public const int BANG=9;
	public const int BANGEQ=10;
	public const int BAR=11;
	public const int BARBAR=12;
	public const int BAREQ=13;
	public const int BOOLEAN=14;
	public const int BREAK=15;
	public const int BYTE=16;
	public const int CARET=17;
	public const int CARETEQ=18;
	public const int CASE=19;
	public const int CATCH=20;
	public const int CHAR=21;
	public const int CHARLITERAL=22;
	public const int CLASS=23;
	public const int COLON=24;
	public const int COMMA=25;
	public const int COMMENT=26;
	public const int CONST=27;
	public const int CONTINUE=28;
	public const int DEFAULT=29;
	public const int DO=30;
	public const int DOT=31;
	public const int DOUBLE=32;
	public const int DOUBLELITERAL=33;
	public const int DoubleSuffix=34;
	public const int ELLIPSIS=35;
	public const int ELSE=36;
	public const int ENUM=37;
	public const int EQ=38;
	public const int EQEQ=39;
	public const int EXTENDS=40;
	public const int EscapeSequence=41;
	public const int Exponent=42;
	public const int FALSE=43;
	public const int FINAL=44;
	public const int FINALLY=45;
	public const int FLOAT=46;
	public const int FLOATLITERAL=47;
	public const int FOR=48;
	public const int FloatSuffix=49;
	public const int GOTO=50;
	public const int GT=51;
	public const int HexDigit=52;
	public const int HexPrefix=53;
	public const int IDENTIFIER=54;
	public const int IF=55;
	public const int IMPLEMENTS=56;
	public const int IMPORT=57;
	public const int INSTANCEOF=58;
	public const int INT=59;
	public const int INTERFACE=60;
	public const int INTLITERAL=61;
	public const int IdentifierPart=62;
	public const int IdentifierStart=63;
	public const int IntegerNumber=64;
	public const int LBRACE=65;
	public const int LBRACKET=66;
	public const int LINE_COMMENT=67;
	public const int LONG=68;
	public const int LONGLITERAL=69;
	public const int LPAREN=70;
	public const int LT=71;
	public const int LongSuffix=72;
	public const int MONKEYS_AT=73;
	public const int NATIVE=74;
	public const int NEW=75;
	public const int NULL=76;
	public const int NonIntegerNumber=77;
	public const int PACKAGE=78;
	public const int PERCENT=79;
	public const int PERCENTEQ=80;
	public const int PLUS=81;
	public const int PLUSEQ=82;
	public const int PLUSPLUS=83;
	public const int PRIVATE=84;
	public const int PROTECTED=85;
	public const int PUBLIC=86;
	public const int QUES=87;
	public const int RBRACE=88;
	public const int RBRACKET=89;
	public const int RETURN=90;
	public const int RPAREN=91;
	public const int SEMI=92;
	public const int SHORT=93;
	public const int SLASH=94;
	public const int SLASHEQ=95;
	public const int STAR=96;
	public const int STAREQ=97;
	public const int STATIC=98;
	public const int STRICTFP=99;
	public const int STRINGLITERAL=100;
	public const int SUB=101;
	public const int SUBEQ=102;
	public const int SUBSUB=103;
	public const int SUPER=104;
	public const int SWITCH=105;
	public const int SYNCHRONIZED=106;
	public const int SurrogateIdentifer=107;
	public const int THIS=108;
	public const int THROW=109;
	public const int THROWS=110;
	public const int TILDE=111;
	public const int TRANSIENT=112;
	public const int TRUE=113;
	public const int TRY=114;
	public const int VOID=115;
	public const int VOLATILE=116;
	public const int WHILE=117;
	public const int WS=118;

	#if ANTLR_DEBUG
	private static readonly bool[] decisionCanBacktrack =
		new bool[]
		{
			false, // invalid decision
			false, true, false, false, false, false, false, false, false, false, 
			false, true, false, false, true, false, false, false, false, false, false, 
			false, false, false, false, false, false, false, false, false, true, 
			false, false, false, false, false, false, false, true, false, false, 
			true, false, false, false, false, false, false, true, false, false, false, 
			true, false, false, false, false, false, false, false, false, false, 
			false, false, false, false, false, false, false, false, false, true, 
			true, false, false, false, true, false, false, false, false, false, false, 
			false, false, false, false, true, false, false, true, false, false, false, 
			true, false, false, false, true, false, false, false, true, false, false, 
			false, false, false, true, true, false, false, false, false, false, false, 
			false, false, false, false, false, false, false, false, false, false, 
			false, false, false, false, true, true, true, true, true, true, false, 
			false, false, false, false, false, true, false, false, false, true, false, 
			true, false, true, false, false, false, false, false, false, false, false, 
			false, false, false, false, false, false, false, false, , , false, false, 
			true, false, , , false, false, , , false, false, , , , , , , , , , , 
			, , false, 
		};
	#else
	private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public JavaParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public JavaParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[381+1];


		OnCreated();
	}

	public override string[] TokenNames { get { return JavaParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g"; } }


		int classCount = 0;
		public int getClassCount(){ return classCount; }
		
		string testString = "";
		public string getTestString(){ return testString; }
		
		// Files table info
		int charCount = 0;
		public int getCharCount(){ return charCount; }
		int whiteSpaceCount = 0;
		public int getWhiteSpaceCount(){ return whiteSpaceCount; }
		int commentCharCount = 0;
		public int getCommentCharCount(){ return commentCharCount; }
		
		// Package info
		string currentPackage = "N/A";
		string packages = "";
		public string getPackages(){ return packages; }
				
		// Class info
		string currentClass = "N/A";
		string classes = "";
		public string getClasses(){ return classes; }
		
		// Desired items to count
		string keywords = "";
		public string getKeywords(){ return keywords; }
		string userDefinedIdentifiers = "";
		public string getUserDefinedIdentifiers(){ return userDefinedIdentifiers; }
		string constants = "";
		public string getConstants(){ return constants; }
		string specialCharacters = "";
		public string getSpecialCharacters(){ return specialCharacters; }
		
		/*
		// Data Classes
		public class Keyword
	    	{
	        	private string name { get; set; }
	        	private string keyword { get; set; }
	        	private int count { get; set; }

		        public Keyword(string n, string k, int c)
		        {
		            this.name = n;
		            this.keyword = k;
		            this.count = c;
		        }
	    	}

	    	public class UserDefinedIdentifier
	    	{
		        private string name { get; set; }
		        private string userDefinedIdentifier { get; set; }
		        private int count { get; set; }
		
	       		public UserDefinedIdentifier(string n, string udi, int c)
		        {
		            this.name = n;
		            this.userDefinedIdentifier = udi;
		            this.count = c;
		        }
	    	}

	    	public class Constant
	    	{
		        private string name { get; set; }
		        private string constant { get; set; }
		        private int count { get; set; }

		       	public Constant(string n, string k, int c)
		        {
		            this.name = n;
		            this.constant = k;
		            this.count = c;
		        }
	    	}

	    	public class SpecialCharacter
	    	{
		        private string name { get; set; }
		        private string specialCharacter { get; set; }
		        private int count { get; set; }
		
	      		public SpecialCharacter(string n, string k, int c)
		        {
		            this.name = n;
		            this.specialCharacter = k;
		            this.count = c;
		        }
	    	}
		    
		// Packages info*/
		public List<string> packageNames = new List<string>();
		public List<string> getPackageNames(){ return packageNames; }
		/*
		public List<Keyword> packageKeywords = new List<Keyword>();
		public List<Keyword> getPackageKeywords(){ return packageKeywords; }
	        public List<UserDefinedIdentifier> packageUDIs = new List<UserDefinedIdentifier>();
	        public List<UserDefinedIdentifier> getPackageUDIs(){ return packageUDIs; }
	        public List<Constant> packageConstants = new List<Constant>();
	        public List<Constant> getPackageConstants(){ return packageConstants; }
	        public List<SpecialCharacter> packageSpecialCharacters = new List<SpecialCharacter>();
	        public List<SpecialCharacter> getPackageSpecialCharacters(){ return packageSpecialCharacters; }
	        
	        // Classes info
		public List<string> classNames;
		public List<string> getClassNames(){ return classNames; }
		public List<Keyword> classKeywords = new List<Keyword>();
		public List<Keyword> getClassKeywords(){ return classKeywords; }
	        public List<UserDefinedIdentifier> classUDIs = new List<UserDefinedIdentifier>();
	        public List<UserDefinedIdentifier> getClassUDIs(){ return classUDIs; }
	        public List<Constant> classConstants = new List<Constant>();
	        public List<Constant> getClassConstants(){ return classConstants; }
	        public List<SpecialCharacter> classSpecialCharacters = new List<SpecialCharacter>();
	        public List<SpecialCharacter> getClassSpecialCharacters(){ return classSpecialCharacters; } */


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_compilationUnit() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_compilationUnit() {}
	// $ANTLR start "compilationUnit"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:481:1: compilationUnit : ( ( annotations )? packageDeclaration )? ( importDeclaration )* ( typeDeclaration )* ;
	[GrammarRule("compilationUnit")]
	private void compilationUnit()
	{
		EnterRule_compilationUnit();
		EnterRule("compilationUnit", 1);
		TraceIn("compilationUnit", 1);
	    int compilationUnit_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "compilationUnit");
		DebugLocation(481, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:482:5: ( ( ( annotations )? packageDeclaration )? ( importDeclaration )* ( typeDeclaration )* )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:483:6: ( ( annotations )? packageDeclaration )? ( importDeclaration )* ( typeDeclaration )*
			{
			DebugLocation(483, 6);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:483:6: ( ( annotations )? packageDeclaration )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, decisionCanBacktrack[2]);
			int LA2_1 = input.LA(1);

			if ((LA2_1==MONKEYS_AT))
			{
				int LA2_2 = input.LA(2);

				if ((EvaluatePredicate(synpred2_Java_fragment)))
				{
					alt2 = 1;
				}
			}
			else if ((LA2_1==PACKAGE))
			{
				alt2 = 1;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:483:10: ( annotations )? packageDeclaration
				{
				DebugLocation(483, 10);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:483:10: ( annotations )?
				int alt1=2;
				try { DebugEnterSubRule(1);
				try { DebugEnterDecision(1, decisionCanBacktrack[1]);
				int LA1_1 = input.LA(1);

				if ((LA1_1==MONKEYS_AT))
				{
					alt1 = 1;
				}
				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:483:11: annotations
					{
					DebugLocation(483, 11);
					PushFollow(Follow._annotations_in_compilationUnit105);
					annotations();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(1); }

				DebugLocation(485, 13);
				PushFollow(Follow._packageDeclaration_in_compilationUnit134);
				packageDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(487, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:487:9: ( importDeclaration )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, decisionCanBacktrack[3]);
				int LA3_1 = input.LA(1);

				if ((LA3_1==IMPORT))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:487:10: importDeclaration
					{
					DebugLocation(487, 10);
					PushFollow(Follow._importDeclaration_in_compilationUnit156);
					importDeclaration();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(489, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:489:9: ( typeDeclaration )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, decisionCanBacktrack[4]);
				int LA4_1 = input.LA(1);

				if ((LA4_1==ABSTRACT||LA4_1==BOOLEAN||LA4_1==BYTE||LA4_1==CHAR||LA4_1==CLASS||LA4_1==DOUBLE||LA4_1==ENUM||LA4_1==FINAL||LA4_1==FLOAT||LA4_1==IDENTIFIER||(LA4_1>=INT && LA4_1<=INTERFACE)||LA4_1==LONG||LA4_1==LT||(LA4_1>=MONKEYS_AT && LA4_1<=NATIVE)||(LA4_1>=PRIVATE && LA4_1<=PUBLIC)||(LA4_1>=SEMI && LA4_1<=SHORT)||(LA4_1>=STATIC && LA4_1<=STRICTFP)||LA4_1==SYNCHRONIZED||LA4_1==TRANSIENT||(LA4_1>=VOID && LA4_1<=VOLATILE)))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:489:10: typeDeclaration
					{
					DebugLocation(489, 10);
					PushFollow(Follow._typeDeclaration_in_compilationUnit178);
					typeDeclaration();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("compilationUnit", 1);
			LeaveRule("compilationUnit", 1);
			LeaveRule_compilationUnit();
	        if (state.backtracking > 0) { Memoize(input, 1, compilationUnit_StartIndex); }

	    }
	 	DebugLocation(491, 4);
		} finally { DebugExitRule(GrammarFileName, "compilationUnit"); }
		return;

	}
	// $ANTLR end "compilationUnit"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_packageDeclaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_packageDeclaration() {}
	// $ANTLR start "packageDeclaration"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:493:1: packageDeclaration : 'package' x= qualifiedName ';' ;
	[GrammarRule("packageDeclaration")]
	private void packageDeclaration()
	{
		EnterRule_packageDeclaration();
		EnterRule("packageDeclaration", 2);
		TraceIn("packageDeclaration", 2);
	    int packageDeclaration_StartIndex = input.Index;

	    String x = default(String);

		try { DebugEnterRule(GrammarFileName, "packageDeclaration");
		DebugLocation(493, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:494:5: ( 'package' x= qualifiedName ';' )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:494:9: 'package' x= qualifiedName ';'
			{
			DebugLocation(494, 9);
			Match(input,PACKAGE,Follow._PACKAGE_in_packageDeclaration209); if (state.failed) return;
			DebugLocation(494, 20);
			PushFollow(Follow._qualifiedName_in_packageDeclaration213);
			x=qualifiedName();
			PopFollow();
			if (state.failed) return;
			DebugLocation(495, 9);
			if (state.backtracking == 0)
			{
				currentPackage = x; packages += x + ","; packageNames.Add(x);
			}
			DebugLocation(496, 9);
			Match(input,SEMI,Follow._SEMI_in_packageDeclaration234); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("packageDeclaration", 2);
			LeaveRule("packageDeclaration", 2);
			LeaveRule_packageDeclaration();
	        if (state.backtracking > 0) { Memoize(input, 2, packageDeclaration_StartIndex); }

	    }
	 	DebugLocation(497, 4);
		} finally { DebugExitRule(GrammarFileName, "packageDeclaration"); }
		return;

	}
	// $ANTLR end "packageDeclaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_importDeclaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_importDeclaration() {}
	// $ANTLR start "importDeclaration"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:499:1: importDeclaration : ( 'import' ( 'static' )? IDENTIFIER '.' '*' ';' | 'import' ( 'static' )? IDENTIFIER ( '.' IDENTIFIER )+ ( '.' '*' )? ';' );
	[GrammarRule("importDeclaration")]
	private void importDeclaration()
	{
		EnterRule_importDeclaration();
		EnterRule("importDeclaration", 3);
		TraceIn("importDeclaration", 3);
	    int importDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "importDeclaration");
		DebugLocation(499, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:500:5: ( 'import' ( 'static' )? IDENTIFIER '.' '*' ';' | 'import' ( 'static' )? IDENTIFIER ( '.' IDENTIFIER )+ ( '.' '*' )? ';' )
			int alt9=2;
			try { DebugEnterDecision(9, decisionCanBacktrack[9]);
			int LA9_1 = input.LA(1);

			if ((LA9_1==IMPORT))
			{
				int LA9_2 = input.LA(2);

				if ((LA9_2==STATIC))
				{
					int LA9_3 = input.LA(3);

					if ((LA9_3==IDENTIFIER))
					{
						int LA9_4 = input.LA(4);

						if ((LA9_4==DOT))
						{
							int LA9_5 = input.LA(5);

							if ((LA9_5==STAR))
							{
								alt9 = 1;
							}
							else if ((LA9_5==IDENTIFIER))
							{
								alt9 = 2;
							}

							else
							{
								if (state.backtracking>0) {state.failed=true; return;}
								NoViableAltException nvae = new NoViableAltException("", 9, 4, input, 5);
								DebugRecognitionException(nvae);
								throw nvae;
							}

						}

						else
						{
							if (state.backtracking>0) {state.failed=true; return;}
							NoViableAltException nvae = new NoViableAltException("", 9, 3, input, 4);
							DebugRecognitionException(nvae);
							throw nvae;
						}

					}

					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 9, 2, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}

				}
				else if ((LA9_2==IDENTIFIER))
				{
					int LA9_3 = input.LA(3);

					if ((LA9_3==DOT))
					{
						int LA9_4 = input.LA(4);

						if ((LA9_4==STAR))
						{
							alt9 = 1;
						}
						else if ((LA9_4==IDENTIFIER))
						{
							alt9 = 2;
						}

						else
						{
							if (state.backtracking>0) {state.failed=true; return;}
							NoViableAltException nvae = new NoViableAltException("", 9, 4, input, 4);
							DebugRecognitionException(nvae);
							throw nvae;
						}

					}

					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 9, 3, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}

				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 9, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

			}

			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 9, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}

			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:500:9: 'import' ( 'static' )? IDENTIFIER '.' '*' ';'
				{
				DebugLocation(500, 9);
				Match(input,IMPORT,Follow._IMPORT_in_importDeclaration255); if (state.failed) return;
				DebugLocation(501, 9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:501:9: ( 'static' )?
				int alt5=2;
				try { DebugEnterSubRule(5);
				try { DebugEnterDecision(5, decisionCanBacktrack[5]);
				int LA5_1 = input.LA(1);

				if ((LA5_1==STATIC))
				{
					alt5 = 1;
				}
				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:501:10: 'static'
					{
					DebugLocation(501, 10);
					Match(input,STATIC,Follow._STATIC_in_importDeclaration266); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(5); }

				DebugLocation(503, 9);
				Match(input,IDENTIFIER,Follow._IDENTIFIER_in_importDeclaration287); if (state.failed) return;
				DebugLocation(503, 20);
				Match(input,DOT,Follow._DOT_in_importDeclaration289); if (state.failed) return;
				DebugLocation(503, 24);
				Match(input,STAR,Follow._STAR_in_importDeclaration291); if (state.failed) return;
				DebugLocation(504, 9);
				Match(input,SEMI,Follow._SEMI_in_importDeclaration301); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:505:9: 'import' ( 'static' )? IDENTIFIER ( '.' IDENTIFIER )+ ( '.' '*' )? ';'
				{
				DebugLocation(505, 9);
				Match(input,IMPORT,Follow._IMPORT_in_importDeclaration318); if (state.failed) return;
				DebugLocation(506, 9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:506:9: ( 'static' )?
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, decisionCanBacktrack[6]);
				int LA6_1 = input.LA(1);

				if ((LA6_1==STATIC))
				{
					alt6 = 1;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:506:10: 'static'
					{
					DebugLocation(506, 10);
					Match(input,STATIC,Follow._STATIC_in_importDeclaration330); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(6); }

				DebugLocation(508, 9);
				Match(input,IDENTIFIER,Follow._IDENTIFIER_in_importDeclaration351); if (state.failed) return;
				DebugLocation(509, 9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:509:9: ( '.' IDENTIFIER )+
				int cnt7=0;
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, decisionCanBacktrack[7]);
					int LA7_1 = input.LA(1);

					if ((LA7_1==DOT))
					{
						int LA7_2 = input.LA(2);

						if ((LA7_2==IDENTIFIER))
						{
							alt7 = 1;
						}


					}


					} finally { DebugExitDecision(7); }
					switch (alt7)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:509:10: '.' IDENTIFIER
						{
						DebugLocation(509, 10);
						Match(input,DOT,Follow._DOT_in_importDeclaration362); if (state.failed) return;
						DebugLocation(509, 14);
						Match(input,IDENTIFIER,Follow._IDENTIFIER_in_importDeclaration364); if (state.failed) return;

						}
						break;

					default:
						if (cnt7 >= 1)
							goto loop7;

						if (state.backtracking>0) {state.failed=true; return;}
						EarlyExitException eee7 = new EarlyExitException( 7, input );
						DebugRecognitionException(eee7);
						throw eee7;
					}
					cnt7++;
				}
				loop7:
					;

				} finally { DebugExitSubRule(7); }

				DebugLocation(511, 9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:511:9: ( '.' '*' )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, decisionCanBacktrack[8]);
				int LA8_1 = input.LA(1);

				if ((LA8_1==DOT))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:511:10: '.' '*'
					{
					DebugLocation(511, 10);
					Match(input,DOT,Follow._DOT_in_importDeclaration386); if (state.failed) return;
					DebugLocation(511, 14);
					Match(input,STAR,Follow._STAR_in_importDeclaration388); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(8); }

				DebugLocation(513, 9);
				Match(input,SEMI,Follow._SEMI_in_importDeclaration409); if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("importDeclaration", 3);
			LeaveRule("importDeclaration", 3);
			LeaveRule_importDeclaration();
	        if (state.backtracking > 0) { Memoize(input, 3, importDeclaration_StartIndex); }

	    }
	 	DebugLocation(514, 4);
		} finally { DebugExitRule(GrammarFileName, "importDeclaration"); }
		return;

	}
	// $ANTLR end "importDeclaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_qualifiedImportName() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_qualifiedImportName() {}
	// $ANTLR start "qualifiedImportName"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:516:1: qualifiedImportName : IDENTIFIER ( '.' IDENTIFIER )* ;
	[GrammarRule("qualifiedImportName")]
	private void qualifiedImportName()
	{
		EnterRule_qualifiedImportName();
		EnterRule("qualifiedImportName", 4);
		TraceIn("qualifiedImportName", 4);
	    int qualifiedImportName_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "qualifiedImportName");
		DebugLocation(516, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:517:5: ( IDENTIFIER ( '.' IDENTIFIER )* )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:517:9: IDENTIFIER ( '.' IDENTIFIER )*
			{
			DebugLocation(517, 9);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_qualifiedImportName429); if (state.failed) return;
			DebugLocation(518, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:518:9: ( '.' IDENTIFIER )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, decisionCanBacktrack[10]);
				int LA10_1 = input.LA(1);

				if ((LA10_1==DOT))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:518:10: '.' IDENTIFIER
					{
					DebugLocation(518, 10);
					Match(input,DOT,Follow._DOT_in_qualifiedImportName441); if (state.failed) return;
					DebugLocation(518, 14);
					Match(input,IDENTIFIER,Follow._IDENTIFIER_in_qualifiedImportName443); if (state.failed) return;

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("qualifiedImportName", 4);
			LeaveRule("qualifiedImportName", 4);
			LeaveRule_qualifiedImportName();
	        if (state.backtracking > 0) { Memoize(input, 4, qualifiedImportName_StartIndex); }

	    }
	 	DebugLocation(520, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedImportName"); }
		return;

	}
	// $ANTLR end "qualifiedImportName"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_typeDeclaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_typeDeclaration() {}
	// $ANTLR start "typeDeclaration"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:522:1: typeDeclaration : ( classOrInterfaceDeclaration | ';' );
	[GrammarRule("typeDeclaration")]
	private void typeDeclaration()
	{
		EnterRule_typeDeclaration();
		EnterRule("typeDeclaration", 5);
		TraceIn("typeDeclaration", 5);
	    int typeDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "typeDeclaration");
		DebugLocation(522, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:523:5: ( classOrInterfaceDeclaration | ';' )
			int alt11=2;
			try { DebugEnterDecision(11, decisionCanBacktrack[11]);
			int LA11_1 = input.LA(1);

			if ((LA11_1==ABSTRACT||LA11_1==BOOLEAN||LA11_1==BYTE||LA11_1==CHAR||LA11_1==CLASS||LA11_1==DOUBLE||LA11_1==ENUM||LA11_1==FINAL||LA11_1==FLOAT||LA11_1==IDENTIFIER||(LA11_1>=INT && LA11_1<=INTERFACE)||LA11_1==LONG||LA11_1==LT||(LA11_1>=MONKEYS_AT && LA11_1<=NATIVE)||(LA11_1>=PRIVATE && LA11_1<=PUBLIC)||LA11_1==SHORT||(LA11_1>=STATIC && LA11_1<=STRICTFP)||LA11_1==SYNCHRONIZED||LA11_1==TRANSIENT||(LA11_1>=VOID && LA11_1<=VOLATILE)))
			{
				alt11 = 1;
			}
			else if ((LA11_1==SEMI))
			{
				alt11 = 2;
			}

			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 11, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}

			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:523:9: classOrInterfaceDeclaration
				{
				DebugLocation(523, 9);
				PushFollow(Follow._classOrInterfaceDeclaration_in_typeDeclaration474);
				classOrInterfaceDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:524:9: ';'
				{
				DebugLocation(524, 9);
				Match(input,SEMI,Follow._SEMI_in_typeDeclaration484); if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeDeclaration", 5);
			LeaveRule("typeDeclaration", 5);
			LeaveRule_typeDeclaration();
	        if (state.backtracking > 0) { Memoize(input, 5, typeDeclaration_StartIndex); }

	    }
	 	DebugLocation(525, 4);
		} finally { DebugExitRule(GrammarFileName, "typeDeclaration"); }
		return;

	}
	// $ANTLR end "typeDeclaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_classOrInterfaceDeclaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_classOrInterfaceDeclaration() {}
	// $ANTLR start "classOrInterfaceDeclaration"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:527:1: classOrInterfaceDeclaration : ( classDeclaration | interfaceDeclaration );
	[GrammarRule("classOrInterfaceDeclaration")]
	private void classOrInterfaceDeclaration()
	{
		EnterRule_classOrInterfaceDeclaration();
		EnterRule("classOrInterfaceDeclaration", 6);
		TraceIn("classOrInterfaceDeclaration", 6);
	    int classOrInterfaceDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "classOrInterfaceDeclaration");
		DebugLocation(527, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:528:5: ( classDeclaration | interfaceDeclaration )
			int alt12=2;
			try { DebugEnterDecision(12, decisionCanBacktrack[12]);
			switch (input.LA(1))
			{
			case MONKEYS_AT:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}

				}
				break;
			case PUBLIC:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}

				}
				break;
			case PROTECTED:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}

				}
				break;
			case PRIVATE:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}

				}
				break;
			case STATIC:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}

				}
				break;
			case ABSTRACT:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}

				}
				break;
			case FINAL:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}

				}
				break;
			case NATIVE:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}

				}
				break;
			case SYNCHRONIZED:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}

				}
				break;
			case TRANSIENT:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}

				}
				break;
			case VOLATILE:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}

				}
				break;
			case STRICTFP:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}

				}
				break;
			case CLASS:
			case ENUM:
				{
				alt12 = 1;
				}
				break;
			case INTERFACE:
				{
				alt12 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:528:10: classDeclaration
				{
				DebugLocation(528, 10);
				PushFollow(Follow._classDeclaration_in_classOrInterfaceDeclaration505);
				classDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:529:9: interfaceDeclaration
				{
				DebugLocation(529, 9);
				PushFollow(Follow._interfaceDeclaration_in_classOrInterfaceDeclaration515);
				interfaceDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("classOrInterfaceDeclaration", 6);
			LeaveRule("classOrInterfaceDeclaration", 6);
			LeaveRule_classOrInterfaceDeclaration();
	        if (state.backtracking > 0) { Memoize(input, 6, classOrInterfaceDeclaration_StartIndex); }

	    }
	 	DebugLocation(530, 4);
		} finally { DebugExitRule(GrammarFileName, "classOrInterfaceDeclaration"); }
		return;

	}
	// $ANTLR end "classOrInterfaceDeclaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_modifiers() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_modifiers() {}
	// $ANTLR start "modifiers"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:533:1: modifiers : ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' )* ;
	[GrammarRule("modifiers")]
	private void modifiers()
	{
		EnterRule_modifiers();
		EnterRule("modifiers", 7);
		TraceIn("modifiers", 7);
	    int modifiers_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "modifiers");
		DebugLocation(533, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:534:5: ( ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' )* )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:535:5: ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' )*
			{
			DebugLocation(535, 5);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:535:5: ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' )*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=13;
				try { DebugEnterDecision(13, decisionCanBacktrack[13]);
				switch (input.LA(1))
				{
				case MONKEYS_AT:
					{
					int LA13_2 = input.LA(2);

					if ((LA13_2==IDENTIFIER))
					{
						alt13 = 1;
					}


					}
					break;
				case PUBLIC:
					{
					alt13 = 2;
					}
					break;
				case PROTECTED:
					{
					alt13 = 3;
					}
					break;
				case PRIVATE:
					{
					alt13 = 4;
					}
					break;
				case STATIC:
					{
					alt13 = 5;
					}
					break;
				case ABSTRACT:
					{
					alt13 = 6;
					}
					break;
				case FINAL:
					{
					alt13 = 7;
					}
					break;
				case NATIVE:
					{
					alt13 = 8;
					}
					break;
				case SYNCHRONIZED:
					{
					alt13 = 9;
					}
					break;
				case TRANSIENT:
					{
					alt13 = 10;
					}
					break;
				case VOLATILE:
					{
					alt13 = 11;
					}
					break;
				case STRICTFP:
					{
					alt13 = 12;
					}
					break;
				}

				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:535:10: annotation
					{
					DebugLocation(535, 10);
					PushFollow(Follow._annotation_in_modifiers550);
					annotation();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:536:9: 'public'
					{
					DebugLocation(536, 9);
					Match(input,PUBLIC,Follow._PUBLIC_in_modifiers560); if (state.failed) return;

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:537:9: 'protected'
					{
					DebugLocation(537, 9);
					Match(input,PROTECTED,Follow._PROTECTED_in_modifiers570); if (state.failed) return;

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:538:9: 'private'
					{
					DebugLocation(538, 9);
					Match(input,PRIVATE,Follow._PRIVATE_in_modifiers580); if (state.failed) return;

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:539:9: 'static'
					{
					DebugLocation(539, 9);
					Match(input,STATIC,Follow._STATIC_in_modifiers590); if (state.failed) return;

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:540:9: 'abstract'
					{
					DebugLocation(540, 9);
					Match(input,ABSTRACT,Follow._ABSTRACT_in_modifiers600); if (state.failed) return;

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:541:9: 'final'
					{
					DebugLocation(541, 9);
					Match(input,FINAL,Follow._FINAL_in_modifiers611); if (state.failed) return;

					}
					break;
				case 8:
					DebugEnterAlt(8);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:542:9: 'native'
					{
					DebugLocation(542, 9);
					Match(input,NATIVE,Follow._NATIVE_in_modifiers622); if (state.failed) return;

					}
					break;
				case 9:
					DebugEnterAlt(9);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:543:9: 'synchronized'
					{
					DebugLocation(543, 9);
					Match(input,SYNCHRONIZED,Follow._SYNCHRONIZED_in_modifiers633); if (state.failed) return;

					}
					break;
				case 10:
					DebugEnterAlt(10);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:544:9: 'transient'
					{
					DebugLocation(544, 9);
					Match(input,TRANSIENT,Follow._TRANSIENT_in_modifiers644); if (state.failed) return;

					}
					break;
				case 11:
					DebugEnterAlt(11);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:545:9: 'volatile'
					{
					DebugLocation(545, 9);
					Match(input,VOLATILE,Follow._VOLATILE_in_modifiers655); if (state.failed) return;

					}
					break;
				case 12:
					DebugEnterAlt(12);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:546:9: 'strictfp'
					{
					DebugLocation(546, 9);
					Match(input,STRICTFP,Follow._STRICTFP_in_modifiers666); if (state.failed) return;

					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("modifiers", 7);
			LeaveRule("modifiers", 7);
			LeaveRule_modifiers();
	        if (state.backtracking > 0) { Memoize(input, 7, modifiers_StartIndex); }

	    }
	 	DebugLocation(548, 4);
		} finally { DebugExitRule(GrammarFileName, "modifiers"); }
		return;

	}
	// $ANTLR end "modifiers"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_variableModifiers() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_variableModifiers() {}
	// $ANTLR start "variableModifiers"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:551:1: variableModifiers : ( 'final' | annotation )* ;
	[GrammarRule("variableModifiers")]
	private void variableModifiers()
	{
		EnterRule_variableModifiers();
		EnterRule("variableModifiers", 8);
		TraceIn("variableModifiers", 8);
	    int variableModifiers_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "variableModifiers");
		DebugLocation(551, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:552:5: ( ( 'final' | annotation )* )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:553:6: ( 'final' | annotation )*
			{
			DebugLocation(553, 6);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:553:6: ( 'final' | annotation )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=3;
				try { DebugEnterDecision(14, decisionCanBacktrack[14]);
				int LA14_1 = input.LA(1);

				if ((LA14_1==FINAL))
				{
					alt14 = 1;
				}
				else if ((LA14_1==MONKEYS_AT))
				{
					alt14 = 2;
				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:553:10: 'final'
					{
					DebugLocation(553, 10);
					Match(input,FINAL,Follow._FINAL_in_variableModifiers704); if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:554:13: annotation
					{
					DebugLocation(554, 13);
					PushFollow(Follow._annotation_in_variableModifiers719);
					annotation();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableModifiers", 8);
			LeaveRule("variableModifiers", 8);
			LeaveRule_variableModifiers();
	        if (state.backtracking > 0) { Memoize(input, 8, variableModifiers_StartIndex); }

	    }
	 	DebugLocation(556, 4);
		} finally { DebugExitRule(GrammarFileName, "variableModifiers"); }
		return;

	}
	// $ANTLR end "variableModifiers"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_classDeclaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_classDeclaration() {}
	// $ANTLR start "classDeclaration"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:559:1: classDeclaration : ( normalClassDeclaration | enumDeclaration );
	[GrammarRule("classDeclaration")]
	private void classDeclaration()
	{
		EnterRule_classDeclaration();
		EnterRule("classDeclaration", 9);
		TraceIn("classDeclaration", 9);
	    int classDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "classDeclaration");
		DebugLocation(559, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:560:5: ( normalClassDeclaration | enumDeclaration )
			int alt15=2;
			try { DebugEnterDecision(15, decisionCanBacktrack[15]);
			switch (input.LA(1))
			{
			case MONKEYS_AT:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}

				}
				break;
			case PUBLIC:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}

				}
				break;
			case PROTECTED:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}

				}
				break;
			case PRIVATE:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}

				}
				break;
			case STATIC:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}

				}
				break;
			case ABSTRACT:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}

				}
				break;
			case FINAL:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}

				}
				break;
			case NATIVE:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}

				}
				break;
			case SYNCHRONIZED:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}

				}
				break;
			case TRANSIENT:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}

				}
				break;
			case VOLATILE:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}

				}
				break;
			case STRICTFP:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}

				}
				break;
			case CLASS:
				{
				alt15 = 1;
				}
				break;
			case ENUM:
				{
				alt15 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:560:9: normalClassDeclaration
				{
				DebugLocation(560, 9);
				PushFollow(Follow._normalClassDeclaration_in_classDeclaration755);
				normalClassDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:561:9: enumDeclaration
				{
				DebugLocation(561, 9);
				PushFollow(Follow._enumDeclaration_in_classDeclaration765);
				enumDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("classDeclaration", 9);
			LeaveRule("classDeclaration", 9);
			LeaveRule_classDeclaration();
	        if (state.backtracking > 0) { Memoize(input, 9, classDeclaration_StartIndex); }

	    }
	 	DebugLocation(562, 4);
		} finally { DebugExitRule(GrammarFileName, "classDeclaration"); }
		return;

	}
	// $ANTLR end "classDeclaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_normalClassDeclaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_normalClassDeclaration() {}
	// $ANTLR start "normalClassDeclaration"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:564:1: normalClassDeclaration : modifiers 'class' IDENTIFIER ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody ;
	[GrammarRule("normalClassDeclaration")]
	private void normalClassDeclaration()
	{
		EnterRule_normalClassDeclaration();
		EnterRule("normalClassDeclaration", 10);
		TraceIn("normalClassDeclaration", 10);
	    int normalClassDeclaration_StartIndex = input.Index;

	    IToken IDENTIFIER1 = default(IToken);

		try { DebugEnterRule(GrammarFileName, "normalClassDeclaration");
		DebugLocation(564, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:565:5: ( modifiers 'class' IDENTIFIER ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:566:6: modifiers 'class' IDENTIFIER ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody
			{
			DebugLocation(566, 6);
			PushFollow(Follow._modifiers_in_normalClassDeclaration791);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(566, 17);
			Match(input,CLASS,Follow._CLASS_in_normalClassDeclaration794); if (state.failed) return;
			DebugLocation(566, 25);
			IDENTIFIER1=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_normalClassDeclaration796); if (state.failed) return;
			DebugLocation(566, 36);
			if (state.backtracking == 0)
			{
				 classCount++; Console.Write("class:" + (IDENTIFIER1!=null?IDENTIFIER1.Text:default(string)));
				    	currentClass = (IDENTIFIER1!=null?IDENTIFIER1.Text:default(string)); classes += (IDENTIFIER1!=null?IDENTIFIER1.Text:default(string)) + ",";
			}
			DebugLocation(568, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:568:9: ( typeParameters )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, decisionCanBacktrack[16]);
			int LA16_1 = input.LA(1);

			if ((LA16_1==LT))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:568:10: typeParameters
				{
				DebugLocation(568, 10);
				PushFollow(Follow._typeParameters_in_normalClassDeclaration809);
				typeParameters();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(570, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:570:9: ( 'extends' type )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, decisionCanBacktrack[17]);
			int LA17_1 = input.LA(1);

			if ((LA17_1==EXTENDS))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:570:10: 'extends' type
				{
				DebugLocation(570, 10);
				Match(input,EXTENDS,Follow._EXTENDS_in_normalClassDeclaration831); if (state.failed) return;
				DebugLocation(570, 20);
				PushFollow(Follow._type_in_normalClassDeclaration833);
				type();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(572, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:572:9: ( 'implements' typeList )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, decisionCanBacktrack[18]);
			int LA18_1 = input.LA(1);

			if ((LA18_1==IMPLEMENTS))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:572:10: 'implements' typeList
				{
				DebugLocation(572, 10);
				Match(input,IMPLEMENTS,Follow._IMPLEMENTS_in_normalClassDeclaration856); if (state.failed) return;
				DebugLocation(572, 23);
				PushFollow(Follow._typeList_in_normalClassDeclaration858);
				typeList();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(574, 9);
			PushFollow(Follow._classBody_in_normalClassDeclaration892);
			classBody();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("normalClassDeclaration", 10);
			LeaveRule("normalClassDeclaration", 10);
			LeaveRule_normalClassDeclaration();
	        if (state.backtracking > 0) { Memoize(input, 10, normalClassDeclaration_StartIndex); }

	    }
	 	DebugLocation(575, 4);
		} finally { DebugExitRule(GrammarFileName, "normalClassDeclaration"); }
		return;

	}
	// $ANTLR end "normalClassDeclaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_typeParameters() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_typeParameters() {}
	// $ANTLR start "typeParameters"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:578:1: typeParameters : '<' typeParameter ( ',' typeParameter )* '>' ;
	[GrammarRule("typeParameters")]
	private void typeParameters()
	{
		EnterRule_typeParameters();
		EnterRule("typeParameters", 11);
		TraceIn("typeParameters", 11);
	    int typeParameters_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "typeParameters");
		DebugLocation(578, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:579:5: ( '<' typeParameter ( ',' typeParameter )* '>' )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:579:9: '<' typeParameter ( ',' typeParameter )* '>'
			{
			DebugLocation(579, 9);
			Match(input,LT,Follow._LT_in_typeParameters913); if (state.failed) return;
			DebugLocation(580, 13);
			PushFollow(Follow._typeParameter_in_typeParameters927);
			typeParameter();
			PopFollow();
			if (state.failed) return;
			DebugLocation(581, 13);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:581:13: ( ',' typeParameter )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, decisionCanBacktrack[19]);
				int LA19_1 = input.LA(1);

				if ((LA19_1==COMMA))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:581:14: ',' typeParameter
					{
					DebugLocation(581, 14);
					Match(input,COMMA,Follow._COMMA_in_typeParameters942); if (state.failed) return;
					DebugLocation(581, 18);
					PushFollow(Follow._typeParameter_in_typeParameters944);
					typeParameter();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }

			DebugLocation(583, 9);
			Match(input,GT,Follow._GT_in_typeParameters969); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeParameters", 11);
			LeaveRule("typeParameters", 11);
			LeaveRule_typeParameters();
	        if (state.backtracking > 0) { Memoize(input, 11, typeParameters_StartIndex); }

	    }
	 	DebugLocation(584, 4);
		} finally { DebugExitRule(GrammarFileName, "typeParameters"); }
		return;

	}
	// $ANTLR end "typeParameters"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_typeParameter() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_typeParameter() {}
	// $ANTLR start "typeParameter"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:586:1: typeParameter : IDENTIFIER ( 'extends' typeBound )? ;
	[GrammarRule("typeParameter")]
	private void typeParameter()
	{
		EnterRule_typeParameter();
		EnterRule("typeParameter", 12);
		TraceIn("typeParameter", 12);
	    int typeParameter_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "typeParameter");
		DebugLocation(586, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:587:5: ( IDENTIFIER ( 'extends' typeBound )? )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:587:9: IDENTIFIER ( 'extends' typeBound )?
			{
			DebugLocation(587, 9);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_typeParameter989); if (state.failed) return;
			DebugLocation(588, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:588:9: ( 'extends' typeBound )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, decisionCanBacktrack[20]);
			int LA20_1 = input.LA(1);

			if ((LA20_1==EXTENDS))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:588:10: 'extends' typeBound
				{
				DebugLocation(588, 10);
				Match(input,EXTENDS,Follow._EXTENDS_in_typeParameter1001); if (state.failed) return;
				DebugLocation(588, 20);
				PushFollow(Follow._typeBound_in_typeParameter1003);
				typeBound();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(20); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeParameter", 12);
			LeaveRule("typeParameter", 12);
			LeaveRule_typeParameter();
	        if (state.backtracking > 0) { Memoize(input, 12, typeParameter_StartIndex); }

	    }
	 	DebugLocation(590, 4);
		} finally { DebugExitRule(GrammarFileName, "typeParameter"); }
		return;

	}
	// $ANTLR end "typeParameter"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_typeBound() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_typeBound() {}
	// $ANTLR start "typeBound"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:593:1: typeBound : type ( '&' type )* ;
	[GrammarRule("typeBound")]
	private void typeBound()
	{
		EnterRule_typeBound();
		EnterRule("typeBound", 13);
		TraceIn("typeBound", 13);
	    int typeBound_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "typeBound");
		DebugLocation(593, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:594:5: ( type ( '&' type )* )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:594:9: type ( '&' type )*
			{
			DebugLocation(594, 9);
			PushFollow(Follow._type_in_typeBound1036);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(595, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:595:9: ( '&' type )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, decisionCanBacktrack[21]);
				int LA21_1 = input.LA(1);

				if ((LA21_1==AMP))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:595:10: '&' type
					{
					DebugLocation(595, 10);
					Match(input,AMP,Follow._AMP_in_typeBound1047); if (state.failed) return;
					DebugLocation(595, 14);
					PushFollow(Follow._type_in_typeBound1049);
					type();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeBound", 13);
			LeaveRule("typeBound", 13);
			LeaveRule_typeBound();
	        if (state.backtracking > 0) { Memoize(input, 13, typeBound_StartIndex); }

	    }
	 	DebugLocation(597, 4);
		} finally { DebugExitRule(GrammarFileName, "typeBound"); }
		return;

	}
	// $ANTLR end "typeBound"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_enumDeclaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_enumDeclaration() {}
	// $ANTLR start "enumDeclaration"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:600:1: enumDeclaration : modifiers ( 'enum' ) IDENTIFIER ( 'implements' typeList )? enumBody ;
	[GrammarRule("enumDeclaration")]
	private void enumDeclaration()
	{
		EnterRule_enumDeclaration();
		EnterRule("enumDeclaration", 14);
		TraceIn("enumDeclaration", 14);
	    int enumDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "enumDeclaration");
		DebugLocation(600, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:601:5: ( modifiers ( 'enum' ) IDENTIFIER ( 'implements' typeList )? enumBody )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:601:9: modifiers ( 'enum' ) IDENTIFIER ( 'implements' typeList )? enumBody
			{
			DebugLocation(601, 9);
			PushFollow(Follow._modifiers_in_enumDeclaration1081);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(602, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:602:9: ( 'enum' )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:602:10: 'enum'
			{
			DebugLocation(602, 10);
			Match(input,ENUM,Follow._ENUM_in_enumDeclaration1093); if (state.failed) return;

			}

			DebugLocation(604, 9);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_enumDeclaration1114); if (state.failed) return;
			DebugLocation(605, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:605:9: ( 'implements' typeList )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, decisionCanBacktrack[22]);
			int LA22_1 = input.LA(1);

			if ((LA22_1==IMPLEMENTS))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:605:10: 'implements' typeList
				{
				DebugLocation(605, 10);
				Match(input,IMPLEMENTS,Follow._IMPLEMENTS_in_enumDeclaration1125); if (state.failed) return;
				DebugLocation(605, 23);
				PushFollow(Follow._typeList_in_enumDeclaration1127);
				typeList();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(607, 9);
			PushFollow(Follow._enumBody_in_enumDeclaration1148);
			enumBody();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enumDeclaration", 14);
			LeaveRule("enumDeclaration", 14);
			LeaveRule_enumDeclaration();
	        if (state.backtracking > 0) { Memoize(input, 14, enumDeclaration_StartIndex); }

	    }
	 	DebugLocation(608, 4);
		} finally { DebugExitRule(GrammarFileName, "enumDeclaration"); }
		return;

	}
	// $ANTLR end "enumDeclaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_enumBody() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_enumBody() {}
	// $ANTLR start "enumBody"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:611:1: enumBody : '{' ( enumConstants )? ( ',' )? ( enumBodyDeclarations )? '}' ;
	[GrammarRule("enumBody")]
	private void enumBody()
	{
		EnterRule_enumBody();
		EnterRule("enumBody", 15);
		TraceIn("enumBody", 15);
	    int enumBody_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "enumBody");
		DebugLocation(611, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:612:5: ( '{' ( enumConstants )? ( ',' )? ( enumBodyDeclarations )? '}' )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:612:9: '{' ( enumConstants )? ( ',' )? ( enumBodyDeclarations )? '}'
			{
			DebugLocation(612, 9);
			Match(input,LBRACE,Follow._LBRACE_in_enumBody1173); if (state.failed) return;
			DebugLocation(613, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:613:9: ( enumConstants )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, decisionCanBacktrack[23]);
			int LA23_1 = input.LA(1);

			if ((LA23_1==IDENTIFIER||LA23_1==MONKEYS_AT))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:613:10: enumConstants
				{
				DebugLocation(613, 10);
				PushFollow(Follow._enumConstants_in_enumBody1184);
				enumConstants();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(615, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:615:9: ( ',' )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, decisionCanBacktrack[24]);
			int LA24_1 = input.LA(1);

			if ((LA24_1==COMMA))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:615:9: ','
				{
				DebugLocation(615, 9);
				Match(input,COMMA,Follow._COMMA_in_enumBody1206); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(616, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:616:9: ( enumBodyDeclarations )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, decisionCanBacktrack[25]);
			int LA25_1 = input.LA(1);

			if ((LA25_1==SEMI))
			{
				alt25 = 1;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:616:10: enumBodyDeclarations
				{
				DebugLocation(616, 10);
				PushFollow(Follow._enumBodyDeclarations_in_enumBody1219);
				enumBodyDeclarations();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(25); }

			DebugLocation(618, 9);
			Match(input,RBRACE,Follow._RBRACE_in_enumBody1241); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enumBody", 15);
			LeaveRule("enumBody", 15);
			LeaveRule_enumBody();
	        if (state.backtracking > 0) { Memoize(input, 15, enumBody_StartIndex); }

	    }
	 	DebugLocation(619, 4);
		} finally { DebugExitRule(GrammarFileName, "enumBody"); }
		return;

	}
	// $ANTLR end "enumBody"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_enumConstants() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_enumConstants() {}
	// $ANTLR start "enumConstants"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:621:1: enumConstants : enumConstant ( ',' enumConstant )* ;
	[GrammarRule("enumConstants")]
	private void enumConstants()
	{
		EnterRule_enumConstants();
		EnterRule("enumConstants", 16);
		TraceIn("enumConstants", 16);
	    int enumConstants_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "enumConstants");
		DebugLocation(621, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:622:5: ( enumConstant ( ',' enumConstant )* )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:622:9: enumConstant ( ',' enumConstant )*
			{
			DebugLocation(622, 9);
			PushFollow(Follow._enumConstant_in_enumConstants1261);
			enumConstant();
			PopFollow();
			if (state.failed) return;
			DebugLocation(623, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:623:9: ( ',' enumConstant )*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, decisionCanBacktrack[26]);
				int LA26_1 = input.LA(1);

				if ((LA26_1==COMMA))
				{
					int LA26_2 = input.LA(2);

					if ((LA26_2==IDENTIFIER||LA26_2==MONKEYS_AT))
					{
						alt26 = 1;
					}


				}


				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:623:10: ',' enumConstant
					{
					DebugLocation(623, 10);
					Match(input,COMMA,Follow._COMMA_in_enumConstants1272); if (state.failed) return;
					DebugLocation(623, 14);
					PushFollow(Follow._enumConstant_in_enumConstants1274);
					enumConstant();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enumConstants", 16);
			LeaveRule("enumConstants", 16);
			LeaveRule_enumConstants();
	        if (state.backtracking > 0) { Memoize(input, 16, enumConstants_StartIndex); }

	    }
	 	DebugLocation(625, 4);
		} finally { DebugExitRule(GrammarFileName, "enumConstants"); }
		return;

	}
	// $ANTLR end "enumConstants"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_enumConstant() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_enumConstant() {}
	// $ANTLR start "enumConstant"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:631:1: enumConstant : ( annotations )? IDENTIFIER ( arguments )? ( classBody )? ;
	[GrammarRule("enumConstant")]
	private void enumConstant()
	{
		EnterRule_enumConstant();
		EnterRule("enumConstant", 17);
		TraceIn("enumConstant", 17);
	    int enumConstant_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "enumConstant");
		DebugLocation(631, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:632:5: ( ( annotations )? IDENTIFIER ( arguments )? ( classBody )? )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:632:9: ( annotations )? IDENTIFIER ( arguments )? ( classBody )?
			{
			DebugLocation(632, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:632:9: ( annotations )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, decisionCanBacktrack[27]);
			int LA27_1 = input.LA(1);

			if ((LA27_1==MONKEYS_AT))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:632:10: annotations
				{
				DebugLocation(632, 10);
				PushFollow(Follow._annotations_in_enumConstant1308);
				annotations();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(27); }

			DebugLocation(634, 9);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_enumConstant1329); if (state.failed) return;
			DebugLocation(635, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:635:9: ( arguments )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, decisionCanBacktrack[28]);
			int LA28_1 = input.LA(1);

			if ((LA28_1==LPAREN))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:635:10: arguments
				{
				DebugLocation(635, 10);
				PushFollow(Follow._arguments_in_enumConstant1340);
				arguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(28); }

			DebugLocation(637, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:637:9: ( classBody )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, decisionCanBacktrack[29]);
			int LA29_1 = input.LA(1);

			if ((LA29_1==LBRACE))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:637:10: classBody
				{
				DebugLocation(637, 10);
				PushFollow(Follow._classBody_in_enumConstant1362);
				classBody();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(29); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enumConstant", 17);
			LeaveRule("enumConstant", 17);
			LeaveRule_enumConstant();
	        if (state.backtracking > 0) { Memoize(input, 17, enumConstant_StartIndex); }

	    }
	 	DebugLocation(641, 4);
		} finally { DebugExitRule(GrammarFileName, "enumConstant"); }
		return;

	}
	// $ANTLR end "enumConstant"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_enumBodyDeclarations() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_enumBodyDeclarations() {}
	// $ANTLR start "enumBodyDeclarations"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:643:1: enumBodyDeclarations : ';' ( classBodyDeclaration )* ;
	[GrammarRule("enumBodyDeclarations")]
	private void enumBodyDeclarations()
	{
		EnterRule_enumBodyDeclarations();
		EnterRule("enumBodyDeclarations", 18);
		TraceIn("enumBodyDeclarations", 18);
	    int enumBodyDeclarations_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "enumBodyDeclarations");
		DebugLocation(643, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:644:5: ( ';' ( classBodyDeclaration )* )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:644:9: ';' ( classBodyDeclaration )*
			{
			DebugLocation(644, 9);
			Match(input,SEMI,Follow._SEMI_in_enumBodyDeclarations1403); if (state.failed) return;
			DebugLocation(645, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:645:9: ( classBodyDeclaration )*
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, decisionCanBacktrack[30]);
				int LA30_1 = input.LA(1);

				if ((LA30_1==ABSTRACT||LA30_1==BOOLEAN||LA30_1==BYTE||LA30_1==CHAR||LA30_1==CLASS||LA30_1==DOUBLE||LA30_1==ENUM||LA30_1==FINAL||LA30_1==FLOAT||LA30_1==IDENTIFIER||(LA30_1>=INT && LA30_1<=INTERFACE)||LA30_1==LBRACE||LA30_1==LONG||LA30_1==LT||(LA30_1>=MONKEYS_AT && LA30_1<=NATIVE)||(LA30_1>=PRIVATE && LA30_1<=PUBLIC)||(LA30_1>=SEMI && LA30_1<=SHORT)||(LA30_1>=STATIC && LA30_1<=STRICTFP)||LA30_1==SYNCHRONIZED||LA30_1==TRANSIENT||(LA30_1>=VOID && LA30_1<=VOLATILE)))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch ( alt30 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:645:10: classBodyDeclaration
					{
					DebugLocation(645, 10);
					PushFollow(Follow._classBodyDeclaration_in_enumBodyDeclarations1415);
					classBodyDeclaration();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop30;
				}
			}

			loop30:
				;

			} finally { DebugExitSubRule(30); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enumBodyDeclarations", 18);
			LeaveRule("enumBodyDeclarations", 18);
			LeaveRule_enumBodyDeclarations();
	        if (state.backtracking > 0) { Memoize(input, 18, enumBodyDeclarations_StartIndex); }

	    }
	 	DebugLocation(647, 4);
		} finally { DebugExitRule(GrammarFileName, "enumBodyDeclarations"); }
		return;

	}
	// $ANTLR end "enumBodyDeclarations"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_interfaceDeclaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_interfaceDeclaration() {}
	// $ANTLR start "interfaceDeclaration"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:649:1: interfaceDeclaration : ( normalInterfaceDeclaration | annotationTypeDeclaration );
	[GrammarRule("interfaceDeclaration")]
	private void interfaceDeclaration()
	{
		EnterRule_interfaceDeclaration();
		EnterRule("interfaceDeclaration", 19);
		TraceIn("interfaceDeclaration", 19);
	    int interfaceDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "interfaceDeclaration");
		DebugLocation(649, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:650:5: ( normalInterfaceDeclaration | annotationTypeDeclaration )
			int alt31=2;
			try { DebugEnterDecision(31, decisionCanBacktrack[31]);
			switch (input.LA(1))
			{
			case MONKEYS_AT:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}

				}
				break;
			case PUBLIC:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}

				}
				break;
			case PROTECTED:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}

				}
				break;
			case PRIVATE:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}

				}
				break;
			case STATIC:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}

				}
				break;
			case ABSTRACT:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}

				}
				break;
			case FINAL:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}

				}
				break;
			case NATIVE:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}

				}
				break;
			case SYNCHRONIZED:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}

				}
				break;
			case TRANSIENT:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}

				}
				break;
			case VOLATILE:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}

				}
				break;
			case STRICTFP:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}

				}
				break;
			case INTERFACE:
				{
				alt31 = 1;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 31, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:650:9: normalInterfaceDeclaration
				{
				DebugLocation(650, 9);
				PushFollow(Follow._normalInterfaceDeclaration_in_interfaceDeclaration1446);
				normalInterfaceDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:651:9: annotationTypeDeclaration
				{
				DebugLocation(651, 9);
				PushFollow(Follow._annotationTypeDeclaration_in_interfaceDeclaration1456);
				annotationTypeDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("interfaceDeclaration", 19);
			LeaveRule("interfaceDeclaration", 19);
			LeaveRule_interfaceDeclaration();
	        if (state.backtracking > 0) { Memoize(input, 19, interfaceDeclaration_StartIndex); }

	    }
	 	DebugLocation(652, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceDeclaration"); }
		return;

	}
	// $ANTLR end "interfaceDeclaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_normalInterfaceDeclaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_normalInterfaceDeclaration() {}
	// $ANTLR start "normalInterfaceDeclaration"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:654:1: normalInterfaceDeclaration : modifiers 'interface' IDENTIFIER ( typeParameters )? ( 'extends' typeList )? interfaceBody ;
	[GrammarRule("normalInterfaceDeclaration")]
	private void normalInterfaceDeclaration()
	{
		EnterRule_normalInterfaceDeclaration();
		EnterRule("normalInterfaceDeclaration", 20);
		TraceIn("normalInterfaceDeclaration", 20);
	    int normalInterfaceDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "normalInterfaceDeclaration");
		DebugLocation(654, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:655:5: ( modifiers 'interface' IDENTIFIER ( typeParameters )? ( 'extends' typeList )? interfaceBody )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:655:9: modifiers 'interface' IDENTIFIER ( typeParameters )? ( 'extends' typeList )? interfaceBody
			{
			DebugLocation(655, 9);
			PushFollow(Follow._modifiers_in_normalInterfaceDeclaration1480);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(655, 19);
			Match(input,INTERFACE,Follow._INTERFACE_in_normalInterfaceDeclaration1482); if (state.failed) return;
			DebugLocation(655, 31);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_normalInterfaceDeclaration1484); if (state.failed) return;
			DebugLocation(656, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:656:9: ( typeParameters )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, decisionCanBacktrack[32]);
			int LA32_1 = input.LA(1);

			if ((LA32_1==LT))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:656:10: typeParameters
				{
				DebugLocation(656, 10);
				PushFollow(Follow._typeParameters_in_normalInterfaceDeclaration1495);
				typeParameters();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(32); }

			DebugLocation(658, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:658:9: ( 'extends' typeList )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, decisionCanBacktrack[33]);
			int LA33_1 = input.LA(1);

			if ((LA33_1==EXTENDS))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:658:10: 'extends' typeList
				{
				DebugLocation(658, 10);
				Match(input,EXTENDS,Follow._EXTENDS_in_normalInterfaceDeclaration1517); if (state.failed) return;
				DebugLocation(658, 20);
				PushFollow(Follow._typeList_in_normalInterfaceDeclaration1519);
				typeList();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(660, 9);
			PushFollow(Follow._interfaceBody_in_normalInterfaceDeclaration1540);
			interfaceBody();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("normalInterfaceDeclaration", 20);
			LeaveRule("normalInterfaceDeclaration", 20);
			LeaveRule_normalInterfaceDeclaration();
	        if (state.backtracking > 0) { Memoize(input, 20, normalInterfaceDeclaration_StartIndex); }

	    }
	 	DebugLocation(661, 4);
		} finally { DebugExitRule(GrammarFileName, "normalInterfaceDeclaration"); }
		return;

	}
	// $ANTLR end "normalInterfaceDeclaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_typeList() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_typeList() {}
	// $ANTLR start "typeList"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:663:1: typeList : type ( ',' type )* ;
	[GrammarRule("typeList")]
	private ParserRuleReturnScope<IToken> typeList()
	{
		EnterRule_typeList();
		EnterRule("typeList", 21);
		TraceIn("typeList", 21);
	    ParserRuleReturnScope<IToken> retval = new ParserRuleReturnScope<IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int typeList_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "typeList");
		DebugLocation(663, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return retval; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:664:5: ( type ( ',' type )* )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:664:9: type ( ',' type )*
			{
			DebugLocation(664, 9);
			PushFollow(Follow._type_in_typeList1560);
			type();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(664, 14);
			if (state.backtracking == 0)
			{
				Console.Write(input.ToString(retval.Start,input.LT(-1)));
			}
			DebugLocation(665, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:665:9: ( ',' type )*
			try { DebugEnterSubRule(34);
			while (true)
			{
				int alt34=2;
				try { DebugEnterDecision(34, decisionCanBacktrack[34]);
				int LA34_1 = input.LA(1);

				if ((LA34_1==COMMA))
				{
					alt34 = 1;
				}


				} finally { DebugExitDecision(34); }
				switch ( alt34 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:665:10: ',' type
					{
					DebugLocation(665, 10);
					Match(input,COMMA,Follow._COMMA_in_typeList1573); if (state.failed) return retval;
					DebugLocation(665, 14);
					PushFollow(Follow._type_in_typeList1575);
					type();
					PopFollow();
					if (state.failed) return retval;
					DebugLocation(665, 19);
					if (state.backtracking == 0)
					{
						Console.Write(input.ToString(retval.Start,input.LT(-1)));
					}

					}
					break;

				default:
					goto loop34;
				}
			}

			loop34:
				;

			} finally { DebugExitSubRule(34); }


			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeList", 21);
			LeaveRule("typeList", 21);
			LeaveRule_typeList();
	        if (state.backtracking > 0) { Memoize(input, 21, typeList_StartIndex); }

	    }
	 	DebugLocation(667, 4);
		} finally { DebugExitRule(GrammarFileName, "typeList"); }
		return retval;

	}
	// $ANTLR end "typeList"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_classBody() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_classBody() {}
	// $ANTLR start "classBody"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:669:1: classBody : '{' ( classBodyDeclaration )* '}' ;
	[GrammarRule("classBody")]
	private void classBody()
	{
		EnterRule_classBody();
		EnterRule("classBody", 22);
		TraceIn("classBody", 22);
	    int classBody_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "classBody");
		DebugLocation(669, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:670:5: ( '{' ( classBodyDeclaration )* '}' )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:670:9: '{' ( classBodyDeclaration )* '}'
			{
			DebugLocation(670, 9);
			Match(input,LBRACE,Follow._LBRACE_in_classBody1608); if (state.failed) return;
			DebugLocation(671, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:671:9: ( classBodyDeclaration )*
			try { DebugEnterSubRule(35);
			while (true)
			{
				int alt35=2;
				try { DebugEnterDecision(35, decisionCanBacktrack[35]);
				int LA35_1 = input.LA(1);

				if ((LA35_1==ABSTRACT||LA35_1==BOOLEAN||LA35_1==BYTE||LA35_1==CHAR||LA35_1==CLASS||LA35_1==DOUBLE||LA35_1==ENUM||LA35_1==FINAL||LA35_1==FLOAT||LA35_1==IDENTIFIER||(LA35_1>=INT && LA35_1<=INTERFACE)||LA35_1==LBRACE||LA35_1==LONG||LA35_1==LT||(LA35_1>=MONKEYS_AT && LA35_1<=NATIVE)||(LA35_1>=PRIVATE && LA35_1<=PUBLIC)||(LA35_1>=SEMI && LA35_1<=SHORT)||(LA35_1>=STATIC && LA35_1<=STRICTFP)||LA35_1==SYNCHRONIZED||LA35_1==TRANSIENT||(LA35_1>=VOID && LA35_1<=VOLATILE)))
				{
					alt35 = 1;
				}


				} finally { DebugExitDecision(35); }
				switch ( alt35 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:671:10: classBodyDeclaration
					{
					DebugLocation(671, 10);
					PushFollow(Follow._classBodyDeclaration_in_classBody1620);
					classBodyDeclaration();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop35;
				}
			}

			loop35:
				;

			} finally { DebugExitSubRule(35); }

			DebugLocation(673, 9);
			Match(input,RBRACE,Follow._RBRACE_in_classBody1642); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("classBody", 22);
			LeaveRule("classBody", 22);
			LeaveRule_classBody();
	        if (state.backtracking > 0) { Memoize(input, 22, classBody_StartIndex); }

	    }
	 	DebugLocation(674, 4);
		} finally { DebugExitRule(GrammarFileName, "classBody"); }
		return;

	}
	// $ANTLR end "classBody"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_interfaceBody() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_interfaceBody() {}
	// $ANTLR start "interfaceBody"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:676:1: interfaceBody : '{' ( interfaceBodyDeclaration )* '}' ;
	[GrammarRule("interfaceBody")]
	private void interfaceBody()
	{
		EnterRule_interfaceBody();
		EnterRule("interfaceBody", 23);
		TraceIn("interfaceBody", 23);
	    int interfaceBody_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "interfaceBody");
		DebugLocation(676, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:677:5: ( '{' ( interfaceBodyDeclaration )* '}' )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:677:9: '{' ( interfaceBodyDeclaration )* '}'
			{
			DebugLocation(677, 9);
			Match(input,LBRACE,Follow._LBRACE_in_interfaceBody1662); if (state.failed) return;
			DebugLocation(678, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:678:9: ( interfaceBodyDeclaration )*
			try { DebugEnterSubRule(36);
			while (true)
			{
				int alt36=2;
				try { DebugEnterDecision(36, decisionCanBacktrack[36]);
				int LA36_1 = input.LA(1);

				if ((LA36_1==ABSTRACT||LA36_1==BOOLEAN||LA36_1==BYTE||LA36_1==CHAR||LA36_1==CLASS||LA36_1==DOUBLE||LA36_1==ENUM||LA36_1==FINAL||LA36_1==FLOAT||LA36_1==IDENTIFIER||(LA36_1>=INT && LA36_1<=INTERFACE)||LA36_1==LONG||LA36_1==LT||(LA36_1>=MONKEYS_AT && LA36_1<=NATIVE)||(LA36_1>=PRIVATE && LA36_1<=PUBLIC)||(LA36_1>=SEMI && LA36_1<=SHORT)||(LA36_1>=STATIC && LA36_1<=STRICTFP)||LA36_1==SYNCHRONIZED||LA36_1==TRANSIENT||(LA36_1>=VOID && LA36_1<=VOLATILE)))
				{
					alt36 = 1;
				}


				} finally { DebugExitDecision(36); }
				switch ( alt36 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:678:10: interfaceBodyDeclaration
					{
					DebugLocation(678, 10);
					PushFollow(Follow._interfaceBodyDeclaration_in_interfaceBody1674);
					interfaceBodyDeclaration();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop36;
				}
			}

			loop36:
				;

			} finally { DebugExitSubRule(36); }

			DebugLocation(680, 9);
			Match(input,RBRACE,Follow._RBRACE_in_interfaceBody1696); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("interfaceBody", 23);
			LeaveRule("interfaceBody", 23);
			LeaveRule_interfaceBody();
	        if (state.backtracking > 0) { Memoize(input, 23, interfaceBody_StartIndex); }

	    }
	 	DebugLocation(681, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceBody"); }
		return;

	}
	// $ANTLR end "interfaceBody"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_classBodyDeclaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_classBodyDeclaration() {}
	// $ANTLR start "classBodyDeclaration"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:683:1: classBodyDeclaration : ( ';' | ( 'static' )? block | memberDecl );
	[GrammarRule("classBodyDeclaration")]
	private void classBodyDeclaration()
	{
		EnterRule_classBodyDeclaration();
		EnterRule("classBodyDeclaration", 24);
		TraceIn("classBodyDeclaration", 24);
	    int classBodyDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "classBodyDeclaration");
		DebugLocation(683, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:684:5: ( ';' | ( 'static' )? block | memberDecl )
			int alt38=3;
			try { DebugEnterDecision(38, decisionCanBacktrack[38]);
			switch (input.LA(1))
			{
			case SEMI:
				{
				alt38 = 1;
				}
				break;
			case STATIC:
				{
				int LA38_2 = input.LA(2);

				if ((LA38_2==LBRACE))
				{
					alt38 = 2;
				}
				else if ((LA38_2==ABSTRACT||LA38_2==BOOLEAN||LA38_2==BYTE||LA38_2==CHAR||LA38_2==CLASS||LA38_2==DOUBLE||LA38_2==ENUM||LA38_2==FINAL||LA38_2==FLOAT||LA38_2==IDENTIFIER||(LA38_2>=INT && LA38_2<=INTERFACE)||LA38_2==LONG||LA38_2==LT||(LA38_2>=MONKEYS_AT && LA38_2<=NATIVE)||(LA38_2>=PRIVATE && LA38_2<=PUBLIC)||LA38_2==SHORT||(LA38_2>=STATIC && LA38_2<=STRICTFP)||LA38_2==SYNCHRONIZED||LA38_2==TRANSIENT||(LA38_2>=VOID && LA38_2<=VOLATILE)))
				{
					alt38 = 3;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 38, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case LBRACE:
				{
				alt38 = 2;
				}
				break;
			case ABSTRACT:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CLASS:
			case DOUBLE:
			case ENUM:
			case FINAL:
			case FLOAT:
			case IDENTIFIER:
			case INT:
			case INTERFACE:
			case LONG:
			case LT:
			case MONKEYS_AT:
			case NATIVE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case SHORT:
			case STRICTFP:
			case SYNCHRONIZED:
			case TRANSIENT:
			case VOID:
			case VOLATILE:
				{
				alt38 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 38, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:684:9: ';'
				{
				DebugLocation(684, 9);
				Match(input,SEMI,Follow._SEMI_in_classBodyDeclaration1716); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:685:9: ( 'static' )? block
				{
				DebugLocation(685, 9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:685:9: ( 'static' )?
				int alt37=2;
				try { DebugEnterSubRule(37);
				try { DebugEnterDecision(37, decisionCanBacktrack[37]);
				int LA37_1 = input.LA(1);

				if ((LA37_1==STATIC))
				{
					alt37 = 1;
				}
				} finally { DebugExitDecision(37); }
				switch (alt37)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:685:10: 'static'
					{
					DebugLocation(685, 10);
					Match(input,STATIC,Follow._STATIC_in_classBodyDeclaration1727); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(37); }

				DebugLocation(687, 9);
				PushFollow(Follow._block_in_classBodyDeclaration1749);
				block();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:688:9: memberDecl
				{
				DebugLocation(688, 9);
				PushFollow(Follow._memberDecl_in_classBodyDeclaration1759);
				memberDecl();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("classBodyDeclaration", 24);
			LeaveRule("classBodyDeclaration", 24);
			LeaveRule_classBodyDeclaration();
	        if (state.backtracking > 0) { Memoize(input, 24, classBodyDeclaration_StartIndex); }

	    }
	 	DebugLocation(689, 4);
		} finally { DebugExitRule(GrammarFileName, "classBodyDeclaration"); }
		return;

	}
	// $ANTLR end "classBodyDeclaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_memberDecl() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_memberDecl() {}
	// $ANTLR start "memberDecl"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:691:1: memberDecl : ( fieldDeclaration | methodDeclaration | classDeclaration | interfaceDeclaration );
	[GrammarRule("memberDecl")]
	private void memberDecl()
	{
		EnterRule_memberDecl();
		EnterRule("memberDecl", 25);
		TraceIn("memberDecl", 25);
	    int memberDecl_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "memberDecl");
		DebugLocation(691, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:692:5: ( fieldDeclaration | methodDeclaration | classDeclaration | interfaceDeclaration )
			int alt39=4;
			try { DebugEnterDecision(39, decisionCanBacktrack[39]);
			switch (input.LA(1))
			{
			case MONKEYS_AT:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}

				}
				break;
			case PUBLIC:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}

				}
				break;
			case PROTECTED:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}

				}
				break;
			case PRIVATE:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}

				}
				break;
			case STATIC:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}

				}
				break;
			case ABSTRACT:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}

				}
				break;
			case FINAL:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}

				}
				break;
			case NATIVE:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}

				}
				break;
			case SYNCHRONIZED:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}

				}
				break;
			case TRANSIENT:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}

				}
				break;
			case VOLATILE:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}

				}
				break;
			case STRICTFP:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}

				}
				break;
			case IDENTIFIER:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 39, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case BOOLEAN:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 39, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case CHAR:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 39, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case BYTE:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 39, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case SHORT:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 39, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case INT:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 39, 18, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case LONG:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 39, 19, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case FLOAT:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 39, 20, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case DOUBLE:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 39, 21, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case LT:
			case VOID:
				{
				alt39 = 2;
				}
				break;
			case CLASS:
			case ENUM:
				{
				alt39 = 3;
				}
				break;
			case INTERFACE:
				{
				alt39 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 39, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:692:10: fieldDeclaration
				{
				DebugLocation(692, 10);
				PushFollow(Follow._fieldDeclaration_in_memberDecl1780);
				fieldDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:693:10: methodDeclaration
				{
				DebugLocation(693, 10);
				PushFollow(Follow._methodDeclaration_in_memberDecl1791);
				methodDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:694:10: classDeclaration
				{
				DebugLocation(694, 10);
				PushFollow(Follow._classDeclaration_in_memberDecl1802);
				classDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:695:10: interfaceDeclaration
				{
				DebugLocation(695, 10);
				PushFollow(Follow._interfaceDeclaration_in_memberDecl1813);
				interfaceDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("memberDecl", 25);
			LeaveRule("memberDecl", 25);
			LeaveRule_memberDecl();
	        if (state.backtracking > 0) { Memoize(input, 25, memberDecl_StartIndex); }

	    }
	 	DebugLocation(696, 4);
		} finally { DebugExitRule(GrammarFileName, "memberDecl"); }
		return;

	}
	// $ANTLR end "memberDecl"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_methodDeclaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_methodDeclaration() {}
	// $ANTLR start "methodDeclaration"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:699:1: methodDeclaration : ( modifiers ( typeParameters )? IDENTIFIER formalParameters ( 'throws' qualifiedNameList )? '{' ( explicitConstructorInvocation )? ( blockStatement )* '}' | modifiers ( typeParameters )? ( type | 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ( block | ';' ) );
	[GrammarRule("methodDeclaration")]
	private ParserRuleReturnScope<IToken> methodDeclaration()
	{
		EnterRule_methodDeclaration();
		EnterRule("methodDeclaration", 26);
		TraceIn("methodDeclaration", 26);
	    ParserRuleReturnScope<IToken> retval = new ParserRuleReturnScope<IToken>();
	    retval.Start = (IToken)input.LT(1);
	    int methodDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "methodDeclaration");
		DebugLocation(699, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return retval; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:700:5: ( modifiers ( typeParameters )? IDENTIFIER formalParameters ( 'throws' qualifiedNameList )? '{' ( explicitConstructorInvocation )? ( blockStatement )* '}' | modifiers ( typeParameters )? ( type | 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ( block | ';' ) )
			int alt49=2;
			try { DebugEnterDecision(49, decisionCanBacktrack[49]);
			switch (input.LA(1))
			{
			case MONKEYS_AT:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}

				}
				break;
			case PUBLIC:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}

				}
				break;
			case PROTECTED:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}

				}
				break;
			case PRIVATE:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}

				}
				break;
			case STATIC:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}

				}
				break;
			case ABSTRACT:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}

				}
				break;
			case FINAL:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}

				}
				break;
			case NATIVE:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}

				}
				break;
			case SYNCHRONIZED:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}

				}
				break;
			case TRANSIENT:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}

				}
				break;
			case VOLATILE:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}

				}
				break;
			case STRICTFP:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}

				}
				break;
			case LT:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}

				}
				break;
			case IDENTIFIER:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}

				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case VOID:
				{
				alt49 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:702:10: modifiers ( typeParameters )? IDENTIFIER formalParameters ( 'throws' qualifiedNameList )? '{' ( explicitConstructorInvocation )? ( blockStatement )* '}'
				{
				DebugLocation(702, 10);
				PushFollow(Follow._modifiers_in_methodDeclaration1851);
				modifiers();
				PopFollow();
				if (state.failed) return retval;
				DebugLocation(703, 9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:703:9: ( typeParameters )?
				int alt40=2;
				try { DebugEnterSubRule(40);
				try { DebugEnterDecision(40, decisionCanBacktrack[40]);
				int LA40_1 = input.LA(1);

				if ((LA40_1==LT))
				{
					alt40 = 1;
				}
				} finally { DebugExitDecision(40); }
				switch (alt40)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:703:10: typeParameters
					{
					DebugLocation(703, 10);
					PushFollow(Follow._typeParameters_in_methodDeclaration1862);
					typeParameters();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				}
				} finally { DebugExitSubRule(40); }

				DebugLocation(705, 9);
				Match(input,IDENTIFIER,Follow._IDENTIFIER_in_methodDeclaration1883); if (state.failed) return retval;
				DebugLocation(705, 20);
				if (state.backtracking == 0)
				{
					Console.Write("Method:" + input.ToString(retval.Start,input.LT(-1)));
				}
				DebugLocation(706, 9);
				PushFollow(Follow._formalParameters_in_methodDeclaration1895);
				formalParameters();
				PopFollow();
				if (state.failed) return retval;
				DebugLocation(707, 9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:707:9: ( 'throws' qualifiedNameList )?
				int alt41=2;
				try { DebugEnterSubRule(41);
				try { DebugEnterDecision(41, decisionCanBacktrack[41]);
				int LA41_1 = input.LA(1);

				if ((LA41_1==THROWS))
				{
					alt41 = 1;
				}
				} finally { DebugExitDecision(41); }
				switch (alt41)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:707:10: 'throws' qualifiedNameList
					{
					DebugLocation(707, 10);
					Match(input,THROWS,Follow._THROWS_in_methodDeclaration1906); if (state.failed) return retval;
					DebugLocation(707, 19);
					PushFollow(Follow._qualifiedNameList_in_methodDeclaration1908);
					qualifiedNameList();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				}
				} finally { DebugExitSubRule(41); }

				DebugLocation(709, 9);
				Match(input,LBRACE,Follow._LBRACE_in_methodDeclaration1929); if (state.failed) return retval;
				DebugLocation(710, 9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:710:9: ( explicitConstructorInvocation )?
				int alt42=2;
				try { DebugEnterSubRule(42);
				try { DebugEnterDecision(42, decisionCanBacktrack[42]);
				switch (input.LA(1))
				{
				case LT:
					{
					alt42 = 1;
					}
					break;
				case THIS:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case LPAREN:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case SUPER:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case IDENTIFIER:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case CHARLITERAL:
				case DOUBLELITERAL:
				case FALSE:
				case FLOATLITERAL:
				case INTLITERAL:
				case LONGLITERAL:
				case NULL:
				case STRINGLITERAL:
				case TRUE:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case NEW:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case BOOLEAN:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case CHAR:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case BYTE:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case SHORT:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case INT:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case LONG:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case FLOAT:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case DOUBLE:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case VOID:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				}

				} finally { DebugExitDecision(42); }
				switch (alt42)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:710:10: explicitConstructorInvocation
					{
					DebugLocation(710, 10);
					PushFollow(Follow._explicitConstructorInvocation_in_methodDeclaration1941);
					explicitConstructorInvocation();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				}
				} finally { DebugExitSubRule(42); }

				DebugLocation(712, 9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:712:9: ( blockStatement )*
				try { DebugEnterSubRule(43);
				while (true)
				{
					int alt43=2;
					try { DebugEnterDecision(43, decisionCanBacktrack[43]);
					int LA43_1 = input.LA(1);

					if ((LA43_1==ABSTRACT||(LA43_1>=ASSERT && LA43_1<=BANG)||(LA43_1>=BOOLEAN && LA43_1<=BYTE)||(LA43_1>=CHAR && LA43_1<=CLASS)||LA43_1==CONTINUE||LA43_1==DO||(LA43_1>=DOUBLE && LA43_1<=DOUBLELITERAL)||LA43_1==ENUM||(LA43_1>=FALSE && LA43_1<=FINAL)||(LA43_1>=FLOAT && LA43_1<=FOR)||(LA43_1>=IDENTIFIER && LA43_1<=IF)||(LA43_1>=INT && LA43_1<=INTLITERAL)||LA43_1==LBRACE||(LA43_1>=LONG && LA43_1<=LT)||(LA43_1>=MONKEYS_AT && LA43_1<=NULL)||LA43_1==PLUS||(LA43_1>=PLUSPLUS && LA43_1<=PUBLIC)||LA43_1==RETURN||(LA43_1>=SEMI && LA43_1<=SHORT)||(LA43_1>=STATIC && LA43_1<=SUB)||(LA43_1>=SUBSUB && LA43_1<=SYNCHRONIZED)||(LA43_1>=THIS && LA43_1<=THROW)||(LA43_1>=TILDE && LA43_1<=WHILE)))
					{
						alt43 = 1;
					}


					} finally { DebugExitDecision(43); }
					switch ( alt43 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:712:10: blockStatement
						{
						DebugLocation(712, 10);
						PushFollow(Follow._blockStatement_in_methodDeclaration1963);
						blockStatement();
						PopFollow();
						if (state.failed) return retval;

						}
						break;

					default:
						goto loop43;
					}
				}

				loop43:
					;

				} finally { DebugExitSubRule(43); }

				DebugLocation(714, 9);
				Match(input,RBRACE,Follow._RBRACE_in_methodDeclaration1984); if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:715:13: modifiers ( typeParameters )? ( type | 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ( block | ';' )
				{
				DebugLocation(715, 13);
				PushFollow(Follow._modifiers_in_methodDeclaration1999);
				modifiers();
				PopFollow();
				if (state.failed) return retval;
				DebugLocation(716, 9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:716:9: ( typeParameters )?
				int alt44=2;
				try { DebugEnterSubRule(44);
				try { DebugEnterDecision(44, decisionCanBacktrack[44]);
				int LA44_1 = input.LA(1);

				if ((LA44_1==LT))
				{
					alt44 = 1;
				}
				} finally { DebugExitDecision(44); }
				switch (alt44)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:716:10: typeParameters
					{
					DebugLocation(716, 10);
					PushFollow(Follow._typeParameters_in_methodDeclaration2010);
					typeParameters();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				}
				} finally { DebugExitSubRule(44); }

				DebugLocation(718, 9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:718:9: ( type | 'void' )
				int alt45=2;
				try { DebugEnterSubRule(45);
				try { DebugEnterDecision(45, decisionCanBacktrack[45]);
				int LA45_1 = input.LA(1);

				if ((LA45_1==BOOLEAN||LA45_1==BYTE||LA45_1==CHAR||LA45_1==DOUBLE||LA45_1==FLOAT||LA45_1==IDENTIFIER||LA45_1==INT||LA45_1==LONG||LA45_1==SHORT))
				{
					alt45 = 1;
				}
				else if ((LA45_1==VOID))
				{
					alt45 = 2;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				} finally { DebugExitDecision(45); }
				switch (alt45)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:718:10: type
					{
					DebugLocation(718, 10);
					PushFollow(Follow._type_in_methodDeclaration2032);
					type();
					PopFollow();
					if (state.failed) return retval;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:719:13: 'void'
					{
					DebugLocation(719, 13);
					Match(input,VOID,Follow._VOID_in_methodDeclaration2046); if (state.failed) return retval;

					}
					break;

				}
				} finally { DebugExitSubRule(45); }

				DebugLocation(721, 9);
				Match(input,IDENTIFIER,Follow._IDENTIFIER_in_methodDeclaration2066); if (state.failed) return retval;
				DebugLocation(722, 9);
				PushFollow(Follow._formalParameters_in_methodDeclaration2076);
				formalParameters();
				PopFollow();
				if (state.failed) return retval;
				DebugLocation(723, 9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:723:9: ( '[' ']' )*
				try { DebugEnterSubRule(46);
				while (true)
				{
					int alt46=2;
					try { DebugEnterDecision(46, decisionCanBacktrack[46]);
					int LA46_1 = input.LA(1);

					if ((LA46_1==LBRACKET))
					{
						alt46 = 1;
					}


					} finally { DebugExitDecision(46); }
					switch ( alt46 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:723:10: '[' ']'
						{
						DebugLocation(723, 10);
						Match(input,LBRACKET,Follow._LBRACKET_in_methodDeclaration2087); if (state.failed) return retval;
						DebugLocation(723, 14);
						Match(input,RBRACKET,Follow._RBRACKET_in_methodDeclaration2089); if (state.failed) return retval;

						}
						break;

					default:
						goto loop46;
					}
				}

				loop46:
					;

				} finally { DebugExitSubRule(46); }

				DebugLocation(725, 9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:725:9: ( 'throws' qualifiedNameList )?
				int alt47=2;
				try { DebugEnterSubRule(47);
				try { DebugEnterDecision(47, decisionCanBacktrack[47]);
				int LA47_1 = input.LA(1);

				if ((LA47_1==THROWS))
				{
					alt47 = 1;
				}
				} finally { DebugExitDecision(47); }
				switch (alt47)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:725:10: 'throws' qualifiedNameList
					{
					DebugLocation(725, 10);
					Match(input,THROWS,Follow._THROWS_in_methodDeclaration2111); if (state.failed) return retval;
					DebugLocation(725, 19);
					PushFollow(Follow._qualifiedNameList_in_methodDeclaration2113);
					qualifiedNameList();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				}
				} finally { DebugExitSubRule(47); }

				DebugLocation(727, 9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:727:9: ( block | ';' )
				int alt48=2;
				try { DebugEnterSubRule(48);
				try { DebugEnterDecision(48, decisionCanBacktrack[48]);
				int LA48_1 = input.LA(1);

				if ((LA48_1==LBRACE))
				{
					alt48 = 1;
				}
				else if ((LA48_1==SEMI))
				{
					alt48 = 2;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 48, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				} finally { DebugExitDecision(48); }
				switch (alt48)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:728:13: block
					{
					DebugLocation(728, 13);
					PushFollow(Follow._block_in_methodDeclaration2168);
					block();
					PopFollow();
					if (state.failed) return retval;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:729:13: ';'
					{
					DebugLocation(729, 13);
					Match(input,SEMI,Follow._SEMI_in_methodDeclaration2182); if (state.failed) return retval;

					}
					break;

				}
				} finally { DebugExitSubRule(48); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("methodDeclaration", 26);
			LeaveRule("methodDeclaration", 26);
			LeaveRule_methodDeclaration();
	        if (state.backtracking > 0) { Memoize(input, 26, methodDeclaration_StartIndex); }

	    }
	 	DebugLocation(731, 4);
		} finally { DebugExitRule(GrammarFileName, "methodDeclaration"); }
		return retval;

	}
	// $ANTLR end "methodDeclaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_fieldDeclaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_fieldDeclaration() {}
	// $ANTLR start "fieldDeclaration"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:734:1: fieldDeclaration : modifiers type variableDeclarator ( ',' variableDeclarator )* ';' ;
	[GrammarRule("fieldDeclaration")]
	private void fieldDeclaration()
	{
		EnterRule_fieldDeclaration();
		EnterRule("fieldDeclaration", 27);
		TraceIn("fieldDeclaration", 27);
	    int fieldDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "fieldDeclaration");
		DebugLocation(734, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:735:5: ( modifiers type variableDeclarator ( ',' variableDeclarator )* ';' )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:735:9: modifiers type variableDeclarator ( ',' variableDeclarator )* ';'
			{
			DebugLocation(735, 9);
			PushFollow(Follow._modifiers_in_fieldDeclaration2214);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(736, 9);
			PushFollow(Follow._type_in_fieldDeclaration2224);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(737, 9);
			PushFollow(Follow._variableDeclarator_in_fieldDeclaration2234);
			variableDeclarator();
			PopFollow();
			if (state.failed) return;
			DebugLocation(738, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:738:9: ( ',' variableDeclarator )*
			try { DebugEnterSubRule(50);
			while (true)
			{
				int alt50=2;
				try { DebugEnterDecision(50, decisionCanBacktrack[50]);
				int LA50_1 = input.LA(1);

				if ((LA50_1==COMMA))
				{
					alt50 = 1;
				}


				} finally { DebugExitDecision(50); }
				switch ( alt50 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:738:10: ',' variableDeclarator
					{
					DebugLocation(738, 10);
					Match(input,COMMA,Follow._COMMA_in_fieldDeclaration2245); if (state.failed) return;
					DebugLocation(738, 14);
					PushFollow(Follow._variableDeclarator_in_fieldDeclaration2247);
					variableDeclarator();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop50;
				}
			}

			loop50:
				;

			} finally { DebugExitSubRule(50); }

			DebugLocation(740, 9);
			Match(input,SEMI,Follow._SEMI_in_fieldDeclaration2268); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("fieldDeclaration", 27);
			LeaveRule("fieldDeclaration", 27);
			LeaveRule_fieldDeclaration();
	        if (state.backtracking > 0) { Memoize(input, 27, fieldDeclaration_StartIndex); }

	    }
	 	DebugLocation(741, 4);
		} finally { DebugExitRule(GrammarFileName, "fieldDeclaration"); }
		return;

	}
	// $ANTLR end "fieldDeclaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_variableDeclarator() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_variableDeclarator() {}
	// $ANTLR start "variableDeclarator"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:743:1: variableDeclarator : IDENTIFIER ( '[' ']' )* ( '=' variableInitializer )? ;
	[GrammarRule("variableDeclarator")]
	private void variableDeclarator()
	{
		EnterRule_variableDeclarator();
		EnterRule("variableDeclarator", 28);
		TraceIn("variableDeclarator", 28);
	    int variableDeclarator_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "variableDeclarator");
		DebugLocation(743, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:744:5: ( IDENTIFIER ( '[' ']' )* ( '=' variableInitializer )? )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:744:9: IDENTIFIER ( '[' ']' )* ( '=' variableInitializer )?
			{
			DebugLocation(744, 9);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_variableDeclarator2288); if (state.failed) return;
			DebugLocation(745, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:745:9: ( '[' ']' )*
			try { DebugEnterSubRule(51);
			while (true)
			{
				int alt51=2;
				try { DebugEnterDecision(51, decisionCanBacktrack[51]);
				int LA51_1 = input.LA(1);

				if ((LA51_1==LBRACKET))
				{
					alt51 = 1;
				}


				} finally { DebugExitDecision(51); }
				switch ( alt51 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:745:10: '[' ']'
					{
					DebugLocation(745, 10);
					Match(input,LBRACKET,Follow._LBRACKET_in_variableDeclarator2299); if (state.failed) return;
					DebugLocation(745, 14);
					Match(input,RBRACKET,Follow._RBRACKET_in_variableDeclarator2301); if (state.failed) return;

					}
					break;

				default:
					goto loop51;
				}
			}

			loop51:
				;

			} finally { DebugExitSubRule(51); }

			DebugLocation(747, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:747:9: ( '=' variableInitializer )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, decisionCanBacktrack[52]);
			int LA52_1 = input.LA(1);

			if ((LA52_1==EQ))
			{
				alt52 = 1;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:747:10: '=' variableInitializer
				{
				DebugLocation(747, 10);
				Match(input,EQ,Follow._EQ_in_variableDeclarator2323); if (state.failed) return;
				DebugLocation(747, 14);
				PushFollow(Follow._variableInitializer_in_variableDeclarator2325);
				variableInitializer();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(52); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableDeclarator", 28);
			LeaveRule("variableDeclarator", 28);
			LeaveRule_variableDeclarator();
	        if (state.backtracking > 0) { Memoize(input, 28, variableDeclarator_StartIndex); }

	    }
	 	DebugLocation(749, 4);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarator"); }
		return;

	}
	// $ANTLR end "variableDeclarator"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_interfaceBodyDeclaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_interfaceBodyDeclaration() {}
	// $ANTLR start "interfaceBodyDeclaration"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:754:1: interfaceBodyDeclaration : ( interfaceFieldDeclaration | interfaceMethodDeclaration | interfaceDeclaration | classDeclaration | ';' );
	[GrammarRule("interfaceBodyDeclaration")]
	private void interfaceBodyDeclaration()
	{
		EnterRule_interfaceBodyDeclaration();
		EnterRule("interfaceBodyDeclaration", 29);
		TraceIn("interfaceBodyDeclaration", 29);
	    int interfaceBodyDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "interfaceBodyDeclaration");
		DebugLocation(754, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:755:5: ( interfaceFieldDeclaration | interfaceMethodDeclaration | interfaceDeclaration | classDeclaration | ';' )
			int alt53=5;
			try { DebugEnterDecision(53, decisionCanBacktrack[53]);
			switch (input.LA(1))
			{
			case MONKEYS_AT:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 53, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case PUBLIC:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 53, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case PROTECTED:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 53, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case PRIVATE:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 53, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case STATIC:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 53, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case ABSTRACT:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 53, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case FINAL:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 53, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case NATIVE:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 53, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case SYNCHRONIZED:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 53, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case TRANSIENT:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 53, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case VOLATILE:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 53, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case STRICTFP:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 53, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case IDENTIFIER:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 53, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case BOOLEAN:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 53, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case CHAR:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 53, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case BYTE:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 53, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case SHORT:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 53, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case INT:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 53, 18, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case LONG:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 53, 19, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case FLOAT:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 53, 20, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case DOUBLE:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 53, 21, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case LT:
			case VOID:
				{
				alt53 = 2;
				}
				break;
			case INTERFACE:
				{
				alt53 = 3;
				}
				break;
			case CLASS:
			case ENUM:
				{
				alt53 = 4;
				}
				break;
			case SEMI:
				{
				alt53 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 53, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:756:9: interfaceFieldDeclaration
				{
				DebugLocation(756, 9);
				PushFollow(Follow._interfaceFieldDeclaration_in_interfaceBodyDeclaration2364);
				interfaceFieldDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:757:9: interfaceMethodDeclaration
				{
				DebugLocation(757, 9);
				PushFollow(Follow._interfaceMethodDeclaration_in_interfaceBodyDeclaration2374);
				interfaceMethodDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:758:9: interfaceDeclaration
				{
				DebugLocation(758, 9);
				PushFollow(Follow._interfaceDeclaration_in_interfaceBodyDeclaration2384);
				interfaceDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:759:9: classDeclaration
				{
				DebugLocation(759, 9);
				PushFollow(Follow._classDeclaration_in_interfaceBodyDeclaration2394);
				classDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:760:9: ';'
				{
				DebugLocation(760, 9);
				Match(input,SEMI,Follow._SEMI_in_interfaceBodyDeclaration2404); if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("interfaceBodyDeclaration", 29);
			LeaveRule("interfaceBodyDeclaration", 29);
			LeaveRule_interfaceBodyDeclaration();
	        if (state.backtracking > 0) { Memoize(input, 29, interfaceBodyDeclaration_StartIndex); }

	    }
	 	DebugLocation(761, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceBodyDeclaration"); }
		return;

	}
	// $ANTLR end "interfaceBodyDeclaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_interfaceMethodDeclaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_interfaceMethodDeclaration() {}
	// $ANTLR start "interfaceMethodDeclaration"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:763:1: interfaceMethodDeclaration : modifiers ( typeParameters )? ( type | 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ';' ;
	[GrammarRule("interfaceMethodDeclaration")]
	private void interfaceMethodDeclaration()
	{
		EnterRule_interfaceMethodDeclaration();
		EnterRule("interfaceMethodDeclaration", 30);
		TraceIn("interfaceMethodDeclaration", 30);
	    int interfaceMethodDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "interfaceMethodDeclaration");
		DebugLocation(763, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:764:5: ( modifiers ( typeParameters )? ( type | 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ';' )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:764:9: modifiers ( typeParameters )? ( type | 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ';'
			{
			DebugLocation(764, 9);
			PushFollow(Follow._modifiers_in_interfaceMethodDeclaration2424);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(765, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:765:9: ( typeParameters )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, decisionCanBacktrack[54]);
			int LA54_1 = input.LA(1);

			if ((LA54_1==LT))
			{
				alt54 = 1;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:765:10: typeParameters
				{
				DebugLocation(765, 10);
				PushFollow(Follow._typeParameters_in_interfaceMethodDeclaration2435);
				typeParameters();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(54); }

			DebugLocation(767, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:767:9: ( type | 'void' )
			int alt55=2;
			try { DebugEnterSubRule(55);
			try { DebugEnterDecision(55, decisionCanBacktrack[55]);
			int LA55_1 = input.LA(1);

			if ((LA55_1==BOOLEAN||LA55_1==BYTE||LA55_1==CHAR||LA55_1==DOUBLE||LA55_1==FLOAT||LA55_1==IDENTIFIER||LA55_1==INT||LA55_1==LONG||LA55_1==SHORT))
			{
				alt55 = 1;
			}
			else if ((LA55_1==VOID))
			{
				alt55 = 2;
			}

			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 55, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}

			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:767:10: type
				{
				DebugLocation(767, 10);
				PushFollow(Follow._type_in_interfaceMethodDeclaration2457);
				type();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:768:10: 'void'
				{
				DebugLocation(768, 10);
				Match(input,VOID,Follow._VOID_in_interfaceMethodDeclaration2468); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(55); }

			DebugLocation(770, 9);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_interfaceMethodDeclaration2488); if (state.failed) return;
			DebugLocation(771, 9);
			PushFollow(Follow._formalParameters_in_interfaceMethodDeclaration2498);
			formalParameters();
			PopFollow();
			if (state.failed) return;
			DebugLocation(772, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:772:9: ( '[' ']' )*
			try { DebugEnterSubRule(56);
			while (true)
			{
				int alt56=2;
				try { DebugEnterDecision(56, decisionCanBacktrack[56]);
				int LA56_1 = input.LA(1);

				if ((LA56_1==LBRACKET))
				{
					alt56 = 1;
				}


				} finally { DebugExitDecision(56); }
				switch ( alt56 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:772:10: '[' ']'
					{
					DebugLocation(772, 10);
					Match(input,LBRACKET,Follow._LBRACKET_in_interfaceMethodDeclaration2509); if (state.failed) return;
					DebugLocation(772, 14);
					Match(input,RBRACKET,Follow._RBRACKET_in_interfaceMethodDeclaration2511); if (state.failed) return;

					}
					break;

				default:
					goto loop56;
				}
			}

			loop56:
				;

			} finally { DebugExitSubRule(56); }

			DebugLocation(774, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:774:9: ( 'throws' qualifiedNameList )?
			int alt57=2;
			try { DebugEnterSubRule(57);
			try { DebugEnterDecision(57, decisionCanBacktrack[57]);
			int LA57_1 = input.LA(1);

			if ((LA57_1==THROWS))
			{
				alt57 = 1;
			}
			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:774:10: 'throws' qualifiedNameList
				{
				DebugLocation(774, 10);
				Match(input,THROWS,Follow._THROWS_in_interfaceMethodDeclaration2533); if (state.failed) return;
				DebugLocation(774, 19);
				PushFollow(Follow._qualifiedNameList_in_interfaceMethodDeclaration2535);
				qualifiedNameList();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(57); }

			DebugLocation(775, 12);
			Match(input,SEMI,Follow._SEMI_in_interfaceMethodDeclaration2548); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("interfaceMethodDeclaration", 30);
			LeaveRule("interfaceMethodDeclaration", 30);
			LeaveRule_interfaceMethodDeclaration();
	        if (state.backtracking > 0) { Memoize(input, 30, interfaceMethodDeclaration_StartIndex); }

	    }
	 	DebugLocation(776, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceMethodDeclaration"); }
		return;

	}
	// $ANTLR end "interfaceMethodDeclaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_interfaceFieldDeclaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_interfaceFieldDeclaration() {}
	// $ANTLR start "interfaceFieldDeclaration"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:783:1: interfaceFieldDeclaration : modifiers type variableDeclarator ( ',' variableDeclarator )* ';' ;
	[GrammarRule("interfaceFieldDeclaration")]
	private void interfaceFieldDeclaration()
	{
		EnterRule_interfaceFieldDeclaration();
		EnterRule("interfaceFieldDeclaration", 31);
		TraceIn("interfaceFieldDeclaration", 31);
	    int interfaceFieldDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "interfaceFieldDeclaration");
		DebugLocation(783, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:784:5: ( modifiers type variableDeclarator ( ',' variableDeclarator )* ';' )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:784:9: modifiers type variableDeclarator ( ',' variableDeclarator )* ';'
			{
			DebugLocation(784, 9);
			PushFollow(Follow._modifiers_in_interfaceFieldDeclaration2570);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(784, 19);
			PushFollow(Follow._type_in_interfaceFieldDeclaration2572);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(784, 24);
			PushFollow(Follow._variableDeclarator_in_interfaceFieldDeclaration2574);
			variableDeclarator();
			PopFollow();
			if (state.failed) return;
			DebugLocation(785, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:785:9: ( ',' variableDeclarator )*
			try { DebugEnterSubRule(58);
			while (true)
			{
				int alt58=2;
				try { DebugEnterDecision(58, decisionCanBacktrack[58]);
				int LA58_1 = input.LA(1);

				if ((LA58_1==COMMA))
				{
					alt58 = 1;
				}


				} finally { DebugExitDecision(58); }
				switch ( alt58 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:785:10: ',' variableDeclarator
					{
					DebugLocation(785, 10);
					Match(input,COMMA,Follow._COMMA_in_interfaceFieldDeclaration2585); if (state.failed) return;
					DebugLocation(785, 14);
					PushFollow(Follow._variableDeclarator_in_interfaceFieldDeclaration2587);
					variableDeclarator();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop58;
				}
			}

			loop58:
				;

			} finally { DebugExitSubRule(58); }

			DebugLocation(787, 9);
			Match(input,SEMI,Follow._SEMI_in_interfaceFieldDeclaration2608); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("interfaceFieldDeclaration", 31);
			LeaveRule("interfaceFieldDeclaration", 31);
			LeaveRule_interfaceFieldDeclaration();
	        if (state.backtracking > 0) { Memoize(input, 31, interfaceFieldDeclaration_StartIndex); }

	    }
	 	DebugLocation(788, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceFieldDeclaration"); }
		return;

	}
	// $ANTLR end "interfaceFieldDeclaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_type() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_type() {}
	// $ANTLR start "type"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:791:1: type : ( classOrInterfaceType ( '[' ']' )* | primitiveType ( '[' ']' )* );
	[GrammarRule("type")]
	private void type()
	{
		EnterRule_type();
		EnterRule("type", 32);
		TraceIn("type", 32);
	    int type_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "type");
		DebugLocation(791, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:792:5: ( classOrInterfaceType ( '[' ']' )* | primitiveType ( '[' ']' )* )
			int alt61=2;
			try { DebugEnterDecision(61, decisionCanBacktrack[61]);
			int LA61_1 = input.LA(1);

			if ((LA61_1==IDENTIFIER))
			{
				alt61 = 1;
			}
			else if ((LA61_1==BOOLEAN||LA61_1==BYTE||LA61_1==CHAR||LA61_1==DOUBLE||LA61_1==FLOAT||LA61_1==INT||LA61_1==LONG||LA61_1==SHORT))
			{
				alt61 = 2;
			}

			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 61, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}

			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:792:9: classOrInterfaceType ( '[' ']' )*
				{
				DebugLocation(792, 9);
				PushFollow(Follow._classOrInterfaceType_in_type2629);
				classOrInterfaceType();
				PopFollow();
				if (state.failed) return;
				DebugLocation(793, 9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:793:9: ( '[' ']' )*
				try { DebugEnterSubRule(59);
				while (true)
				{
					int alt59=2;
					try { DebugEnterDecision(59, decisionCanBacktrack[59]);
					int LA59_1 = input.LA(1);

					if ((LA59_1==LBRACKET))
					{
						alt59 = 1;
					}


					} finally { DebugExitDecision(59); }
					switch ( alt59 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:793:10: '[' ']'
						{
						DebugLocation(793, 10);
						Match(input,LBRACKET,Follow._LBRACKET_in_type2640); if (state.failed) return;
						DebugLocation(793, 14);
						Match(input,RBRACKET,Follow._RBRACKET_in_type2642); if (state.failed) return;

						}
						break;

					default:
						goto loop59;
					}
				}

				loop59:
					;

				} finally { DebugExitSubRule(59); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:795:9: primitiveType ( '[' ']' )*
				{
				DebugLocation(795, 9);
				PushFollow(Follow._primitiveType_in_type2663);
				primitiveType();
				PopFollow();
				if (state.failed) return;
				DebugLocation(796, 9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:796:9: ( '[' ']' )*
				try { DebugEnterSubRule(60);
				while (true)
				{
					int alt60=2;
					try { DebugEnterDecision(60, decisionCanBacktrack[60]);
					int LA60_1 = input.LA(1);

					if ((LA60_1==LBRACKET))
					{
						alt60 = 1;
					}


					} finally { DebugExitDecision(60); }
					switch ( alt60 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:796:10: '[' ']'
						{
						DebugLocation(796, 10);
						Match(input,LBRACKET,Follow._LBRACKET_in_type2674); if (state.failed) return;
						DebugLocation(796, 14);
						Match(input,RBRACKET,Follow._RBRACKET_in_type2676); if (state.failed) return;

						}
						break;

					default:
						goto loop60;
					}
				}

				loop60:
					;

				} finally { DebugExitSubRule(60); }


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type", 32);
			LeaveRule("type", 32);
			LeaveRule_type();
	        if (state.backtracking > 0) { Memoize(input, 32, type_StartIndex); }

	    }
	 	DebugLocation(798, 4);
		} finally { DebugExitRule(GrammarFileName, "type"); }
		return;

	}
	// $ANTLR end "type"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_classOrInterfaceType() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_classOrInterfaceType() {}
	// $ANTLR start "classOrInterfaceType"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:801:1: classOrInterfaceType : IDENTIFIER ( typeArguments )? ( '.' IDENTIFIER ( typeArguments )? )* ;
	[GrammarRule("classOrInterfaceType")]
	private void classOrInterfaceType()
	{
		EnterRule_classOrInterfaceType();
		EnterRule("classOrInterfaceType", 33);
		TraceIn("classOrInterfaceType", 33);
	    int classOrInterfaceType_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "classOrInterfaceType");
		DebugLocation(801, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:802:5: ( IDENTIFIER ( typeArguments )? ( '.' IDENTIFIER ( typeArguments )? )* )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:802:9: IDENTIFIER ( typeArguments )? ( '.' IDENTIFIER ( typeArguments )? )*
			{
			DebugLocation(802, 9);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_classOrInterfaceType2708); if (state.failed) return;
			DebugLocation(803, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:803:9: ( typeArguments )?
			int alt62=2;
			try { DebugEnterSubRule(62);
			try { DebugEnterDecision(62, decisionCanBacktrack[62]);
			int LA62_1 = input.LA(1);

			if ((LA62_1==LT))
			{
				int LA62_2 = input.LA(2);

				if ((LA62_2==BOOLEAN||LA62_2==BYTE||LA62_2==CHAR||LA62_2==DOUBLE||LA62_2==FLOAT||LA62_2==IDENTIFIER||LA62_2==INT||LA62_2==LONG||LA62_2==QUES||LA62_2==SHORT))
				{
					alt62 = 1;
				}
			}
			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:803:10: typeArguments
				{
				DebugLocation(803, 10);
				PushFollow(Follow._typeArguments_in_classOrInterfaceType2719);
				typeArguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(62); }

			DebugLocation(805, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:805:9: ( '.' IDENTIFIER ( typeArguments )? )*
			try { DebugEnterSubRule(64);
			while (true)
			{
				int alt64=2;
				try { DebugEnterDecision(64, decisionCanBacktrack[64]);
				int LA64_1 = input.LA(1);

				if ((LA64_1==DOT))
				{
					alt64 = 1;
				}


				} finally { DebugExitDecision(64); }
				switch ( alt64 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:805:10: '.' IDENTIFIER ( typeArguments )?
					{
					DebugLocation(805, 10);
					Match(input,DOT,Follow._DOT_in_classOrInterfaceType2741); if (state.failed) return;
					DebugLocation(805, 14);
					Match(input,IDENTIFIER,Follow._IDENTIFIER_in_classOrInterfaceType2743); if (state.failed) return;
					DebugLocation(806, 13);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:806:13: ( typeArguments )?
					int alt63=2;
					try { DebugEnterSubRule(63);
					try { DebugEnterDecision(63, decisionCanBacktrack[63]);
					int LA63_1 = input.LA(1);

					if ((LA63_1==LT))
					{
						int LA63_2 = input.LA(2);

						if ((LA63_2==BOOLEAN||LA63_2==BYTE||LA63_2==CHAR||LA63_2==DOUBLE||LA63_2==FLOAT||LA63_2==IDENTIFIER||LA63_2==INT||LA63_2==LONG||LA63_2==QUES||LA63_2==SHORT))
						{
							alt63 = 1;
						}
					}
					} finally { DebugExitDecision(63); }
					switch (alt63)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:806:14: typeArguments
						{
						DebugLocation(806, 14);
						PushFollow(Follow._typeArguments_in_classOrInterfaceType2758);
						typeArguments();
						PopFollow();
						if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(63); }


					}
					break;

				default:
					goto loop64;
				}
			}

			loop64:
				;

			} finally { DebugExitSubRule(64); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("classOrInterfaceType", 33);
			LeaveRule("classOrInterfaceType", 33);
			LeaveRule_classOrInterfaceType();
	        if (state.backtracking > 0) { Memoize(input, 33, classOrInterfaceType_StartIndex); }

	    }
	 	DebugLocation(809, 4);
		} finally { DebugExitRule(GrammarFileName, "classOrInterfaceType"); }
		return;

	}
	// $ANTLR end "classOrInterfaceType"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_primitiveType() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_primitiveType() {}
	// $ANTLR start "primitiveType"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:811:1: primitiveType : ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' );
	[GrammarRule("primitiveType")]
	private void primitiveType()
	{
		EnterRule_primitiveType();
		EnterRule("primitiveType", 34);
		TraceIn("primitiveType", 34);
	    int primitiveType_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "primitiveType");
		DebugLocation(811, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:812:5: ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' )
			int alt65=8;
			try { DebugEnterDecision(65, decisionCanBacktrack[65]);
			switch (input.LA(1))
			{
			case BOOLEAN:
				{
				alt65 = 1;
				}
				break;
			case CHAR:
				{
				alt65 = 2;
				}
				break;
			case BYTE:
				{
				alt65 = 3;
				}
				break;
			case SHORT:
				{
				alt65 = 4;
				}
				break;
			case INT:
				{
				alt65 = 5;
				}
				break;
			case LONG:
				{
				alt65 = 6;
				}
				break;
			case FLOAT:
				{
				alt65 = 7;
				}
				break;
			case DOUBLE:
				{
				alt65 = 8;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 65, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:812:9: 'boolean'
				{
				DebugLocation(812, 9);
				Match(input,BOOLEAN,Follow._BOOLEAN_in_primitiveType2805); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:813:9: 'char'
				{
				DebugLocation(813, 9);
				Match(input,CHAR,Follow._CHAR_in_primitiveType2815); if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:814:9: 'byte'
				{
				DebugLocation(814, 9);
				Match(input,BYTE,Follow._BYTE_in_primitiveType2825); if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:815:9: 'short'
				{
				DebugLocation(815, 9);
				Match(input,SHORT,Follow._SHORT_in_primitiveType2835); if (state.failed) return;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:816:9: 'int'
				{
				DebugLocation(816, 9);
				Match(input,INT,Follow._INT_in_primitiveType2845); if (state.failed) return;
				DebugLocation(816, 15);
				if (state.backtracking == 0)
				{
					Console.Write("Hello from int");
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:817:9: 'long'
				{
				DebugLocation(817, 9);
				Match(input,LONG,Follow._LONG_in_primitiveType2857); if (state.failed) return;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:818:9: 'float'
				{
				DebugLocation(818, 9);
				Match(input,FLOAT,Follow._FLOAT_in_primitiveType2867); if (state.failed) return;

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:819:9: 'double'
				{
				DebugLocation(819, 9);
				Match(input,DOUBLE,Follow._DOUBLE_in_primitiveType2877); if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("primitiveType", 34);
			LeaveRule("primitiveType", 34);
			LeaveRule_primitiveType();
	        if (state.backtracking > 0) { Memoize(input, 34, primitiveType_StartIndex); }

	    }
	 	DebugLocation(820, 4);
		} finally { DebugExitRule(GrammarFileName, "primitiveType"); }
		return;

	}
	// $ANTLR end "primitiveType"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_typeArguments() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_typeArguments() {}
	// $ANTLR start "typeArguments"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:822:1: typeArguments : '<' typeArgument ( ',' typeArgument )* '>' ;
	[GrammarRule("typeArguments")]
	private void typeArguments()
	{
		EnterRule_typeArguments();
		EnterRule("typeArguments", 35);
		TraceIn("typeArguments", 35);
	    int typeArguments_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "typeArguments");
		DebugLocation(822, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:823:5: ( '<' typeArgument ( ',' typeArgument )* '>' )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:823:9: '<' typeArgument ( ',' typeArgument )* '>'
			{
			DebugLocation(823, 9);
			Match(input,LT,Follow._LT_in_typeArguments2897); if (state.failed) return;
			DebugLocation(823, 13);
			PushFollow(Follow._typeArgument_in_typeArguments2899);
			typeArgument();
			PopFollow();
			if (state.failed) return;
			DebugLocation(824, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:824:9: ( ',' typeArgument )*
			try { DebugEnterSubRule(66);
			while (true)
			{
				int alt66=2;
				try { DebugEnterDecision(66, decisionCanBacktrack[66]);
				int LA66_1 = input.LA(1);

				if ((LA66_1==COMMA))
				{
					alt66 = 1;
				}


				} finally { DebugExitDecision(66); }
				switch ( alt66 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:824:10: ',' typeArgument
					{
					DebugLocation(824, 10);
					Match(input,COMMA,Follow._COMMA_in_typeArguments2910); if (state.failed) return;
					DebugLocation(824, 14);
					PushFollow(Follow._typeArgument_in_typeArguments2912);
					typeArgument();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop66;
				}
			}

			loop66:
				;

			} finally { DebugExitSubRule(66); }

			DebugLocation(826, 9);
			Match(input,GT,Follow._GT_in_typeArguments2934); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeArguments", 35);
			LeaveRule("typeArguments", 35);
			LeaveRule_typeArguments();
	        if (state.backtracking > 0) { Memoize(input, 35, typeArguments_StartIndex); }

	    }
	 	DebugLocation(827, 4);
		} finally { DebugExitRule(GrammarFileName, "typeArguments"); }
		return;

	}
	// $ANTLR end "typeArguments"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_typeArgument() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_typeArgument() {}
	// $ANTLR start "typeArgument"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:829:1: typeArgument : ( type | '?' ( ( 'extends' | 'super' ) type )? );
	[GrammarRule("typeArgument")]
	private void typeArgument()
	{
		EnterRule_typeArgument();
		EnterRule("typeArgument", 36);
		TraceIn("typeArgument", 36);
	    int typeArgument_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "typeArgument");
		DebugLocation(829, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:830:5: ( type | '?' ( ( 'extends' | 'super' ) type )? )
			int alt68=2;
			try { DebugEnterDecision(68, decisionCanBacktrack[68]);
			int LA68_1 = input.LA(1);

			if ((LA68_1==BOOLEAN||LA68_1==BYTE||LA68_1==CHAR||LA68_1==DOUBLE||LA68_1==FLOAT||LA68_1==IDENTIFIER||LA68_1==INT||LA68_1==LONG||LA68_1==SHORT))
			{
				alt68 = 1;
			}
			else if ((LA68_1==QUES))
			{
				alt68 = 2;
			}

			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 68, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}

			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:830:9: type
				{
				DebugLocation(830, 9);
				PushFollow(Follow._type_in_typeArgument2954);
				type();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:831:9: '?' ( ( 'extends' | 'super' ) type )?
				{
				DebugLocation(831, 9);
				Match(input,QUES,Follow._QUES_in_typeArgument2964); if (state.failed) return;
				DebugLocation(832, 9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:832:9: ( ( 'extends' | 'super' ) type )?
				int alt67=2;
				try { DebugEnterSubRule(67);
				try { DebugEnterDecision(67, decisionCanBacktrack[67]);
				int LA67_1 = input.LA(1);

				if ((LA67_1==EXTENDS||LA67_1==SUPER))
				{
					alt67 = 1;
				}
				} finally { DebugExitDecision(67); }
				switch (alt67)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:833:13: ( 'extends' | 'super' ) type
					{
					DebugLocation(833, 13);
					if (input.LA(1)==EXTENDS||input.LA(1)==SUPER)
					{
						input.Consume();
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(836, 13);
					PushFollow(Follow._type_in_typeArgument3032);
					type();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(67); }


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeArgument", 36);
			LeaveRule("typeArgument", 36);
			LeaveRule_typeArgument();
	        if (state.backtracking > 0) { Memoize(input, 36, typeArgument_StartIndex); }

	    }
	 	DebugLocation(838, 4);
		} finally { DebugExitRule(GrammarFileName, "typeArgument"); }
		return;

	}
	// $ANTLR end "typeArgument"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_qualifiedNameList() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_qualifiedNameList() {}
	// $ANTLR start "qualifiedNameList"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:840:1: qualifiedNameList : qualifiedName ( ',' qualifiedName )* ;
	[GrammarRule("qualifiedNameList")]
	private void qualifiedNameList()
	{
		EnterRule_qualifiedNameList();
		EnterRule("qualifiedNameList", 37);
		TraceIn("qualifiedNameList", 37);
	    int qualifiedNameList_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "qualifiedNameList");
		DebugLocation(840, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:841:5: ( qualifiedName ( ',' qualifiedName )* )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:841:9: qualifiedName ( ',' qualifiedName )*
			{
			DebugLocation(841, 9);
			PushFollow(Follow._qualifiedName_in_qualifiedNameList3063);
			qualifiedName();
			PopFollow();
			if (state.failed) return;
			DebugLocation(842, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:842:9: ( ',' qualifiedName )*
			try { DebugEnterSubRule(69);
			while (true)
			{
				int alt69=2;
				try { DebugEnterDecision(69, decisionCanBacktrack[69]);
				int LA69_1 = input.LA(1);

				if ((LA69_1==COMMA))
				{
					alt69 = 1;
				}


				} finally { DebugExitDecision(69); }
				switch ( alt69 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:842:10: ',' qualifiedName
					{
					DebugLocation(842, 10);
					Match(input,COMMA,Follow._COMMA_in_qualifiedNameList3074); if (state.failed) return;
					DebugLocation(842, 14);
					PushFollow(Follow._qualifiedName_in_qualifiedNameList3076);
					qualifiedName();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop69;
				}
			}

			loop69:
				;

			} finally { DebugExitSubRule(69); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("qualifiedNameList", 37);
			LeaveRule("qualifiedNameList", 37);
			LeaveRule_qualifiedNameList();
	        if (state.backtracking > 0) { Memoize(input, 37, qualifiedNameList_StartIndex); }

	    }
	 	DebugLocation(844, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedNameList"); }
		return;

	}
	// $ANTLR end "qualifiedNameList"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_formalParameters() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_formalParameters() {}
	// $ANTLR start "formalParameters"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:846:1: formalParameters : '(' ( formalParameterDecls )? ')' ;
	[GrammarRule("formalParameters")]
	private void formalParameters()
	{
		EnterRule_formalParameters();
		EnterRule("formalParameters", 38);
		TraceIn("formalParameters", 38);
	    int formalParameters_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "formalParameters");
		DebugLocation(846, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:847:5: ( '(' ( formalParameterDecls )? ')' )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:847:9: '(' ( formalParameterDecls )? ')'
			{
			DebugLocation(847, 9);
			Match(input,LPAREN,Follow._LPAREN_in_formalParameters3107); if (state.failed) return;
			DebugLocation(848, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:848:9: ( formalParameterDecls )?
			int alt70=2;
			try { DebugEnterSubRule(70);
			try { DebugEnterDecision(70, decisionCanBacktrack[70]);
			int LA70_1 = input.LA(1);

			if ((LA70_1==BOOLEAN||LA70_1==BYTE||LA70_1==CHAR||LA70_1==DOUBLE||LA70_1==FINAL||LA70_1==FLOAT||LA70_1==IDENTIFIER||LA70_1==INT||LA70_1==LONG||LA70_1==MONKEYS_AT||LA70_1==SHORT))
			{
				alt70 = 1;
			}
			} finally { DebugExitDecision(70); }
			switch (alt70)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:848:10: formalParameterDecls
				{
				DebugLocation(848, 10);
				PushFollow(Follow._formalParameterDecls_in_formalParameters3118);
				formalParameterDecls();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(70); }

			DebugLocation(850, 9);
			Match(input,RPAREN,Follow._RPAREN_in_formalParameters3140); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("formalParameters", 38);
			LeaveRule("formalParameters", 38);
			LeaveRule_formalParameters();
	        if (state.backtracking > 0) { Memoize(input, 38, formalParameters_StartIndex); }

	    }
	 	DebugLocation(851, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameters"); }
		return;

	}
	// $ANTLR end "formalParameters"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_formalParameterDecls() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_formalParameterDecls() {}
	// $ANTLR start "formalParameterDecls"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:853:1: formalParameterDecls : ( ellipsisParameterDecl | normalParameterDecl ( ',' normalParameterDecl )* | ( normalParameterDecl ',' )+ ellipsisParameterDecl );
	[GrammarRule("formalParameterDecls")]
	private void formalParameterDecls()
	{
		EnterRule_formalParameterDecls();
		EnterRule("formalParameterDecls", 39);
		TraceIn("formalParameterDecls", 39);
	    int formalParameterDecls_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "formalParameterDecls");
		DebugLocation(853, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:854:5: ( ellipsisParameterDecl | normalParameterDecl ( ',' normalParameterDecl )* | ( normalParameterDecl ',' )+ ellipsisParameterDecl )
			int alt73=3;
			try { DebugEnterDecision(73, decisionCanBacktrack[73]);
			switch (input.LA(1))
			{
			case FINAL:
				{
				int LA73_2 = input.LA(2);

				if ((EvaluatePredicate(synpred96_Java_fragment)))
				{
					alt73 = 1;
				}
				else if ((EvaluatePredicate(synpred98_Java_fragment)))
				{
					alt73 = 2;
				}
				else if ((true))
				{
					alt73 = 3;
				}

				}
				break;
			case MONKEYS_AT:
				{
				int LA73_2 = input.LA(2);

				if ((EvaluatePredicate(synpred96_Java_fragment)))
				{
					alt73 = 1;
				}
				else if ((EvaluatePredicate(synpred98_Java_fragment)))
				{
					alt73 = 2;
				}
				else if ((true))
				{
					alt73 = 3;
				}

				}
				break;
			case IDENTIFIER:
				{
				int LA73_2 = input.LA(2);

				if ((EvaluatePredicate(synpred96_Java_fragment)))
				{
					alt73 = 1;
				}
				else if ((EvaluatePredicate(synpred98_Java_fragment)))
				{
					alt73 = 2;
				}
				else if ((true))
				{
					alt73 = 3;
				}

				}
				break;
			case BOOLEAN:
				{
				int LA73_2 = input.LA(2);

				if ((EvaluatePredicate(synpred96_Java_fragment)))
				{
					alt73 = 1;
				}
				else if ((EvaluatePredicate(synpred98_Java_fragment)))
				{
					alt73 = 2;
				}
				else if ((true))
				{
					alt73 = 3;
				}

				}
				break;
			case CHAR:
				{
				int LA73_2 = input.LA(2);

				if ((EvaluatePredicate(synpred96_Java_fragment)))
				{
					alt73 = 1;
				}
				else if ((EvaluatePredicate(synpred98_Java_fragment)))
				{
					alt73 = 2;
				}
				else if ((true))
				{
					alt73 = 3;
				}

				}
				break;
			case BYTE:
				{
				int LA73_2 = input.LA(2);

				if ((EvaluatePredicate(synpred96_Java_fragment)))
				{
					alt73 = 1;
				}
				else if ((EvaluatePredicate(synpred98_Java_fragment)))
				{
					alt73 = 2;
				}
				else if ((true))
				{
					alt73 = 3;
				}

				}
				break;
			case SHORT:
				{
				int LA73_2 = input.LA(2);

				if ((EvaluatePredicate(synpred96_Java_fragment)))
				{
					alt73 = 1;
				}
				else if ((EvaluatePredicate(synpred98_Java_fragment)))
				{
					alt73 = 2;
				}
				else if ((true))
				{
					alt73 = 3;
				}

				}
				break;
			case INT:
				{
				int LA73_2 = input.LA(2);

				if ((EvaluatePredicate(synpred96_Java_fragment)))
				{
					alt73 = 1;
				}
				else if ((EvaluatePredicate(synpred98_Java_fragment)))
				{
					alt73 = 2;
				}
				else if ((true))
				{
					alt73 = 3;
				}

				}
				break;
			case LONG:
				{
				int LA73_2 = input.LA(2);

				if ((EvaluatePredicate(synpred96_Java_fragment)))
				{
					alt73 = 1;
				}
				else if ((EvaluatePredicate(synpred98_Java_fragment)))
				{
					alt73 = 2;
				}
				else if ((true))
				{
					alt73 = 3;
				}

				}
				break;
			case FLOAT:
				{
				int LA73_2 = input.LA(2);

				if ((EvaluatePredicate(synpred96_Java_fragment)))
				{
					alt73 = 1;
				}
				else if ((EvaluatePredicate(synpred98_Java_fragment)))
				{
					alt73 = 2;
				}
				else if ((true))
				{
					alt73 = 3;
				}

				}
				break;
			case DOUBLE:
				{
				int LA73_2 = input.LA(2);

				if ((EvaluatePredicate(synpred96_Java_fragment)))
				{
					alt73 = 1;
				}
				else if ((EvaluatePredicate(synpred98_Java_fragment)))
				{
					alt73 = 2;
				}
				else if ((true))
				{
					alt73 = 3;
				}

				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 73, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(73); }
			switch (alt73)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:854:9: ellipsisParameterDecl
				{
				DebugLocation(854, 9);
				PushFollow(Follow._ellipsisParameterDecl_in_formalParameterDecls3160);
				ellipsisParameterDecl();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:855:9: normalParameterDecl ( ',' normalParameterDecl )*
				{
				DebugLocation(855, 9);
				PushFollow(Follow._normalParameterDecl_in_formalParameterDecls3170);
				normalParameterDecl();
				PopFollow();
				if (state.failed) return;
				DebugLocation(856, 9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:856:9: ( ',' normalParameterDecl )*
				try { DebugEnterSubRule(71);
				while (true)
				{
					int alt71=2;
					try { DebugEnterDecision(71, decisionCanBacktrack[71]);
					int LA71_1 = input.LA(1);

					if ((LA71_1==COMMA))
					{
						alt71 = 1;
					}


					} finally { DebugExitDecision(71); }
					switch ( alt71 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:856:10: ',' normalParameterDecl
						{
						DebugLocation(856, 10);
						Match(input,COMMA,Follow._COMMA_in_formalParameterDecls3181); if (state.failed) return;
						DebugLocation(856, 14);
						PushFollow(Follow._normalParameterDecl_in_formalParameterDecls3183);
						normalParameterDecl();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop71;
					}
				}

				loop71:
					;

				} finally { DebugExitSubRule(71); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:858:9: ( normalParameterDecl ',' )+ ellipsisParameterDecl
				{
				DebugLocation(858, 9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:858:9: ( normalParameterDecl ',' )+
				int cnt72=0;
				try { DebugEnterSubRule(72);
				while (true)
				{
					int alt72=2;
					try { DebugEnterDecision(72, decisionCanBacktrack[72]);
					switch (input.LA(1))
					{
					case FINAL:
						{
						int LA72_2 = input.LA(2);

						if ((EvaluatePredicate(synpred99_Java_fragment)))
						{
							alt72 = 1;
						}


						}
						break;
					case MONKEYS_AT:
						{
						int LA72_2 = input.LA(2);

						if ((EvaluatePredicate(synpred99_Java_fragment)))
						{
							alt72 = 1;
						}


						}
						break;
					case IDENTIFIER:
						{
						int LA72_2 = input.LA(2);

						if ((EvaluatePredicate(synpred99_Java_fragment)))
						{
							alt72 = 1;
						}


						}
						break;
					case BOOLEAN:
						{
						int LA72_2 = input.LA(2);

						if ((EvaluatePredicate(synpred99_Java_fragment)))
						{
							alt72 = 1;
						}


						}
						break;
					case CHAR:
						{
						int LA72_2 = input.LA(2);

						if ((EvaluatePredicate(synpred99_Java_fragment)))
						{
							alt72 = 1;
						}


						}
						break;
					case BYTE:
						{
						int LA72_2 = input.LA(2);

						if ((EvaluatePredicate(synpred99_Java_fragment)))
						{
							alt72 = 1;
						}


						}
						break;
					case SHORT:
						{
						int LA72_2 = input.LA(2);

						if ((EvaluatePredicate(synpred99_Java_fragment)))
						{
							alt72 = 1;
						}


						}
						break;
					case INT:
						{
						int LA72_2 = input.LA(2);

						if ((EvaluatePredicate(synpred99_Java_fragment)))
						{
							alt72 = 1;
						}


						}
						break;
					case LONG:
						{
						int LA72_2 = input.LA(2);

						if ((EvaluatePredicate(synpred99_Java_fragment)))
						{
							alt72 = 1;
						}


						}
						break;
					case FLOAT:
						{
						int LA72_2 = input.LA(2);

						if ((EvaluatePredicate(synpred99_Java_fragment)))
						{
							alt72 = 1;
						}


						}
						break;
					case DOUBLE:
						{
						int LA72_2 = input.LA(2);

						if ((EvaluatePredicate(synpred99_Java_fragment)))
						{
							alt72 = 1;
						}


						}
						break;
					}

					} finally { DebugExitDecision(72); }
					switch (alt72)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:858:10: normalParameterDecl ','
						{
						DebugLocation(858, 10);
						PushFollow(Follow._normalParameterDecl_in_formalParameterDecls3205);
						normalParameterDecl();
						PopFollow();
						if (state.failed) return;
						DebugLocation(859, 9);
						Match(input,COMMA,Follow._COMMA_in_formalParameterDecls3215); if (state.failed) return;

						}
						break;

					default:
						if (cnt72 >= 1)
							goto loop72;

						if (state.backtracking>0) {state.failed=true; return;}
						EarlyExitException eee72 = new EarlyExitException( 72, input );
						DebugRecognitionException(eee72);
						throw eee72;
					}
					cnt72++;
				}
				loop72:
					;

				} finally { DebugExitSubRule(72); }

				DebugLocation(861, 9);
				PushFollow(Follow._ellipsisParameterDecl_in_formalParameterDecls3237);
				ellipsisParameterDecl();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("formalParameterDecls", 39);
			LeaveRule("formalParameterDecls", 39);
			LeaveRule_formalParameterDecls();
	        if (state.backtracking > 0) { Memoize(input, 39, formalParameterDecls_StartIndex); }

	    }
	 	DebugLocation(862, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameterDecls"); }
		return;

	}
	// $ANTLR end "formalParameterDecls"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_normalParameterDecl() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_normalParameterDecl() {}
	// $ANTLR start "normalParameterDecl"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:864:1: normalParameterDecl : variableModifiers type IDENTIFIER ( '[' ']' )* ;
	[GrammarRule("normalParameterDecl")]
	private void normalParameterDecl()
	{
		EnterRule_normalParameterDecl();
		EnterRule("normalParameterDecl", 40);
		TraceIn("normalParameterDecl", 40);
	    int normalParameterDecl_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "normalParameterDecl");
		DebugLocation(864, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:865:5: ( variableModifiers type IDENTIFIER ( '[' ']' )* )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:865:9: variableModifiers type IDENTIFIER ( '[' ']' )*
			{
			DebugLocation(865, 9);
			PushFollow(Follow._variableModifiers_in_normalParameterDecl3257);
			variableModifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(865, 27);
			PushFollow(Follow._type_in_normalParameterDecl3259);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(865, 32);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_normalParameterDecl3261); if (state.failed) return;
			DebugLocation(866, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:866:9: ( '[' ']' )*
			try { DebugEnterSubRule(74);
			while (true)
			{
				int alt74=2;
				try { DebugEnterDecision(74, decisionCanBacktrack[74]);
				int LA74_1 = input.LA(1);

				if ((LA74_1==LBRACKET))
				{
					alt74 = 1;
				}


				} finally { DebugExitDecision(74); }
				switch ( alt74 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:866:10: '[' ']'
					{
					DebugLocation(866, 10);
					Match(input,LBRACKET,Follow._LBRACKET_in_normalParameterDecl3272); if (state.failed) return;
					DebugLocation(866, 14);
					Match(input,RBRACKET,Follow._RBRACKET_in_normalParameterDecl3274); if (state.failed) return;

					}
					break;

				default:
					goto loop74;
				}
			}

			loop74:
				;

			} finally { DebugExitSubRule(74); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("normalParameterDecl", 40);
			LeaveRule("normalParameterDecl", 40);
			LeaveRule_normalParameterDecl();
	        if (state.backtracking > 0) { Memoize(input, 40, normalParameterDecl_StartIndex); }

	    }
	 	DebugLocation(868, 4);
		} finally { DebugExitRule(GrammarFileName, "normalParameterDecl"); }
		return;

	}
	// $ANTLR end "normalParameterDecl"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_ellipsisParameterDecl() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_ellipsisParameterDecl() {}
	// $ANTLR start "ellipsisParameterDecl"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:870:1: ellipsisParameterDecl : variableModifiers type '...' IDENTIFIER ;
	[GrammarRule("ellipsisParameterDecl")]
	private void ellipsisParameterDecl()
	{
		EnterRule_ellipsisParameterDecl();
		EnterRule("ellipsisParameterDecl", 41);
		TraceIn("ellipsisParameterDecl", 41);
	    int ellipsisParameterDecl_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "ellipsisParameterDecl");
		DebugLocation(870, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:871:5: ( variableModifiers type '...' IDENTIFIER )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:871:9: variableModifiers type '...' IDENTIFIER
			{
			DebugLocation(871, 9);
			PushFollow(Follow._variableModifiers_in_ellipsisParameterDecl3305);
			variableModifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(872, 9);
			PushFollow(Follow._type_in_ellipsisParameterDecl3315);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(872, 15);
			Match(input,ELLIPSIS,Follow._ELLIPSIS_in_ellipsisParameterDecl3318); if (state.failed) return;
			DebugLocation(873, 9);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_ellipsisParameterDecl3328); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ellipsisParameterDecl", 41);
			LeaveRule("ellipsisParameterDecl", 41);
			LeaveRule_ellipsisParameterDecl();
	        if (state.backtracking > 0) { Memoize(input, 41, ellipsisParameterDecl_StartIndex); }

	    }
	 	DebugLocation(874, 4);
		} finally { DebugExitRule(GrammarFileName, "ellipsisParameterDecl"); }
		return;

	}
	// $ANTLR end "ellipsisParameterDecl"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_explicitConstructorInvocation() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_explicitConstructorInvocation() {}
	// $ANTLR start "explicitConstructorInvocation"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:877:1: explicitConstructorInvocation : ( ( nonWildcardTypeArguments )? ( 'this' | 'super' ) arguments ';' | primary '.' ( nonWildcardTypeArguments )? 'super' arguments ';' );
	[GrammarRule("explicitConstructorInvocation")]
	private void explicitConstructorInvocation()
	{
		EnterRule_explicitConstructorInvocation();
		EnterRule("explicitConstructorInvocation", 42);
		TraceIn("explicitConstructorInvocation", 42);
	    int explicitConstructorInvocation_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "explicitConstructorInvocation");
		DebugLocation(877, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:878:5: ( ( nonWildcardTypeArguments )? ( 'this' | 'super' ) arguments ';' | primary '.' ( nonWildcardTypeArguments )? 'super' arguments ';' )
			int alt77=2;
			try { DebugEnterDecision(77, decisionCanBacktrack[77]);
			switch (input.LA(1))
			{
			case LT:
				{
				alt77 = 1;
				}
				break;
			case THIS:
				{
				int LA77_2 = input.LA(2);

				if ((EvaluatePredicate(synpred103_Java_fragment)))
				{
					alt77 = 1;
				}
				else if ((true))
				{
					alt77 = 2;
				}

				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CHARLITERAL:
			case DOUBLE:
			case DOUBLELITERAL:
			case FALSE:
			case FLOAT:
			case FLOATLITERAL:
			case IDENTIFIER:
			case INT:
			case INTLITERAL:
			case LONG:
			case LONGLITERAL:
			case LPAREN:
			case NEW:
			case NULL:
			case SHORT:
			case STRINGLITERAL:
			case TRUE:
			case VOID:
				{
				alt77 = 2;
				}
				break;
			case SUPER:
				{
				int LA77_2 = input.LA(2);

				if ((EvaluatePredicate(synpred103_Java_fragment)))
				{
					alt77 = 1;
				}
				else if ((true))
				{
					alt77 = 2;
				}

				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 77, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(77); }
			switch (alt77)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:878:9: ( nonWildcardTypeArguments )? ( 'this' | 'super' ) arguments ';'
				{
				DebugLocation(878, 9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:878:9: ( nonWildcardTypeArguments )?
				int alt75=2;
				try { DebugEnterSubRule(75);
				try { DebugEnterDecision(75, decisionCanBacktrack[75]);
				int LA75_1 = input.LA(1);

				if ((LA75_1==LT))
				{
					alt75 = 1;
				}
				} finally { DebugExitDecision(75); }
				switch (alt75)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:878:10: nonWildcardTypeArguments
					{
					DebugLocation(878, 10);
					PushFollow(Follow._nonWildcardTypeArguments_in_explicitConstructorInvocation3350);
					nonWildcardTypeArguments();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(75); }

				DebugLocation(880, 9);
				if (input.LA(1)==SUPER||input.LA(1)==THIS)
				{
					input.Consume();
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(883, 9);
				PushFollow(Follow._arguments_in_explicitConstructorInvocation3408);
				arguments();
				PopFollow();
				if (state.failed) return;
				DebugLocation(883, 19);
				Match(input,SEMI,Follow._SEMI_in_explicitConstructorInvocation3410); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:885:9: primary '.' ( nonWildcardTypeArguments )? 'super' arguments ';'
				{
				DebugLocation(885, 9);
				PushFollow(Follow._primary_in_explicitConstructorInvocation3421);
				primary();
				PopFollow();
				if (state.failed) return;
				DebugLocation(886, 9);
				Match(input,DOT,Follow._DOT_in_explicitConstructorInvocation3431); if (state.failed) return;
				DebugLocation(887, 9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:887:9: ( nonWildcardTypeArguments )?
				int alt76=2;
				try { DebugEnterSubRule(76);
				try { DebugEnterDecision(76, decisionCanBacktrack[76]);
				int LA76_1 = input.LA(1);

				if ((LA76_1==LT))
				{
					alt76 = 1;
				}
				} finally { DebugExitDecision(76); }
				switch (alt76)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:887:10: nonWildcardTypeArguments
					{
					DebugLocation(887, 10);
					PushFollow(Follow._nonWildcardTypeArguments_in_explicitConstructorInvocation3442);
					nonWildcardTypeArguments();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(76); }

				DebugLocation(889, 9);
				Match(input,SUPER,Follow._SUPER_in_explicitConstructorInvocation3463); if (state.failed) return;
				DebugLocation(890, 9);
				PushFollow(Follow._arguments_in_explicitConstructorInvocation3473);
				arguments();
				PopFollow();
				if (state.failed) return;
				DebugLocation(890, 19);
				Match(input,SEMI,Follow._SEMI_in_explicitConstructorInvocation3475); if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("explicitConstructorInvocation", 42);
			LeaveRule("explicitConstructorInvocation", 42);
			LeaveRule_explicitConstructorInvocation();
	        if (state.backtracking > 0) { Memoize(input, 42, explicitConstructorInvocation_StartIndex); }

	    }
	 	DebugLocation(891, 4);
		} finally { DebugExitRule(GrammarFileName, "explicitConstructorInvocation"); }
		return;

	}
	// $ANTLR end "explicitConstructorInvocation"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_qualifiedName() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_qualifiedName() {}
	// $ANTLR start "qualifiedName"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:893:1: qualifiedName returns [String value] : id= IDENTIFIER ( '.' id= IDENTIFIER )* ;
	[GrammarRule("qualifiedName")]
	private String qualifiedName()
	{
		EnterRule_qualifiedName();
		EnterRule("qualifiedName", 43);
		TraceIn("qualifiedName", 43);
	    String value = default(String);

	    int qualifiedName_StartIndex = input.Index;

	    IToken id = default(IToken);

		try { DebugEnterRule(GrammarFileName, "qualifiedName");
		DebugLocation(893, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return value; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:894:5: (id= IDENTIFIER ( '.' id= IDENTIFIER )* )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:894:9: id= IDENTIFIER ( '.' id= IDENTIFIER )*
			{
			DebugLocation(894, 11);
			id=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_qualifiedName3500); if (state.failed) return value;
			DebugLocation(894, 23);
			if (state.backtracking == 0)
			{
				 value = (id!=null?id.Text:default(string)); 
			}
			DebugLocation(895, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:895:9: ( '.' id= IDENTIFIER )*
			try { DebugEnterSubRule(78);
			while (true)
			{
				int alt78=2;
				try { DebugEnterDecision(78, decisionCanBacktrack[78]);
				int LA78_1 = input.LA(1);

				if ((LA78_1==DOT))
				{
					alt78 = 1;
				}


				} finally { DebugExitDecision(78); }
				switch ( alt78 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:895:10: '.' id= IDENTIFIER
					{
					DebugLocation(895, 10);
					Match(input,DOT,Follow._DOT_in_qualifiedName3513); if (state.failed) return value;
					DebugLocation(895, 16);
					id=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_qualifiedName3517); if (state.failed) return value;
					DebugLocation(895, 28);
					if (state.backtracking == 0)
					{
						 value += "." + (id!=null?id.Text:default(string)); 
					}

					}
					break;

				default:
					goto loop78;
				}
			}

			loop78:
				;

			} finally { DebugExitSubRule(78); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("qualifiedName", 43);
			LeaveRule("qualifiedName", 43);
			LeaveRule_qualifiedName();
	        if (state.backtracking > 0) { Memoize(input, 43, qualifiedName_StartIndex); }

	    }
	 	DebugLocation(897, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedName"); }
		return value;

	}
	// $ANTLR end "qualifiedName"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_annotations() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_annotations() {}
	// $ANTLR start "annotations"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:899:1: annotations : ( annotation )+ ;
	[GrammarRule("annotations")]
	private void annotations()
	{
		EnterRule_annotations();
		EnterRule("annotations", 44);
		TraceIn("annotations", 44);
	    int annotations_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotations");
		DebugLocation(899, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:900:5: ( ( annotation )+ )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:900:9: ( annotation )+
			{
			DebugLocation(900, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:900:9: ( annotation )+
			int cnt79=0;
			try { DebugEnterSubRule(79);
			while (true)
			{
				int alt79=2;
				try { DebugEnterDecision(79, decisionCanBacktrack[79]);
				int LA79_1 = input.LA(1);

				if ((LA79_1==MONKEYS_AT))
				{
					alt79 = 1;
				}


				} finally { DebugExitDecision(79); }
				switch (alt79)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:900:10: annotation
					{
					DebugLocation(900, 10);
					PushFollow(Follow._annotation_in_annotations3551);
					annotation();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt79 >= 1)
						goto loop79;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee79 = new EarlyExitException( 79, input );
					DebugRecognitionException(eee79);
					throw eee79;
				}
				cnt79++;
			}
			loop79:
				;

			} finally { DebugExitSubRule(79); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotations", 44);
			LeaveRule("annotations", 44);
			LeaveRule_annotations();
	        if (state.backtracking > 0) { Memoize(input, 44, annotations_StartIndex); }

	    }
	 	DebugLocation(902, 4);
		} finally { DebugExitRule(GrammarFileName, "annotations"); }
		return;

	}
	// $ANTLR end "annotations"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_annotation() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_annotation() {}
	// $ANTLR start "annotation"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:908:1: annotation : '@' qualifiedName ( '(' ( elementValuePairs | elementValue )? ')' )? ;
	[GrammarRule("annotation")]
	private void annotation()
	{
		EnterRule_annotation();
		EnterRule("annotation", 45);
		TraceIn("annotation", 45);
	    int annotation_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotation");
		DebugLocation(908, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:909:5: ( '@' qualifiedName ( '(' ( elementValuePairs | elementValue )? ')' )? )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:909:9: '@' qualifiedName ( '(' ( elementValuePairs | elementValue )? ')' )?
			{
			DebugLocation(909, 9);
			Match(input,MONKEYS_AT,Follow._MONKEYS_AT_in_annotation3584); if (state.failed) return;
			DebugLocation(909, 13);
			PushFollow(Follow._qualifiedName_in_annotation3586);
			qualifiedName();
			PopFollow();
			if (state.failed) return;
			DebugLocation(910, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:910:9: ( '(' ( elementValuePairs | elementValue )? ')' )?
			int alt81=2;
			try { DebugEnterSubRule(81);
			try { DebugEnterDecision(81, decisionCanBacktrack[81]);
			int LA81_1 = input.LA(1);

			if ((LA81_1==LPAREN))
			{
				alt81 = 1;
			}
			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:910:13: '(' ( elementValuePairs | elementValue )? ')'
				{
				DebugLocation(910, 13);
				Match(input,LPAREN,Follow._LPAREN_in_annotation3600); if (state.failed) return;
				DebugLocation(911, 19);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:911:19: ( elementValuePairs | elementValue )?
				int alt80=3;
				try { DebugEnterSubRule(80);
				try { DebugEnterDecision(80, decisionCanBacktrack[80]);
				int LA80_1 = input.LA(1);

				if ((LA80_1==IDENTIFIER))
				{
					int LA80_2 = input.LA(2);

					if ((LA80_2==EQ))
					{
						alt80 = 1;
					}
					else if (((LA80_2>=AMP && LA80_2<=AMPAMP)||(LA80_2>=BANGEQ && LA80_2<=BARBAR)||LA80_2==CARET||LA80_2==DOT||LA80_2==EQEQ||LA80_2==GT||LA80_2==INSTANCEOF||LA80_2==LBRACKET||(LA80_2>=LPAREN && LA80_2<=LT)||LA80_2==PERCENT||LA80_2==PLUS||LA80_2==PLUSPLUS||LA80_2==QUES||LA80_2==RPAREN||LA80_2==SLASH||LA80_2==STAR||LA80_2==SUB||LA80_2==SUBSUB))
					{
						alt80 = 2;
					}
				}
				else if ((LA80_1==BANG||LA80_1==BOOLEAN||LA80_1==BYTE||(LA80_1>=CHAR && LA80_1<=CHARLITERAL)||(LA80_1>=DOUBLE && LA80_1<=DOUBLELITERAL)||LA80_1==FALSE||(LA80_1>=FLOAT && LA80_1<=FLOATLITERAL)||LA80_1==INT||LA80_1==INTLITERAL||LA80_1==LBRACE||(LA80_1>=LONG && LA80_1<=LPAREN)||LA80_1==MONKEYS_AT||(LA80_1>=NEW && LA80_1<=NULL)||LA80_1==PLUS||LA80_1==PLUSPLUS||LA80_1==SHORT||(LA80_1>=STRINGLITERAL && LA80_1<=SUB)||(LA80_1>=SUBSUB && LA80_1<=SUPER)||LA80_1==THIS||LA80_1==TILDE||LA80_1==TRUE||LA80_1==VOID))
				{
					alt80 = 2;
				}
				} finally { DebugExitDecision(80); }
				switch (alt80)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:911:23: elementValuePairs
					{
					DebugLocation(911, 23);
					PushFollow(Follow._elementValuePairs_in_annotation3627);
					elementValuePairs();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:912:23: elementValue
					{
					DebugLocation(912, 23);
					PushFollow(Follow._elementValue_in_annotation3651);
					elementValue();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(80); }

				DebugLocation(914, 13);
				Match(input,RPAREN,Follow._RPAREN_in_annotation3687); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(81); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotation", 45);
			LeaveRule("annotation", 45);
			LeaveRule_annotation();
	        if (state.backtracking > 0) { Memoize(input, 45, annotation_StartIndex); }

	    }
	 	DebugLocation(916, 4);
		} finally { DebugExitRule(GrammarFileName, "annotation"); }
		return;

	}
	// $ANTLR end "annotation"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_elementValuePairs() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_elementValuePairs() {}
	// $ANTLR start "elementValuePairs"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:918:1: elementValuePairs : elementValuePair ( ',' elementValuePair )* ;
	[GrammarRule("elementValuePairs")]
	private void elementValuePairs()
	{
		EnterRule_elementValuePairs();
		EnterRule("elementValuePairs", 46);
		TraceIn("elementValuePairs", 46);
	    int elementValuePairs_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "elementValuePairs");
		DebugLocation(918, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:919:5: ( elementValuePair ( ',' elementValuePair )* )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:919:9: elementValuePair ( ',' elementValuePair )*
			{
			DebugLocation(919, 9);
			PushFollow(Follow._elementValuePair_in_elementValuePairs3719);
			elementValuePair();
			PopFollow();
			if (state.failed) return;
			DebugLocation(920, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:920:9: ( ',' elementValuePair )*
			try { DebugEnterSubRule(82);
			while (true)
			{
				int alt82=2;
				try { DebugEnterDecision(82, decisionCanBacktrack[82]);
				int LA82_1 = input.LA(1);

				if ((LA82_1==COMMA))
				{
					alt82 = 1;
				}


				} finally { DebugExitDecision(82); }
				switch ( alt82 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:920:10: ',' elementValuePair
					{
					DebugLocation(920, 10);
					Match(input,COMMA,Follow._COMMA_in_elementValuePairs3730); if (state.failed) return;
					DebugLocation(920, 14);
					PushFollow(Follow._elementValuePair_in_elementValuePairs3732);
					elementValuePair();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop82;
				}
			}

			loop82:
				;

			} finally { DebugExitSubRule(82); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("elementValuePairs", 46);
			LeaveRule("elementValuePairs", 46);
			LeaveRule_elementValuePairs();
	        if (state.backtracking > 0) { Memoize(input, 46, elementValuePairs_StartIndex); }

	    }
	 	DebugLocation(922, 4);
		} finally { DebugExitRule(GrammarFileName, "elementValuePairs"); }
		return;

	}
	// $ANTLR end "elementValuePairs"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_elementValuePair() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_elementValuePair() {}
	// $ANTLR start "elementValuePair"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:924:1: elementValuePair : IDENTIFIER '=' elementValue ;
	[GrammarRule("elementValuePair")]
	private void elementValuePair()
	{
		EnterRule_elementValuePair();
		EnterRule("elementValuePair", 47);
		TraceIn("elementValuePair", 47);
	    int elementValuePair_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "elementValuePair");
		DebugLocation(924, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:925:5: ( IDENTIFIER '=' elementValue )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:925:9: IDENTIFIER '=' elementValue
			{
			DebugLocation(925, 9);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_elementValuePair3763); if (state.failed) return;
			DebugLocation(925, 20);
			Match(input,EQ,Follow._EQ_in_elementValuePair3765); if (state.failed) return;
			DebugLocation(925, 24);
			PushFollow(Follow._elementValue_in_elementValuePair3767);
			elementValue();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("elementValuePair", 47);
			LeaveRule("elementValuePair", 47);
			LeaveRule_elementValuePair();
	        if (state.backtracking > 0) { Memoize(input, 47, elementValuePair_StartIndex); }

	    }
	 	DebugLocation(926, 4);
		} finally { DebugExitRule(GrammarFileName, "elementValuePair"); }
		return;

	}
	// $ANTLR end "elementValuePair"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_elementValue() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_elementValue() {}
	// $ANTLR start "elementValue"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:928:1: elementValue : ( conditionalExpression | annotation | elementValueArrayInitializer );
	[GrammarRule("elementValue")]
	private void elementValue()
	{
		EnterRule_elementValue();
		EnterRule("elementValue", 48);
		TraceIn("elementValue", 48);
	    int elementValue_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "elementValue");
		DebugLocation(928, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:929:5: ( conditionalExpression | annotation | elementValueArrayInitializer )
			int alt83=3;
			try { DebugEnterDecision(83, decisionCanBacktrack[83]);
			switch (input.LA(1))
			{
			case BANG:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CHARLITERAL:
			case DOUBLE:
			case DOUBLELITERAL:
			case FALSE:
			case FLOAT:
			case FLOATLITERAL:
			case IDENTIFIER:
			case INT:
			case INTLITERAL:
			case LONG:
			case LONGLITERAL:
			case LPAREN:
			case NEW:
			case NULL:
			case PLUS:
			case PLUSPLUS:
			case SHORT:
			case STRINGLITERAL:
			case SUB:
			case SUBSUB:
			case SUPER:
			case THIS:
			case TILDE:
			case TRUE:
			case VOID:
				{
				alt83 = 1;
				}
				break;
			case MONKEYS_AT:
				{
				alt83 = 2;
				}
				break;
			case LBRACE:
				{
				alt83 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 83, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:929:9: conditionalExpression
				{
				DebugLocation(929, 9);
				PushFollow(Follow._conditionalExpression_in_elementValue3787);
				conditionalExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:930:9: annotation
				{
				DebugLocation(930, 9);
				PushFollow(Follow._annotation_in_elementValue3797);
				annotation();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:931:9: elementValueArrayInitializer
				{
				DebugLocation(931, 9);
				PushFollow(Follow._elementValueArrayInitializer_in_elementValue3807);
				elementValueArrayInitializer();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("elementValue", 48);
			LeaveRule("elementValue", 48);
			LeaveRule_elementValue();
	        if (state.backtracking > 0) { Memoize(input, 48, elementValue_StartIndex); }

	    }
	 	DebugLocation(932, 4);
		} finally { DebugExitRule(GrammarFileName, "elementValue"); }
		return;

	}
	// $ANTLR end "elementValue"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_elementValueArrayInitializer() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_elementValueArrayInitializer() {}
	// $ANTLR start "elementValueArrayInitializer"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:934:1: elementValueArrayInitializer : '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}' ;
	[GrammarRule("elementValueArrayInitializer")]
	private void elementValueArrayInitializer()
	{
		EnterRule_elementValueArrayInitializer();
		EnterRule("elementValueArrayInitializer", 49);
		TraceIn("elementValueArrayInitializer", 49);
	    int elementValueArrayInitializer_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "elementValueArrayInitializer");
		DebugLocation(934, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:935:5: ( '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}' )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:935:9: '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}'
			{
			DebugLocation(935, 9);
			Match(input,LBRACE,Follow._LBRACE_in_elementValueArrayInitializer3827); if (state.failed) return;
			DebugLocation(936, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:936:9: ( elementValue ( ',' elementValue )* )?
			int alt85=2;
			try { DebugEnterSubRule(85);
			try { DebugEnterDecision(85, decisionCanBacktrack[85]);
			int LA85_1 = input.LA(1);

			if ((LA85_1==BANG||LA85_1==BOOLEAN||LA85_1==BYTE||(LA85_1>=CHAR && LA85_1<=CHARLITERAL)||(LA85_1>=DOUBLE && LA85_1<=DOUBLELITERAL)||LA85_1==FALSE||(LA85_1>=FLOAT && LA85_1<=FLOATLITERAL)||LA85_1==IDENTIFIER||LA85_1==INT||LA85_1==INTLITERAL||LA85_1==LBRACE||(LA85_1>=LONG && LA85_1<=LPAREN)||LA85_1==MONKEYS_AT||(LA85_1>=NEW && LA85_1<=NULL)||LA85_1==PLUS||LA85_1==PLUSPLUS||LA85_1==SHORT||(LA85_1>=STRINGLITERAL && LA85_1<=SUB)||(LA85_1>=SUBSUB && LA85_1<=SUPER)||LA85_1==THIS||LA85_1==TILDE||LA85_1==TRUE||LA85_1==VOID))
			{
				alt85 = 1;
			}
			} finally { DebugExitDecision(85); }
			switch (alt85)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:936:10: elementValue ( ',' elementValue )*
				{
				DebugLocation(936, 10);
				PushFollow(Follow._elementValue_in_elementValueArrayInitializer3838);
				elementValue();
				PopFollow();
				if (state.failed) return;
				DebugLocation(937, 13);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:937:13: ( ',' elementValue )*
				try { DebugEnterSubRule(84);
				while (true)
				{
					int alt84=2;
					try { DebugEnterDecision(84, decisionCanBacktrack[84]);
					int LA84_1 = input.LA(1);

					if ((LA84_1==COMMA))
					{
						int LA84_2 = input.LA(2);

						if ((LA84_2==BANG||LA84_2==BOOLEAN||LA84_2==BYTE||(LA84_2>=CHAR && LA84_2<=CHARLITERAL)||(LA84_2>=DOUBLE && LA84_2<=DOUBLELITERAL)||LA84_2==FALSE||(LA84_2>=FLOAT && LA84_2<=FLOATLITERAL)||LA84_2==IDENTIFIER||LA84_2==INT||LA84_2==INTLITERAL||LA84_2==LBRACE||(LA84_2>=LONG && LA84_2<=LPAREN)||LA84_2==MONKEYS_AT||(LA84_2>=NEW && LA84_2<=NULL)||LA84_2==PLUS||LA84_2==PLUSPLUS||LA84_2==SHORT||(LA84_2>=STRINGLITERAL && LA84_2<=SUB)||(LA84_2>=SUBSUB && LA84_2<=SUPER)||LA84_2==THIS||LA84_2==TILDE||LA84_2==TRUE||LA84_2==VOID))
						{
							alt84 = 1;
						}


					}


					} finally { DebugExitDecision(84); }
					switch ( alt84 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:937:14: ',' elementValue
						{
						DebugLocation(937, 14);
						Match(input,COMMA,Follow._COMMA_in_elementValueArrayInitializer3853); if (state.failed) return;
						DebugLocation(937, 18);
						PushFollow(Follow._elementValue_in_elementValueArrayInitializer3855);
						elementValue();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop84;
					}
				}

				loop84:
					;

				} finally { DebugExitSubRule(84); }


				}
				break;

			}
			} finally { DebugExitSubRule(85); }

			DebugLocation(939, 12);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:939:12: ( ',' )?
			int alt86=2;
			try { DebugEnterSubRule(86);
			try { DebugEnterDecision(86, decisionCanBacktrack[86]);
			int LA86_1 = input.LA(1);

			if ((LA86_1==COMMA))
			{
				alt86 = 1;
			}
			} finally { DebugExitDecision(86); }
			switch (alt86)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:939:13: ','
				{
				DebugLocation(939, 13);
				Match(input,COMMA,Follow._COMMA_in_elementValueArrayInitializer3884); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(86); }

			DebugLocation(939, 19);
			Match(input,RBRACE,Follow._RBRACE_in_elementValueArrayInitializer3888); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("elementValueArrayInitializer", 49);
			LeaveRule("elementValueArrayInitializer", 49);
			LeaveRule_elementValueArrayInitializer();
	        if (state.backtracking > 0) { Memoize(input, 49, elementValueArrayInitializer_StartIndex); }

	    }
	 	DebugLocation(940, 4);
		} finally { DebugExitRule(GrammarFileName, "elementValueArrayInitializer"); }
		return;

	}
	// $ANTLR end "elementValueArrayInitializer"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_annotationTypeDeclaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_annotationTypeDeclaration() {}
	// $ANTLR start "annotationTypeDeclaration"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:946:1: annotationTypeDeclaration : modifiers '@' 'interface' IDENTIFIER annotationTypeBody ;
	[GrammarRule("annotationTypeDeclaration")]
	private void annotationTypeDeclaration()
	{
		EnterRule_annotationTypeDeclaration();
		EnterRule("annotationTypeDeclaration", 50);
		TraceIn("annotationTypeDeclaration", 50);
	    int annotationTypeDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotationTypeDeclaration");
		DebugLocation(946, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:947:5: ( modifiers '@' 'interface' IDENTIFIER annotationTypeBody )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:947:9: modifiers '@' 'interface' IDENTIFIER annotationTypeBody
			{
			DebugLocation(947, 9);
			PushFollow(Follow._modifiers_in_annotationTypeDeclaration3911);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(947, 19);
			Match(input,MONKEYS_AT,Follow._MONKEYS_AT_in_annotationTypeDeclaration3913); if (state.failed) return;
			DebugLocation(948, 9);
			Match(input,INTERFACE,Follow._INTERFACE_in_annotationTypeDeclaration3923); if (state.failed) return;
			DebugLocation(949, 9);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_annotationTypeDeclaration3933); if (state.failed) return;
			DebugLocation(950, 9);
			PushFollow(Follow._annotationTypeBody_in_annotationTypeDeclaration3943);
			annotationTypeBody();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotationTypeDeclaration", 50);
			LeaveRule("annotationTypeDeclaration", 50);
			LeaveRule_annotationTypeDeclaration();
	        if (state.backtracking > 0) { Memoize(input, 50, annotationTypeDeclaration_StartIndex); }

	    }
	 	DebugLocation(951, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationTypeDeclaration"); }
		return;

	}
	// $ANTLR end "annotationTypeDeclaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_annotationTypeBody() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_annotationTypeBody() {}
	// $ANTLR start "annotationTypeBody"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:954:1: annotationTypeBody : '{' ( annotationTypeElementDeclaration )* '}' ;
	[GrammarRule("annotationTypeBody")]
	private void annotationTypeBody()
	{
		EnterRule_annotationTypeBody();
		EnterRule("annotationTypeBody", 51);
		TraceIn("annotationTypeBody", 51);
	    int annotationTypeBody_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotationTypeBody");
		DebugLocation(954, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:955:5: ( '{' ( annotationTypeElementDeclaration )* '}' )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:955:9: '{' ( annotationTypeElementDeclaration )* '}'
			{
			DebugLocation(955, 9);
			Match(input,LBRACE,Follow._LBRACE_in_annotationTypeBody3964); if (state.failed) return;
			DebugLocation(956, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:956:9: ( annotationTypeElementDeclaration )*
			try { DebugEnterSubRule(87);
			while (true)
			{
				int alt87=2;
				try { DebugEnterDecision(87, decisionCanBacktrack[87]);
				int LA87_1 = input.LA(1);

				if ((LA87_1==ABSTRACT||LA87_1==BOOLEAN||LA87_1==BYTE||LA87_1==CHAR||LA87_1==CLASS||LA87_1==DOUBLE||LA87_1==ENUM||LA87_1==FINAL||LA87_1==FLOAT||LA87_1==IDENTIFIER||(LA87_1>=INT && LA87_1<=INTERFACE)||LA87_1==LONG||LA87_1==LT||(LA87_1>=MONKEYS_AT && LA87_1<=NATIVE)||(LA87_1>=PRIVATE && LA87_1<=PUBLIC)||(LA87_1>=SEMI && LA87_1<=SHORT)||(LA87_1>=STATIC && LA87_1<=STRICTFP)||LA87_1==SYNCHRONIZED||LA87_1==TRANSIENT||(LA87_1>=VOID && LA87_1<=VOLATILE)))
				{
					alt87 = 1;
				}


				} finally { DebugExitDecision(87); }
				switch ( alt87 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:956:10: annotationTypeElementDeclaration
					{
					DebugLocation(956, 10);
					PushFollow(Follow._annotationTypeElementDeclaration_in_annotationTypeBody3976);
					annotationTypeElementDeclaration();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop87;
				}
			}

			loop87:
				;

			} finally { DebugExitSubRule(87); }

			DebugLocation(958, 9);
			Match(input,RBRACE,Follow._RBRACE_in_annotationTypeBody3998); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotationTypeBody", 51);
			LeaveRule("annotationTypeBody", 51);
			LeaveRule_annotationTypeBody();
	        if (state.backtracking > 0) { Memoize(input, 51, annotationTypeBody_StartIndex); }

	    }
	 	DebugLocation(959, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationTypeBody"); }
		return;

	}
	// $ANTLR end "annotationTypeBody"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_annotationTypeElementDeclaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_annotationTypeElementDeclaration() {}
	// $ANTLR start "annotationTypeElementDeclaration"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:964:1: annotationTypeElementDeclaration : ( annotationMethodDeclaration | interfaceFieldDeclaration | normalClassDeclaration | normalInterfaceDeclaration | enumDeclaration | annotationTypeDeclaration | ';' );
	[GrammarRule("annotationTypeElementDeclaration")]
	private void annotationTypeElementDeclaration()
	{
		EnterRule_annotationTypeElementDeclaration();
		EnterRule("annotationTypeElementDeclaration", 52);
		TraceIn("annotationTypeElementDeclaration", 52);
	    int annotationTypeElementDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotationTypeElementDeclaration");
		DebugLocation(964, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:965:5: ( annotationMethodDeclaration | interfaceFieldDeclaration | normalClassDeclaration | normalInterfaceDeclaration | enumDeclaration | annotationTypeDeclaration | ';' )
			int alt88=7;
			try { DebugEnterDecision(88, decisionCanBacktrack[88]);
			switch (input.LA(1))
			{
			case MONKEYS_AT:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt88 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt88 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt88 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt88 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt88 = 6;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 88, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case PUBLIC:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt88 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt88 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt88 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt88 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt88 = 6;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 88, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case PROTECTED:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt88 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt88 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt88 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt88 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt88 = 6;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 88, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case PRIVATE:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt88 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt88 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt88 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt88 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt88 = 6;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 88, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case STATIC:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt88 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt88 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt88 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt88 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt88 = 6;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 88, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case ABSTRACT:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt88 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt88 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt88 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt88 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt88 = 6;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 88, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case FINAL:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt88 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt88 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt88 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt88 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt88 = 6;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 88, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case NATIVE:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt88 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt88 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt88 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt88 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt88 = 6;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 88, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case SYNCHRONIZED:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt88 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt88 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt88 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt88 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt88 = 6;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 88, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case TRANSIENT:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt88 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt88 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt88 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt88 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt88 = 6;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 88, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case VOLATILE:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt88 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt88 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt88 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt88 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt88 = 6;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 88, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case STRICTFP:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt88 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt88 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt88 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt88 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt88 = 6;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 88, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case IDENTIFIER:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt88 = 2;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 88, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case BOOLEAN:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt88 = 2;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 88, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case CHAR:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt88 = 2;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 88, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case BYTE:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt88 = 2;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 88, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case SHORT:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt88 = 2;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 88, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case INT:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt88 = 2;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 88, 18, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case LONG:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt88 = 2;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 88, 19, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case FLOAT:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt88 = 2;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 88, 20, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case DOUBLE:
				{
				int LA88_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt88 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt88 = 2;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 88, 21, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case CLASS:
				{
				alt88 = 3;
				}
				break;
			case INTERFACE:
				{
				alt88 = 4;
				}
				break;
			case ENUM:
				{
				alt88 = 5;
				}
				break;
			case SEMI:
				{
				alt88 = 7;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 88, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(88); }
			switch (alt88)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:965:9: annotationMethodDeclaration
				{
				DebugLocation(965, 9);
				PushFollow(Follow._annotationMethodDeclaration_in_annotationTypeElementDeclaration4020);
				annotationMethodDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:966:9: interfaceFieldDeclaration
				{
				DebugLocation(966, 9);
				PushFollow(Follow._interfaceFieldDeclaration_in_annotationTypeElementDeclaration4030);
				interfaceFieldDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:967:9: normalClassDeclaration
				{
				DebugLocation(967, 9);
				PushFollow(Follow._normalClassDeclaration_in_annotationTypeElementDeclaration4040);
				normalClassDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:968:9: normalInterfaceDeclaration
				{
				DebugLocation(968, 9);
				PushFollow(Follow._normalInterfaceDeclaration_in_annotationTypeElementDeclaration4050);
				normalInterfaceDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:969:9: enumDeclaration
				{
				DebugLocation(969, 9);
				PushFollow(Follow._enumDeclaration_in_annotationTypeElementDeclaration4060);
				enumDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:970:9: annotationTypeDeclaration
				{
				DebugLocation(970, 9);
				PushFollow(Follow._annotationTypeDeclaration_in_annotationTypeElementDeclaration4070);
				annotationTypeDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:971:9: ';'
				{
				DebugLocation(971, 9);
				Match(input,SEMI,Follow._SEMI_in_annotationTypeElementDeclaration4080); if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotationTypeElementDeclaration", 52);
			LeaveRule("annotationTypeElementDeclaration", 52);
			LeaveRule_annotationTypeElementDeclaration();
	        if (state.backtracking > 0) { Memoize(input, 52, annotationTypeElementDeclaration_StartIndex); }

	    }
	 	DebugLocation(972, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationTypeElementDeclaration"); }
		return;

	}
	// $ANTLR end "annotationTypeElementDeclaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_annotationMethodDeclaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_annotationMethodDeclaration() {}
	// $ANTLR start "annotationMethodDeclaration"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:974:1: annotationMethodDeclaration : modifiers type IDENTIFIER '(' ')' ( 'default' elementValue )? ';' ;
	[GrammarRule("annotationMethodDeclaration")]
	private void annotationMethodDeclaration()
	{
		EnterRule_annotationMethodDeclaration();
		EnterRule("annotationMethodDeclaration", 53);
		TraceIn("annotationMethodDeclaration", 53);
	    int annotationMethodDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotationMethodDeclaration");
		DebugLocation(974, 8);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:975:5: ( modifiers type IDENTIFIER '(' ')' ( 'default' elementValue )? ';' )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:975:9: modifiers type IDENTIFIER '(' ')' ( 'default' elementValue )? ';'
			{
			DebugLocation(975, 9);
			PushFollow(Follow._modifiers_in_annotationMethodDeclaration4100);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(975, 19);
			PushFollow(Follow._type_in_annotationMethodDeclaration4102);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(975, 24);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_annotationMethodDeclaration4104); if (state.failed) return;
			DebugLocation(976, 9);
			Match(input,LPAREN,Follow._LPAREN_in_annotationMethodDeclaration4114); if (state.failed) return;
			DebugLocation(976, 13);
			Match(input,RPAREN,Follow._RPAREN_in_annotationMethodDeclaration4116); if (state.failed) return;
			DebugLocation(976, 17);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:976:17: ( 'default' elementValue )?
			int alt89=2;
			try { DebugEnterSubRule(89);
			try { DebugEnterDecision(89, decisionCanBacktrack[89]);
			int LA89_1 = input.LA(1);

			if ((LA89_1==DEFAULT))
			{
				alt89 = 1;
			}
			} finally { DebugExitDecision(89); }
			switch (alt89)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:976:18: 'default' elementValue
				{
				DebugLocation(976, 18);
				Match(input,DEFAULT,Follow._DEFAULT_in_annotationMethodDeclaration4119); if (state.failed) return;
				DebugLocation(976, 28);
				PushFollow(Follow._elementValue_in_annotationMethodDeclaration4121);
				elementValue();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(89); }

			DebugLocation(978, 9);
			Match(input,SEMI,Follow._SEMI_in_annotationMethodDeclaration4150); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotationMethodDeclaration", 53);
			LeaveRule("annotationMethodDeclaration", 53);
			LeaveRule_annotationMethodDeclaration();
	        if (state.backtracking > 0) { Memoize(input, 53, annotationMethodDeclaration_StartIndex); }

	    }
	 	DebugLocation(979, 8);
		} finally { DebugExitRule(GrammarFileName, "annotationMethodDeclaration"); }
		return;

	}
	// $ANTLR end "annotationMethodDeclaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_block() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_block() {}
	// $ANTLR start "block"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:981:1: block : '{' ( blockStatement )* '}' ;
	[GrammarRule("block")]
	private void block()
	{
		EnterRule_block();
		EnterRule("block", 54);
		TraceIn("block", 54);
	    int block_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(981, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:982:5: ( '{' ( blockStatement )* '}' )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:982:9: '{' ( blockStatement )* '}'
			{
			DebugLocation(982, 9);
			Match(input,LBRACE,Follow._LBRACE_in_block4174); if (state.failed) return;
			DebugLocation(983, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:983:9: ( blockStatement )*
			try { DebugEnterSubRule(90);
			while (true)
			{
				int alt90=2;
				try { DebugEnterDecision(90, decisionCanBacktrack[90]);
				int LA90_1 = input.LA(1);

				if ((LA90_1==ABSTRACT||(LA90_1>=ASSERT && LA90_1<=BANG)||(LA90_1>=BOOLEAN && LA90_1<=BYTE)||(LA90_1>=CHAR && LA90_1<=CLASS)||LA90_1==CONTINUE||LA90_1==DO||(LA90_1>=DOUBLE && LA90_1<=DOUBLELITERAL)||LA90_1==ENUM||(LA90_1>=FALSE && LA90_1<=FINAL)||(LA90_1>=FLOAT && LA90_1<=FOR)||(LA90_1>=IDENTIFIER && LA90_1<=IF)||(LA90_1>=INT && LA90_1<=INTLITERAL)||LA90_1==LBRACE||(LA90_1>=LONG && LA90_1<=LT)||(LA90_1>=MONKEYS_AT && LA90_1<=NULL)||LA90_1==PLUS||(LA90_1>=PLUSPLUS && LA90_1<=PUBLIC)||LA90_1==RETURN||(LA90_1>=SEMI && LA90_1<=SHORT)||(LA90_1>=STATIC && LA90_1<=SUB)||(LA90_1>=SUBSUB && LA90_1<=SYNCHRONIZED)||(LA90_1>=THIS && LA90_1<=THROW)||(LA90_1>=TILDE && LA90_1<=WHILE)))
				{
					alt90 = 1;
				}


				} finally { DebugExitDecision(90); }
				switch ( alt90 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:983:10: blockStatement
					{
					DebugLocation(983, 10);
					PushFollow(Follow._blockStatement_in_block4185);
					blockStatement();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop90;
				}
			}

			loop90:
				;

			} finally { DebugExitSubRule(90); }

			DebugLocation(985, 9);
			Match(input,RBRACE,Follow._RBRACE_in_block4206); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("block", 54);
			LeaveRule("block", 54);
			LeaveRule_block();
	        if (state.backtracking > 0) { Memoize(input, 54, block_StartIndex); }

	    }
	 	DebugLocation(986, 4);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return;

	}
	// $ANTLR end "block"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_blockStatement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_blockStatement() {}
	// $ANTLR start "blockStatement"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1012:1: blockStatement : ( localVariableDeclarationStatement | classOrInterfaceDeclaration | statement );
	[GrammarRule("blockStatement")]
	private void blockStatement()
	{
		EnterRule_blockStatement();
		EnterRule("blockStatement", 55);
		TraceIn("blockStatement", 55);
	    int blockStatement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "blockStatement");
		DebugLocation(1012, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1013:5: ( localVariableDeclarationStatement | classOrInterfaceDeclaration | statement )
			int alt91=3;
			try { DebugEnterDecision(91, decisionCanBacktrack[91]);
			switch (input.LA(1))
			{
			case FINAL:
				{
				int LA91_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt91 = 1;
				}
				else if ((EvaluatePredicate(synpred126_Java_fragment)))
				{
					alt91 = 2;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 91, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case MONKEYS_AT:
				{
				int LA91_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt91 = 1;
				}
				else if ((EvaluatePredicate(synpred126_Java_fragment)))
				{
					alt91 = 2;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 91, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case IDENTIFIER:
				{
				int LA91_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt91 = 1;
				}
				else if ((true))
				{
					alt91 = 3;
				}

				}
				break;
			case BOOLEAN:
				{
				int LA91_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt91 = 1;
				}
				else if ((true))
				{
					alt91 = 3;
				}

				}
				break;
			case CHAR:
				{
				int LA91_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt91 = 1;
				}
				else if ((true))
				{
					alt91 = 3;
				}

				}
				break;
			case BYTE:
				{
				int LA91_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt91 = 1;
				}
				else if ((true))
				{
					alt91 = 3;
				}

				}
				break;
			case SHORT:
				{
				int LA91_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt91 = 1;
				}
				else if ((true))
				{
					alt91 = 3;
				}

				}
				break;
			case INT:
				{
				int LA91_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt91 = 1;
				}
				else if ((true))
				{
					alt91 = 3;
				}

				}
				break;
			case LONG:
				{
				int LA91_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt91 = 1;
				}
				else if ((true))
				{
					alt91 = 3;
				}

				}
				break;
			case FLOAT:
				{
				int LA91_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt91 = 1;
				}
				else if ((true))
				{
					alt91 = 3;
				}

				}
				break;
			case DOUBLE:
				{
				int LA91_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt91 = 1;
				}
				else if ((true))
				{
					alt91 = 3;
				}

				}
				break;
			case ABSTRACT:
			case CLASS:
			case ENUM:
			case INTERFACE:
			case NATIVE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case STATIC:
			case STRICTFP:
			case TRANSIENT:
			case VOLATILE:
				{
				alt91 = 2;
				}
				break;
			case SYNCHRONIZED:
				{
				int LA91_2 = input.LA(2);

				if ((EvaluatePredicate(synpred126_Java_fragment)))
				{
					alt91 = 2;
				}
				else if ((true))
				{
					alt91 = 3;
				}

				}
				break;
			case ASSERT:
			case BANG:
			case BREAK:
			case CHARLITERAL:
			case CONTINUE:
			case DO:
			case DOUBLELITERAL:
			case FALSE:
			case FLOATLITERAL:
			case FOR:
			case IF:
			case INTLITERAL:
			case LBRACE:
			case LONGLITERAL:
			case LPAREN:
			case NEW:
			case NULL:
			case PLUS:
			case PLUSPLUS:
			case RETURN:
			case SEMI:
			case STRINGLITERAL:
			case SUB:
			case SUBSUB:
			case SUPER:
			case SWITCH:
			case THIS:
			case THROW:
			case TILDE:
			case TRUE:
			case TRY:
			case VOID:
			case WHILE:
				{
				alt91 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 91, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(91); }
			switch (alt91)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1013:9: localVariableDeclarationStatement
				{
				DebugLocation(1013, 9);
				PushFollow(Follow._localVariableDeclarationStatement_in_blockStatement4228);
				localVariableDeclarationStatement();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1014:9: classOrInterfaceDeclaration
				{
				DebugLocation(1014, 9);
				PushFollow(Follow._classOrInterfaceDeclaration_in_blockStatement4238);
				classOrInterfaceDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1015:9: statement
				{
				DebugLocation(1015, 9);
				PushFollow(Follow._statement_in_blockStatement4248);
				statement();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("blockStatement", 55);
			LeaveRule("blockStatement", 55);
			LeaveRule_blockStatement();
	        if (state.backtracking > 0) { Memoize(input, 55, blockStatement_StartIndex); }

	    }
	 	DebugLocation(1016, 4);
		} finally { DebugExitRule(GrammarFileName, "blockStatement"); }
		return;

	}
	// $ANTLR end "blockStatement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_localVariableDeclarationStatement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_localVariableDeclarationStatement() {}
	// $ANTLR start "localVariableDeclarationStatement"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1019:1: localVariableDeclarationStatement : localVariableDeclaration ';' ;
	[GrammarRule("localVariableDeclarationStatement")]
	private void localVariableDeclarationStatement()
	{
		EnterRule_localVariableDeclarationStatement();
		EnterRule("localVariableDeclarationStatement", 56);
		TraceIn("localVariableDeclarationStatement", 56);
	    int localVariableDeclarationStatement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "localVariableDeclarationStatement");
		DebugLocation(1019, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1020:5: ( localVariableDeclaration ';' )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1020:9: localVariableDeclaration ';'
			{
			DebugLocation(1020, 9);
			PushFollow(Follow._localVariableDeclaration_in_localVariableDeclarationStatement4269);
			localVariableDeclaration();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1021, 9);
			Match(input,SEMI,Follow._SEMI_in_localVariableDeclarationStatement4279); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("localVariableDeclarationStatement", 56);
			LeaveRule("localVariableDeclarationStatement", 56);
			LeaveRule_localVariableDeclarationStatement();
	        if (state.backtracking > 0) { Memoize(input, 56, localVariableDeclarationStatement_StartIndex); }

	    }
	 	DebugLocation(1022, 4);
		} finally { DebugExitRule(GrammarFileName, "localVariableDeclarationStatement"); }
		return;

	}
	// $ANTLR end "localVariableDeclarationStatement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_localVariableDeclaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_localVariableDeclaration() {}
	// $ANTLR start "localVariableDeclaration"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1024:1: localVariableDeclaration : variableModifiers type variableDeclarator ( ',' variableDeclarator )* ;
	[GrammarRule("localVariableDeclaration")]
	private void localVariableDeclaration()
	{
		EnterRule_localVariableDeclaration();
		EnterRule("localVariableDeclaration", 57);
		TraceIn("localVariableDeclaration", 57);
	    int localVariableDeclaration_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "localVariableDeclaration");
		DebugLocation(1024, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1025:5: ( variableModifiers type variableDeclarator ( ',' variableDeclarator )* )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1025:9: variableModifiers type variableDeclarator ( ',' variableDeclarator )*
			{
			DebugLocation(1025, 9);
			PushFollow(Follow._variableModifiers_in_localVariableDeclaration4299);
			variableModifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1025, 27);
			PushFollow(Follow._type_in_localVariableDeclaration4301);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1026, 9);
			PushFollow(Follow._variableDeclarator_in_localVariableDeclaration4311);
			variableDeclarator();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1027, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1027:9: ( ',' variableDeclarator )*
			try { DebugEnterSubRule(92);
			while (true)
			{
				int alt92=2;
				try { DebugEnterDecision(92, decisionCanBacktrack[92]);
				int LA92_1 = input.LA(1);

				if ((LA92_1==COMMA))
				{
					alt92 = 1;
				}


				} finally { DebugExitDecision(92); }
				switch ( alt92 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1027:10: ',' variableDeclarator
					{
					DebugLocation(1027, 10);
					Match(input,COMMA,Follow._COMMA_in_localVariableDeclaration4322); if (state.failed) return;
					DebugLocation(1027, 14);
					PushFollow(Follow._variableDeclarator_in_localVariableDeclaration4324);
					variableDeclarator();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop92;
				}
			}

			loop92:
				;

			} finally { DebugExitSubRule(92); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("localVariableDeclaration", 57);
			LeaveRule("localVariableDeclaration", 57);
			LeaveRule_localVariableDeclaration();
	        if (state.backtracking > 0) { Memoize(input, 57, localVariableDeclaration_StartIndex); }

	    }
	 	DebugLocation(1029, 4);
		} finally { DebugExitRule(GrammarFileName, "localVariableDeclaration"); }
		return;

	}
	// $ANTLR end "localVariableDeclaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_statement() {}
	// $ANTLR start "statement"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1031:1: statement : ( block | ( 'assert' ) expression ( ':' expression )? ';' | 'assert' expression ( ':' expression )? ';' | 'if' parExpression statement ( 'else' statement )? | forstatement | 'while' parExpression statement | 'do' statement 'while' parExpression ';' | trystatement | 'switch' parExpression '{' switchBlockStatementGroups '}' | 'synchronized' parExpression block | 'return' ( expression )? ';' | 'throw' expression ';' | 'break' ( IDENTIFIER )? ';' | 'continue' ( IDENTIFIER )? ';' | expression ';' | IDENTIFIER ':' statement | ';' );
	[GrammarRule("statement")]
	private void statement()
	{
		EnterRule_statement();
		EnterRule("statement", 58);
		TraceIn("statement", 58);
	    int statement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(1031, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1032:5: ( block | ( 'assert' ) expression ( ':' expression )? ';' | 'assert' expression ( ':' expression )? ';' | 'if' parExpression statement ( 'else' statement )? | forstatement | 'while' parExpression statement | 'do' statement 'while' parExpression ';' | trystatement | 'switch' parExpression '{' switchBlockStatementGroups '}' | 'synchronized' parExpression block | 'return' ( expression )? ';' | 'throw' expression ';' | 'break' ( IDENTIFIER )? ';' | 'continue' ( IDENTIFIER )? ';' | expression ';' | IDENTIFIER ':' statement | ';' )
			int alt99=17;
			try { DebugEnterDecision(99, decisionCanBacktrack[99]);
			switch (input.LA(1))
			{
			case LBRACE:
				{
				alt99 = 1;
				}
				break;
			case ASSERT:
				{
				int LA99_2 = input.LA(2);

				if ((EvaluatePredicate(synpred130_Java_fragment)))
				{
					alt99 = 2;
				}
				else if ((EvaluatePredicate(synpred132_Java_fragment)))
				{
					alt99 = 3;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 99, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case IF:
				{
				alt99 = 4;
				}
				break;
			case FOR:
				{
				alt99 = 5;
				}
				break;
			case WHILE:
				{
				alt99 = 6;
				}
				break;
			case DO:
				{
				alt99 = 7;
				}
				break;
			case TRY:
				{
				alt99 = 8;
				}
				break;
			case SWITCH:
				{
				alt99 = 9;
				}
				break;
			case SYNCHRONIZED:
				{
				alt99 = 10;
				}
				break;
			case RETURN:
				{
				alt99 = 11;
				}
				break;
			case THROW:
				{
				alt99 = 12;
				}
				break;
			case BREAK:
				{
				alt99 = 13;
				}
				break;
			case CONTINUE:
				{
				alt99 = 14;
				}
				break;
			case BANG:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CHARLITERAL:
			case DOUBLE:
			case DOUBLELITERAL:
			case FALSE:
			case FLOAT:
			case FLOATLITERAL:
			case INT:
			case INTLITERAL:
			case LONG:
			case LONGLITERAL:
			case LPAREN:
			case NEW:
			case NULL:
			case PLUS:
			case PLUSPLUS:
			case SHORT:
			case STRINGLITERAL:
			case SUB:
			case SUBSUB:
			case SUPER:
			case THIS:
			case TILDE:
			case TRUE:
			case VOID:
				{
				alt99 = 15;
				}
				break;
			case IDENTIFIER:
				{
				int LA99_2 = input.LA(2);

				if ((EvaluatePredicate(synpred148_Java_fragment)))
				{
					alt99 = 15;
				}
				else if ((EvaluatePredicate(synpred149_Java_fragment)))
				{
					alt99 = 16;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 99, 22, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case SEMI:
				{
				alt99 = 17;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 99, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(99); }
			switch (alt99)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1032:9: block
				{
				DebugLocation(1032, 9);
				PushFollow(Follow._block_in_statement4355);
				block();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1034:9: ( 'assert' ) expression ( ':' expression )? ';'
				{
				DebugLocation(1034, 9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1034:9: ( 'assert' )
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1034:10: 'assert'
				{
				DebugLocation(1034, 10);
				Match(input,ASSERT,Follow._ASSERT_in_statement4379); if (state.failed) return;

				}

				DebugLocation(1036, 9);
				PushFollow(Follow._expression_in_statement4399);
				expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1036, 20);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1036:20: ( ':' expression )?
				int alt93=2;
				try { DebugEnterSubRule(93);
				try { DebugEnterDecision(93, decisionCanBacktrack[93]);
				int LA93_1 = input.LA(1);

				if ((LA93_1==COLON))
				{
					alt93 = 1;
				}
				} finally { DebugExitDecision(93); }
				switch (alt93)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1036:21: ':' expression
					{
					DebugLocation(1036, 21);
					Match(input,COLON,Follow._COLON_in_statement4402); if (state.failed) return;
					DebugLocation(1036, 25);
					PushFollow(Follow._expression_in_statement4404);
					expression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(93); }

				DebugLocation(1036, 38);
				Match(input,SEMI,Follow._SEMI_in_statement4408); if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1037:9: 'assert' expression ( ':' expression )? ';'
				{
				DebugLocation(1037, 9);
				Match(input,ASSERT,Follow._ASSERT_in_statement4418); if (state.failed) return;
				DebugLocation(1037, 19);
				PushFollow(Follow._expression_in_statement4421);
				expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1037, 30);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1037:30: ( ':' expression )?
				int alt94=2;
				try { DebugEnterSubRule(94);
				try { DebugEnterDecision(94, decisionCanBacktrack[94]);
				int LA94_1 = input.LA(1);

				if ((LA94_1==COLON))
				{
					alt94 = 1;
				}
				} finally { DebugExitDecision(94); }
				switch (alt94)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1037:31: ':' expression
					{
					DebugLocation(1037, 31);
					Match(input,COLON,Follow._COLON_in_statement4424); if (state.failed) return;
					DebugLocation(1037, 35);
					PushFollow(Follow._expression_in_statement4426);
					expression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(94); }

				DebugLocation(1037, 48);
				Match(input,SEMI,Follow._SEMI_in_statement4430); if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1038:9: 'if' parExpression statement ( 'else' statement )?
				{
				DebugLocation(1038, 9);
				Match(input,IF,Follow._IF_in_statement4452); if (state.failed) return;
				DebugLocation(1038, 14);
				PushFollow(Follow._parExpression_in_statement4454);
				parExpression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1038, 28);
				PushFollow(Follow._statement_in_statement4456);
				statement();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1038, 38);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1038:38: ( 'else' statement )?
				int alt95=2;
				try { DebugEnterSubRule(95);
				try { DebugEnterDecision(95, decisionCanBacktrack[95]);
				int LA95_1 = input.LA(1);

				if ((LA95_1==ELSE))
				{
					int LA95_2 = input.LA(2);

					if ((EvaluatePredicate(synpred133_Java_fragment)))
					{
						alt95 = 1;
					}
				}
				} finally { DebugExitDecision(95); }
				switch (alt95)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1038:39: 'else' statement
					{
					DebugLocation(1038, 39);
					Match(input,ELSE,Follow._ELSE_in_statement4459); if (state.failed) return;
					DebugLocation(1038, 46);
					PushFollow(Follow._statement_in_statement4461);
					statement();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(95); }


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1039:9: forstatement
				{
				DebugLocation(1039, 9);
				PushFollow(Follow._forstatement_in_statement4483);
				forstatement();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1040:9: 'while' parExpression statement
				{
				DebugLocation(1040, 9);
				Match(input,WHILE,Follow._WHILE_in_statement4493); if (state.failed) return;
				DebugLocation(1040, 17);
				PushFollow(Follow._parExpression_in_statement4495);
				parExpression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1040, 31);
				PushFollow(Follow._statement_in_statement4497);
				statement();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1041:9: 'do' statement 'while' parExpression ';'
				{
				DebugLocation(1041, 9);
				Match(input,DO,Follow._DO_in_statement4507); if (state.failed) return;
				DebugLocation(1041, 14);
				PushFollow(Follow._statement_in_statement4509);
				statement();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1041, 24);
				Match(input,WHILE,Follow._WHILE_in_statement4511); if (state.failed) return;
				DebugLocation(1041, 32);
				PushFollow(Follow._parExpression_in_statement4513);
				parExpression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1041, 46);
				Match(input,SEMI,Follow._SEMI_in_statement4515); if (state.failed) return;

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1042:9: trystatement
				{
				DebugLocation(1042, 9);
				PushFollow(Follow._trystatement_in_statement4525);
				trystatement();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1043:9: 'switch' parExpression '{' switchBlockStatementGroups '}'
				{
				DebugLocation(1043, 9);
				Match(input,SWITCH,Follow._SWITCH_in_statement4535); if (state.failed) return;
				DebugLocation(1043, 18);
				PushFollow(Follow._parExpression_in_statement4537);
				parExpression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1043, 32);
				Match(input,LBRACE,Follow._LBRACE_in_statement4539); if (state.failed) return;
				DebugLocation(1043, 36);
				PushFollow(Follow._switchBlockStatementGroups_in_statement4541);
				switchBlockStatementGroups();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1043, 63);
				Match(input,RBRACE,Follow._RBRACE_in_statement4543); if (state.failed) return;

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1044:9: 'synchronized' parExpression block
				{
				DebugLocation(1044, 9);
				Match(input,SYNCHRONIZED,Follow._SYNCHRONIZED_in_statement4553); if (state.failed) return;
				DebugLocation(1044, 24);
				PushFollow(Follow._parExpression_in_statement4555);
				parExpression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1044, 38);
				PushFollow(Follow._block_in_statement4557);
				block();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1045:9: 'return' ( expression )? ';'
				{
				DebugLocation(1045, 9);
				Match(input,RETURN,Follow._RETURN_in_statement4567); if (state.failed) return;
				DebugLocation(1045, 18);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1045:18: ( expression )?
				int alt96=2;
				try { DebugEnterSubRule(96);
				try { DebugEnterDecision(96, decisionCanBacktrack[96]);
				int LA96_1 = input.LA(1);

				if ((LA96_1==BANG||LA96_1==BOOLEAN||LA96_1==BYTE||(LA96_1>=CHAR && LA96_1<=CHARLITERAL)||(LA96_1>=DOUBLE && LA96_1<=DOUBLELITERAL)||LA96_1==FALSE||(LA96_1>=FLOAT && LA96_1<=FLOATLITERAL)||LA96_1==IDENTIFIER||LA96_1==INT||LA96_1==INTLITERAL||(LA96_1>=LONG && LA96_1<=LPAREN)||(LA96_1>=NEW && LA96_1<=NULL)||LA96_1==PLUS||LA96_1==PLUSPLUS||LA96_1==SHORT||(LA96_1>=STRINGLITERAL && LA96_1<=SUB)||(LA96_1>=SUBSUB && LA96_1<=SUPER)||LA96_1==THIS||LA96_1==TILDE||LA96_1==TRUE||LA96_1==VOID))
				{
					alt96 = 1;
				}
				} finally { DebugExitDecision(96); }
				switch (alt96)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1045:19: expression
					{
					DebugLocation(1045, 19);
					PushFollow(Follow._expression_in_statement4570);
					expression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(96); }

				DebugLocation(1045, 33);
				Match(input,SEMI,Follow._SEMI_in_statement4575); if (state.failed) return;

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1046:9: 'throw' expression ';'
				{
				DebugLocation(1046, 9);
				Match(input,THROW,Follow._THROW_in_statement4585); if (state.failed) return;
				DebugLocation(1046, 17);
				PushFollow(Follow._expression_in_statement4587);
				expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1046, 28);
				Match(input,SEMI,Follow._SEMI_in_statement4589); if (state.failed) return;

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1047:9: 'break' ( IDENTIFIER )? ';'
				{
				DebugLocation(1047, 9);
				Match(input,BREAK,Follow._BREAK_in_statement4599); if (state.failed) return;
				DebugLocation(1048, 13);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1048:13: ( IDENTIFIER )?
				int alt97=2;
				try { DebugEnterSubRule(97);
				try { DebugEnterDecision(97, decisionCanBacktrack[97]);
				int LA97_1 = input.LA(1);

				if ((LA97_1==IDENTIFIER))
				{
					alt97 = 1;
				}
				} finally { DebugExitDecision(97); }
				switch (alt97)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1048:14: IDENTIFIER
					{
					DebugLocation(1048, 14);
					Match(input,IDENTIFIER,Follow._IDENTIFIER_in_statement4614); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(97); }

				DebugLocation(1049, 16);
				Match(input,SEMI,Follow._SEMI_in_statement4631); if (state.failed) return;

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1050:9: 'continue' ( IDENTIFIER )? ';'
				{
				DebugLocation(1050, 9);
				Match(input,CONTINUE,Follow._CONTINUE_in_statement4641); if (state.failed) return;
				DebugLocation(1051, 13);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1051:13: ( IDENTIFIER )?
				int alt98=2;
				try { DebugEnterSubRule(98);
				try { DebugEnterDecision(98, decisionCanBacktrack[98]);
				int LA98_1 = input.LA(1);

				if ((LA98_1==IDENTIFIER))
				{
					alt98 = 1;
				}
				} finally { DebugExitDecision(98); }
				switch (alt98)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1051:14: IDENTIFIER
					{
					DebugLocation(1051, 14);
					Match(input,IDENTIFIER,Follow._IDENTIFIER_in_statement4656); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(98); }

				DebugLocation(1052, 16);
				Match(input,SEMI,Follow._SEMI_in_statement4673); if (state.failed) return;

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1053:9: expression ';'
				{
				DebugLocation(1053, 9);
				PushFollow(Follow._expression_in_statement4683);
				expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1053, 21);
				Match(input,SEMI,Follow._SEMI_in_statement4686); if (state.failed) return;

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1054:9: IDENTIFIER ':' statement
				{
				DebugLocation(1054, 9);
				Match(input,IDENTIFIER,Follow._IDENTIFIER_in_statement4701); if (state.failed) return;
				DebugLocation(1054, 20);
				Match(input,COLON,Follow._COLON_in_statement4703); if (state.failed) return;
				DebugLocation(1054, 24);
				PushFollow(Follow._statement_in_statement4705);
				statement();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1055:9: ';'
				{
				DebugLocation(1055, 9);
				Match(input,SEMI,Follow._SEMI_in_statement4715); if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("statement", 58);
			LeaveRule("statement", 58);
			LeaveRule_statement();
	        if (state.backtracking > 0) { Memoize(input, 58, statement_StartIndex); }

	    }
	 	DebugLocation(1057, 4);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return;

	}
	// $ANTLR end "statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_switchBlockStatementGroups() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_switchBlockStatementGroups() {}
	// $ANTLR start "switchBlockStatementGroups"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1059:1: switchBlockStatementGroups : ( switchBlockStatementGroup )* ;
	[GrammarRule("switchBlockStatementGroups")]
	private void switchBlockStatementGroups()
	{
		EnterRule_switchBlockStatementGroups();
		EnterRule("switchBlockStatementGroups", 59);
		TraceIn("switchBlockStatementGroups", 59);
	    int switchBlockStatementGroups_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "switchBlockStatementGroups");
		DebugLocation(1059, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1060:5: ( ( switchBlockStatementGroup )* )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1060:9: ( switchBlockStatementGroup )*
			{
			DebugLocation(1060, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1060:9: ( switchBlockStatementGroup )*
			try { DebugEnterSubRule(100);
			while (true)
			{
				int alt100=2;
				try { DebugEnterDecision(100, decisionCanBacktrack[100]);
				int LA100_1 = input.LA(1);

				if ((LA100_1==CASE||LA100_1==DEFAULT))
				{
					alt100 = 1;
				}


				} finally { DebugExitDecision(100); }
				switch ( alt100 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1060:10: switchBlockStatementGroup
					{
					DebugLocation(1060, 10);
					PushFollow(Follow._switchBlockStatementGroup_in_switchBlockStatementGroups4737);
					switchBlockStatementGroup();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop100;
				}
			}

			loop100:
				;

			} finally { DebugExitSubRule(100); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("switchBlockStatementGroups", 59);
			LeaveRule("switchBlockStatementGroups", 59);
			LeaveRule_switchBlockStatementGroups();
	        if (state.backtracking > 0) { Memoize(input, 59, switchBlockStatementGroups_StartIndex); }

	    }
	 	DebugLocation(1061, 4);
		} finally { DebugExitRule(GrammarFileName, "switchBlockStatementGroups"); }
		return;

	}
	// $ANTLR end "switchBlockStatementGroups"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_switchBlockStatementGroup() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_switchBlockStatementGroup() {}
	// $ANTLR start "switchBlockStatementGroup"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1063:1: switchBlockStatementGroup : switchLabel ( blockStatement )* ;
	[GrammarRule("switchBlockStatementGroup")]
	private void switchBlockStatementGroup()
	{
		EnterRule_switchBlockStatementGroup();
		EnterRule("switchBlockStatementGroup", 60);
		TraceIn("switchBlockStatementGroup", 60);
	    int switchBlockStatementGroup_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "switchBlockStatementGroup");
		DebugLocation(1063, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 60)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1064:5: ( switchLabel ( blockStatement )* )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1065:9: switchLabel ( blockStatement )*
			{
			DebugLocation(1065, 9);
			PushFollow(Follow._switchLabel_in_switchBlockStatementGroup4766);
			switchLabel();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1066, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1066:9: ( blockStatement )*
			try { DebugEnterSubRule(101);
			while (true)
			{
				int alt101=2;
				try { DebugEnterDecision(101, decisionCanBacktrack[101]);
				int LA101_1 = input.LA(1);

				if ((LA101_1==ABSTRACT||(LA101_1>=ASSERT && LA101_1<=BANG)||(LA101_1>=BOOLEAN && LA101_1<=BYTE)||(LA101_1>=CHAR && LA101_1<=CLASS)||LA101_1==CONTINUE||LA101_1==DO||(LA101_1>=DOUBLE && LA101_1<=DOUBLELITERAL)||LA101_1==ENUM||(LA101_1>=FALSE && LA101_1<=FINAL)||(LA101_1>=FLOAT && LA101_1<=FOR)||(LA101_1>=IDENTIFIER && LA101_1<=IF)||(LA101_1>=INT && LA101_1<=INTLITERAL)||LA101_1==LBRACE||(LA101_1>=LONG && LA101_1<=LT)||(LA101_1>=MONKEYS_AT && LA101_1<=NULL)||LA101_1==PLUS||(LA101_1>=PLUSPLUS && LA101_1<=PUBLIC)||LA101_1==RETURN||(LA101_1>=SEMI && LA101_1<=SHORT)||(LA101_1>=STATIC && LA101_1<=SUB)||(LA101_1>=SUBSUB && LA101_1<=SYNCHRONIZED)||(LA101_1>=THIS && LA101_1<=THROW)||(LA101_1>=TILDE && LA101_1<=WHILE)))
				{
					alt101 = 1;
				}


				} finally { DebugExitDecision(101); }
				switch ( alt101 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1066:10: blockStatement
					{
					DebugLocation(1066, 10);
					PushFollow(Follow._blockStatement_in_switchBlockStatementGroup4777);
					blockStatement();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop101;
				}
			}

			loop101:
				;

			} finally { DebugExitSubRule(101); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("switchBlockStatementGroup", 60);
			LeaveRule("switchBlockStatementGroup", 60);
			LeaveRule_switchBlockStatementGroup();
	        if (state.backtracking > 0) { Memoize(input, 60, switchBlockStatementGroup_StartIndex); }

	    }
	 	DebugLocation(1068, 4);
		} finally { DebugExitRule(GrammarFileName, "switchBlockStatementGroup"); }
		return;

	}
	// $ANTLR end "switchBlockStatementGroup"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_switchLabel() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_switchLabel() {}
	// $ANTLR start "switchLabel"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1070:1: switchLabel : ( 'case' expression ':' | 'default' ':' );
	[GrammarRule("switchLabel")]
	private void switchLabel()
	{
		EnterRule_switchLabel();
		EnterRule("switchLabel", 61);
		TraceIn("switchLabel", 61);
	    int switchLabel_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "switchLabel");
		DebugLocation(1070, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 61)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1071:5: ( 'case' expression ':' | 'default' ':' )
			int alt102=2;
			try { DebugEnterDecision(102, decisionCanBacktrack[102]);
			int LA102_1 = input.LA(1);

			if ((LA102_1==CASE))
			{
				alt102 = 1;
			}
			else if ((LA102_1==DEFAULT))
			{
				alt102 = 2;
			}

			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 102, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}

			} finally { DebugExitDecision(102); }
			switch (alt102)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1071:9: 'case' expression ':'
				{
				DebugLocation(1071, 9);
				Match(input,CASE,Follow._CASE_in_switchLabel4808); if (state.failed) return;
				DebugLocation(1071, 16);
				PushFollow(Follow._expression_in_switchLabel4810);
				expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1071, 27);
				Match(input,COLON,Follow._COLON_in_switchLabel4812); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1072:9: 'default' ':'
				{
				DebugLocation(1072, 9);
				Match(input,DEFAULT,Follow._DEFAULT_in_switchLabel4822); if (state.failed) return;
				DebugLocation(1072, 19);
				Match(input,COLON,Follow._COLON_in_switchLabel4824); if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("switchLabel", 61);
			LeaveRule("switchLabel", 61);
			LeaveRule_switchLabel();
	        if (state.backtracking > 0) { Memoize(input, 61, switchLabel_StartIndex); }

	    }
	 	DebugLocation(1073, 4);
		} finally { DebugExitRule(GrammarFileName, "switchLabel"); }
		return;

	}
	// $ANTLR end "switchLabel"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_trystatement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_trystatement() {}
	// $ANTLR start "trystatement"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1076:1: trystatement : 'try' block ( catches 'finally' block | catches | 'finally' block ) ;
	[GrammarRule("trystatement")]
	private void trystatement()
	{
		EnterRule_trystatement();
		EnterRule("trystatement", 62);
		TraceIn("trystatement", 62);
	    int trystatement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "trystatement");
		DebugLocation(1076, 5);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 62)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1077:5: ( 'try' block ( catches 'finally' block | catches | 'finally' block ) )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1077:9: 'try' block ( catches 'finally' block | catches | 'finally' block )
			{
			DebugLocation(1077, 9);
			Match(input,TRY,Follow._TRY_in_trystatement4845); if (state.failed) return;
			DebugLocation(1077, 15);
			PushFollow(Follow._block_in_trystatement4847);
			block();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1078, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1078:9: ( catches 'finally' block | catches | 'finally' block )
			int alt103=3;
			try { DebugEnterSubRule(103);
			try { DebugEnterDecision(103, decisionCanBacktrack[103]);
			int LA103_1 = input.LA(1);

			if ((LA103_1==CATCH))
			{
				int LA103_2 = input.LA(2);

				if ((EvaluatePredicate(synpred153_Java_fragment)))
				{
					alt103 = 1;
				}
				else if ((EvaluatePredicate(synpred154_Java_fragment)))
				{
					alt103 = 2;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 103, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

			}
			else if ((LA103_1==FINALLY))
			{
				alt103 = 3;
			}

			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 103, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}

			} finally { DebugExitDecision(103); }
			switch (alt103)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1078:13: catches 'finally' block
				{
				DebugLocation(1078, 13);
				PushFollow(Follow._catches_in_trystatement4861);
				catches();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1078, 21);
				Match(input,FINALLY,Follow._FINALLY_in_trystatement4863); if (state.failed) return;
				DebugLocation(1078, 31);
				PushFollow(Follow._block_in_trystatement4865);
				block();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1079:13: catches
				{
				DebugLocation(1079, 13);
				PushFollow(Follow._catches_in_trystatement4879);
				catches();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1080:13: 'finally' block
				{
				DebugLocation(1080, 13);
				Match(input,FINALLY,Follow._FINALLY_in_trystatement4893); if (state.failed) return;
				DebugLocation(1080, 23);
				PushFollow(Follow._block_in_trystatement4895);
				block();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(103); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("trystatement", 62);
			LeaveRule("trystatement", 62);
			LeaveRule_trystatement();
	        if (state.backtracking > 0) { Memoize(input, 62, trystatement_StartIndex); }

	    }
	 	DebugLocation(1082, 5);
		} finally { DebugExitRule(GrammarFileName, "trystatement"); }
		return;

	}
	// $ANTLR end "trystatement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_catches() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_catches() {}
	// $ANTLR start "catches"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1084:1: catches : catchClause ( catchClause )* ;
	[GrammarRule("catches")]
	private void catches()
	{
		EnterRule_catches();
		EnterRule("catches", 63);
		TraceIn("catches", 63);
	    int catches_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "catches");
		DebugLocation(1084, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 63)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1085:5: ( catchClause ( catchClause )* )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1085:9: catchClause ( catchClause )*
			{
			DebugLocation(1085, 9);
			PushFollow(Follow._catchClause_in_catches4926);
			catchClause();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1086, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1086:9: ( catchClause )*
			try { DebugEnterSubRule(104);
			while (true)
			{
				int alt104=2;
				try { DebugEnterDecision(104, decisionCanBacktrack[104]);
				int LA104_1 = input.LA(1);

				if ((LA104_1==CATCH))
				{
					alt104 = 1;
				}


				} finally { DebugExitDecision(104); }
				switch ( alt104 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1086:10: catchClause
					{
					DebugLocation(1086, 10);
					PushFollow(Follow._catchClause_in_catches4937);
					catchClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop104;
				}
			}

			loop104:
				;

			} finally { DebugExitSubRule(104); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("catches", 63);
			LeaveRule("catches", 63);
			LeaveRule_catches();
	        if (state.backtracking > 0) { Memoize(input, 63, catches_StartIndex); }

	    }
	 	DebugLocation(1088, 4);
		} finally { DebugExitRule(GrammarFileName, "catches"); }
		return;

	}
	// $ANTLR end "catches"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_catchClause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_catchClause() {}
	// $ANTLR start "catchClause"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1090:1: catchClause : 'catch' '(' formalParameter ')' block ;
	[GrammarRule("catchClause")]
	private void catchClause()
	{
		EnterRule_catchClause();
		EnterRule("catchClause", 64);
		TraceIn("catchClause", 64);
	    int catchClause_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "catchClause");
		DebugLocation(1090, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 64)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1091:5: ( 'catch' '(' formalParameter ')' block )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1091:9: 'catch' '(' formalParameter ')' block
			{
			DebugLocation(1091, 9);
			Match(input,CATCH,Follow._CATCH_in_catchClause4968); if (state.failed) return;
			DebugLocation(1091, 17);
			Match(input,LPAREN,Follow._LPAREN_in_catchClause4970); if (state.failed) return;
			DebugLocation(1091, 21);
			PushFollow(Follow._formalParameter_in_catchClause4972);
			formalParameter();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1092, 9);
			Match(input,RPAREN,Follow._RPAREN_in_catchClause4982); if (state.failed) return;
			DebugLocation(1092, 13);
			PushFollow(Follow._block_in_catchClause4984);
			block();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("catchClause", 64);
			LeaveRule("catchClause", 64);
			LeaveRule_catchClause();
	        if (state.backtracking > 0) { Memoize(input, 64, catchClause_StartIndex); }

	    }
	 	DebugLocation(1093, 4);
		} finally { DebugExitRule(GrammarFileName, "catchClause"); }
		return;

	}
	// $ANTLR end "catchClause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_formalParameter() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_formalParameter() {}
	// $ANTLR start "formalParameter"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1095:1: formalParameter : variableModifiers type IDENTIFIER ( '[' ']' )* ;
	[GrammarRule("formalParameter")]
	private void formalParameter()
	{
		EnterRule_formalParameter();
		EnterRule("formalParameter", 65);
		TraceIn("formalParameter", 65);
	    int formalParameter_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "formalParameter");
		DebugLocation(1095, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 65)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1096:5: ( variableModifiers type IDENTIFIER ( '[' ']' )* )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1096:9: variableModifiers type IDENTIFIER ( '[' ']' )*
			{
			DebugLocation(1096, 9);
			PushFollow(Follow._variableModifiers_in_formalParameter5005);
			variableModifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1096, 27);
			PushFollow(Follow._type_in_formalParameter5007);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1096, 32);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_formalParameter5009); if (state.failed) return;
			DebugLocation(1097, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1097:9: ( '[' ']' )*
			try { DebugEnterSubRule(105);
			while (true)
			{
				int alt105=2;
				try { DebugEnterDecision(105, decisionCanBacktrack[105]);
				int LA105_1 = input.LA(1);

				if ((LA105_1==LBRACKET))
				{
					alt105 = 1;
				}


				} finally { DebugExitDecision(105); }
				switch ( alt105 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1097:10: '[' ']'
					{
					DebugLocation(1097, 10);
					Match(input,LBRACKET,Follow._LBRACKET_in_formalParameter5020); if (state.failed) return;
					DebugLocation(1097, 14);
					Match(input,RBRACKET,Follow._RBRACKET_in_formalParameter5022); if (state.failed) return;

					}
					break;

				default:
					goto loop105;
				}
			}

			loop105:
				;

			} finally { DebugExitSubRule(105); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("formalParameter", 65);
			LeaveRule("formalParameter", 65);
			LeaveRule_formalParameter();
	        if (state.backtracking > 0) { Memoize(input, 65, formalParameter_StartIndex); }

	    }
	 	DebugLocation(1099, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameter"); }
		return;

	}
	// $ANTLR end "formalParameter"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_forstatement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_forstatement() {}
	// $ANTLR start "forstatement"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1101:1: forstatement : ( 'for' '(' variableModifiers type IDENTIFIER ':' expression ')' statement | 'for' '(' ( forInit )? ';' ( expression )? ';' ( expressionList )? ')' statement );
	[GrammarRule("forstatement")]
	private void forstatement()
	{
		EnterRule_forstatement();
		EnterRule("forstatement", 66);
		TraceIn("forstatement", 66);
	    int forstatement_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "forstatement");
		DebugLocation(1101, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 66)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1102:5: ( 'for' '(' variableModifiers type IDENTIFIER ':' expression ')' statement | 'for' '(' ( forInit )? ';' ( expression )? ';' ( expressionList )? ')' statement )
			int alt109=2;
			try { DebugEnterDecision(109, decisionCanBacktrack[109]);
			int LA109_1 = input.LA(1);

			if ((LA109_1==FOR))
			{
				int LA109_2 = input.LA(2);

				if ((EvaluatePredicate(synpred157_Java_fragment)))
				{
					alt109 = 1;
				}
				else if ((true))
				{
					alt109 = 2;
				}

			}

			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 109, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}

			} finally { DebugExitDecision(109); }
			switch (alt109)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1104:9: 'for' '(' variableModifiers type IDENTIFIER ':' expression ')' statement
				{
				DebugLocation(1104, 9);
				Match(input,FOR,Follow._FOR_in_forstatement5071); if (state.failed) return;
				DebugLocation(1104, 15);
				Match(input,LPAREN,Follow._LPAREN_in_forstatement5073); if (state.failed) return;
				DebugLocation(1104, 19);
				PushFollow(Follow._variableModifiers_in_forstatement5075);
				variableModifiers();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1104, 37);
				PushFollow(Follow._type_in_forstatement5077);
				type();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1104, 42);
				Match(input,IDENTIFIER,Follow._IDENTIFIER_in_forstatement5079); if (state.failed) return;
				DebugLocation(1104, 53);
				Match(input,COLON,Follow._COLON_in_forstatement5081); if (state.failed) return;
				DebugLocation(1105, 9);
				PushFollow(Follow._expression_in_forstatement5092);
				expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1105, 20);
				Match(input,RPAREN,Follow._RPAREN_in_forstatement5094); if (state.failed) return;
				DebugLocation(1105, 24);
				PushFollow(Follow._statement_in_forstatement5096);
				statement();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1108:9: 'for' '(' ( forInit )? ';' ( expression )? ';' ( expressionList )? ')' statement
				{
				DebugLocation(1108, 9);
				Match(input,FOR,Follow._FOR_in_forstatement5128); if (state.failed) return;
				DebugLocation(1108, 15);
				Match(input,LPAREN,Follow._LPAREN_in_forstatement5130); if (state.failed) return;
				DebugLocation(1109, 17);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1109:17: ( forInit )?
				int alt106=2;
				try { DebugEnterSubRule(106);
				try { DebugEnterDecision(106, decisionCanBacktrack[106]);
				int LA106_1 = input.LA(1);

				if ((LA106_1==BANG||LA106_1==BOOLEAN||LA106_1==BYTE||(LA106_1>=CHAR && LA106_1<=CHARLITERAL)||(LA106_1>=DOUBLE && LA106_1<=DOUBLELITERAL)||(LA106_1>=FALSE && LA106_1<=FINAL)||(LA106_1>=FLOAT && LA106_1<=FLOATLITERAL)||LA106_1==IDENTIFIER||LA106_1==INT||LA106_1==INTLITERAL||(LA106_1>=LONG && LA106_1<=LPAREN)||LA106_1==MONKEYS_AT||(LA106_1>=NEW && LA106_1<=NULL)||LA106_1==PLUS||LA106_1==PLUSPLUS||LA106_1==SHORT||(LA106_1>=STRINGLITERAL && LA106_1<=SUB)||(LA106_1>=SUBSUB && LA106_1<=SUPER)||LA106_1==THIS||LA106_1==TILDE||LA106_1==TRUE||LA106_1==VOID))
				{
					alt106 = 1;
				}
				} finally { DebugExitDecision(106); }
				switch (alt106)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1109:18: forInit
					{
					DebugLocation(1109, 18);
					PushFollow(Follow._forInit_in_forstatement5150);
					forInit();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(106); }

				DebugLocation(1110, 20);
				Match(input,SEMI,Follow._SEMI_in_forstatement5171); if (state.failed) return;
				DebugLocation(1111, 17);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1111:17: ( expression )?
				int alt107=2;
				try { DebugEnterSubRule(107);
				try { DebugEnterDecision(107, decisionCanBacktrack[107]);
				int LA107_1 = input.LA(1);

				if ((LA107_1==BANG||LA107_1==BOOLEAN||LA107_1==BYTE||(LA107_1>=CHAR && LA107_1<=CHARLITERAL)||(LA107_1>=DOUBLE && LA107_1<=DOUBLELITERAL)||LA107_1==FALSE||(LA107_1>=FLOAT && LA107_1<=FLOATLITERAL)||LA107_1==IDENTIFIER||LA107_1==INT||LA107_1==INTLITERAL||(LA107_1>=LONG && LA107_1<=LPAREN)||(LA107_1>=NEW && LA107_1<=NULL)||LA107_1==PLUS||LA107_1==PLUSPLUS||LA107_1==SHORT||(LA107_1>=STRINGLITERAL && LA107_1<=SUB)||(LA107_1>=SUBSUB && LA107_1<=SUPER)||LA107_1==THIS||LA107_1==TILDE||LA107_1==TRUE||LA107_1==VOID))
				{
					alt107 = 1;
				}
				} finally { DebugExitDecision(107); }
				switch (alt107)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1111:18: expression
					{
					DebugLocation(1111, 18);
					PushFollow(Follow._expression_in_forstatement5191);
					expression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(107); }

				DebugLocation(1112, 20);
				Match(input,SEMI,Follow._SEMI_in_forstatement5212); if (state.failed) return;
				DebugLocation(1113, 17);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1113:17: ( expressionList )?
				int alt108=2;
				try { DebugEnterSubRule(108);
				try { DebugEnterDecision(108, decisionCanBacktrack[108]);
				int LA108_1 = input.LA(1);

				if ((LA108_1==BANG||LA108_1==BOOLEAN||LA108_1==BYTE||(LA108_1>=CHAR && LA108_1<=CHARLITERAL)||(LA108_1>=DOUBLE && LA108_1<=DOUBLELITERAL)||LA108_1==FALSE||(LA108_1>=FLOAT && LA108_1<=FLOATLITERAL)||LA108_1==IDENTIFIER||LA108_1==INT||LA108_1==INTLITERAL||(LA108_1>=LONG && LA108_1<=LPAREN)||(LA108_1>=NEW && LA108_1<=NULL)||LA108_1==PLUS||LA108_1==PLUSPLUS||LA108_1==SHORT||(LA108_1>=STRINGLITERAL && LA108_1<=SUB)||(LA108_1>=SUBSUB && LA108_1<=SUPER)||LA108_1==THIS||LA108_1==TILDE||LA108_1==TRUE||LA108_1==VOID))
				{
					alt108 = 1;
				}
				} finally { DebugExitDecision(108); }
				switch (alt108)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1113:18: expressionList
					{
					DebugLocation(1113, 18);
					PushFollow(Follow._expressionList_in_forstatement5232);
					expressionList();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(108); }

				DebugLocation(1114, 20);
				Match(input,RPAREN,Follow._RPAREN_in_forstatement5253); if (state.failed) return;
				DebugLocation(1114, 24);
				PushFollow(Follow._statement_in_forstatement5255);
				statement();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forstatement", 66);
			LeaveRule("forstatement", 66);
			LeaveRule_forstatement();
	        if (state.backtracking > 0) { Memoize(input, 66, forstatement_StartIndex); }

	    }
	 	DebugLocation(1115, 4);
		} finally { DebugExitRule(GrammarFileName, "forstatement"); }
		return;

	}
	// $ANTLR end "forstatement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_forInit() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_forInit() {}
	// $ANTLR start "forInit"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1117:1: forInit : ( localVariableDeclaration | expressionList );
	[GrammarRule("forInit")]
	private void forInit()
	{
		EnterRule_forInit();
		EnterRule("forInit", 67);
		TraceIn("forInit", 67);
	    int forInit_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "forInit");
		DebugLocation(1117, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 67)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1118:5: ( localVariableDeclaration | expressionList )
			int alt110=2;
			try { DebugEnterDecision(110, decisionCanBacktrack[110]);
			switch (input.LA(1))
			{
			case FINAL:
			case MONKEYS_AT:
				{
				alt110 = 1;
				}
				break;
			case IDENTIFIER:
				{
				int LA110_2 = input.LA(2);

				if ((EvaluatePredicate(synpred161_Java_fragment)))
				{
					alt110 = 1;
				}
				else if ((true))
				{
					alt110 = 2;
				}

				}
				break;
			case BOOLEAN:
				{
				int LA110_2 = input.LA(2);

				if ((EvaluatePredicate(synpred161_Java_fragment)))
				{
					alt110 = 1;
				}
				else if ((true))
				{
					alt110 = 2;
				}

				}
				break;
			case CHAR:
				{
				int LA110_2 = input.LA(2);

				if ((EvaluatePredicate(synpred161_Java_fragment)))
				{
					alt110 = 1;
				}
				else if ((true))
				{
					alt110 = 2;
				}

				}
				break;
			case BYTE:
				{
				int LA110_2 = input.LA(2);

				if ((EvaluatePredicate(synpred161_Java_fragment)))
				{
					alt110 = 1;
				}
				else if ((true))
				{
					alt110 = 2;
				}

				}
				break;
			case SHORT:
				{
				int LA110_2 = input.LA(2);

				if ((EvaluatePredicate(synpred161_Java_fragment)))
				{
					alt110 = 1;
				}
				else if ((true))
				{
					alt110 = 2;
				}

				}
				break;
			case INT:
				{
				int LA110_2 = input.LA(2);

				if ((EvaluatePredicate(synpred161_Java_fragment)))
				{
					alt110 = 1;
				}
				else if ((true))
				{
					alt110 = 2;
				}

				}
				break;
			case LONG:
				{
				int LA110_2 = input.LA(2);

				if ((EvaluatePredicate(synpred161_Java_fragment)))
				{
					alt110 = 1;
				}
				else if ((true))
				{
					alt110 = 2;
				}

				}
				break;
			case FLOAT:
				{
				int LA110_2 = input.LA(2);

				if ((EvaluatePredicate(synpred161_Java_fragment)))
				{
					alt110 = 1;
				}
				else if ((true))
				{
					alt110 = 2;
				}

				}
				break;
			case DOUBLE:
				{
				int LA110_2 = input.LA(2);

				if ((EvaluatePredicate(synpred161_Java_fragment)))
				{
					alt110 = 1;
				}
				else if ((true))
				{
					alt110 = 2;
				}

				}
				break;
			case BANG:
			case CHARLITERAL:
			case DOUBLELITERAL:
			case FALSE:
			case FLOATLITERAL:
			case INTLITERAL:
			case LONGLITERAL:
			case LPAREN:
			case NEW:
			case NULL:
			case PLUS:
			case PLUSPLUS:
			case STRINGLITERAL:
			case SUB:
			case SUBSUB:
			case SUPER:
			case THIS:
			case TILDE:
			case TRUE:
			case VOID:
				{
				alt110 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 110, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(110); }
			switch (alt110)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1118:9: localVariableDeclaration
				{
				DebugLocation(1118, 9);
				PushFollow(Follow._localVariableDeclaration_in_forInit5275);
				localVariableDeclaration();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1119:9: expressionList
				{
				DebugLocation(1119, 9);
				PushFollow(Follow._expressionList_in_forInit5285);
				expressionList();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forInit", 67);
			LeaveRule("forInit", 67);
			LeaveRule_forInit();
	        if (state.backtracking > 0) { Memoize(input, 67, forInit_StartIndex); }

	    }
	 	DebugLocation(1120, 4);
		} finally { DebugExitRule(GrammarFileName, "forInit"); }
		return;

	}
	// $ANTLR end "forInit"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_parExpression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_parExpression() {}
	// $ANTLR start "parExpression"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1122:1: parExpression : '(' expression ')' ;
	[GrammarRule("parExpression")]
	private void parExpression()
	{
		EnterRule_parExpression();
		EnterRule("parExpression", 68);
		TraceIn("parExpression", 68);
	    int parExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "parExpression");
		DebugLocation(1122, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 68)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1123:5: ( '(' expression ')' )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1123:9: '(' expression ')'
			{
			DebugLocation(1123, 9);
			Match(input,LPAREN,Follow._LPAREN_in_parExpression5305); if (state.failed) return;
			DebugLocation(1123, 13);
			PushFollow(Follow._expression_in_parExpression5307);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1123, 24);
			Match(input,RPAREN,Follow._RPAREN_in_parExpression5309); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("parExpression", 68);
			LeaveRule("parExpression", 68);
			LeaveRule_parExpression();
	        if (state.backtracking > 0) { Memoize(input, 68, parExpression_StartIndex); }

	    }
	 	DebugLocation(1124, 4);
		} finally { DebugExitRule(GrammarFileName, "parExpression"); }
		return;

	}
	// $ANTLR end "parExpression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expressionList() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expressionList() {}
	// $ANTLR start "expressionList"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1126:1: expressionList : expression ( ',' expression )* ;
	[GrammarRule("expressionList")]
	private void expressionList()
	{
		EnterRule_expressionList();
		EnterRule("expressionList", 69);
		TraceIn("expressionList", 69);
	    int expressionList_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "expressionList");
		DebugLocation(1126, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 69)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1127:5: ( expression ( ',' expression )* )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1127:9: expression ( ',' expression )*
			{
			DebugLocation(1127, 9);
			PushFollow(Follow._expression_in_expressionList5329);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1128, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1128:9: ( ',' expression )*
			try { DebugEnterSubRule(111);
			while (true)
			{
				int alt111=2;
				try { DebugEnterDecision(111, decisionCanBacktrack[111]);
				int LA111_1 = input.LA(1);

				if ((LA111_1==COMMA))
				{
					alt111 = 1;
				}


				} finally { DebugExitDecision(111); }
				switch ( alt111 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1128:10: ',' expression
					{
					DebugLocation(1128, 10);
					Match(input,COMMA,Follow._COMMA_in_expressionList5340); if (state.failed) return;
					DebugLocation(1128, 14);
					PushFollow(Follow._expression_in_expressionList5342);
					expression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop111;
				}
			}

			loop111:
				;

			} finally { DebugExitSubRule(111); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expressionList", 69);
			LeaveRule("expressionList", 69);
			LeaveRule_expressionList();
	        if (state.backtracking > 0) { Memoize(input, 69, expressionList_StartIndex); }

	    }
	 	DebugLocation(1130, 4);
		} finally { DebugExitRule(GrammarFileName, "expressionList"); }
		return;

	}
	// $ANTLR end "expressionList"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression() {}
	// $ANTLR start "expression"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1133:1: expression : conditionalExpression ( assignmentOperator expression )? ;
	[GrammarRule("expression")]
	private void expression()
	{
		EnterRule_expression();
		EnterRule("expression", 70);
		TraceIn("expression", 70);
	    int expression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(1133, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 70)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1134:5: ( conditionalExpression ( assignmentOperator expression )? )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1134:9: conditionalExpression ( assignmentOperator expression )?
			{
			DebugLocation(1134, 9);
			PushFollow(Follow._conditionalExpression_in_expression5374);
			conditionalExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1135, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1135:9: ( assignmentOperator expression )?
			int alt112=2;
			try { DebugEnterSubRule(112);
			try { DebugEnterDecision(112, decisionCanBacktrack[112]);
			int LA112_1 = input.LA(1);

			if ((LA112_1==AMPEQ||LA112_1==BAREQ||LA112_1==CARETEQ||LA112_1==EQ||LA112_1==GT||LA112_1==LT||LA112_1==PERCENTEQ||LA112_1==PLUSEQ||LA112_1==SLASHEQ||LA112_1==STAREQ||LA112_1==SUBEQ))
			{
				alt112 = 1;
			}
			} finally { DebugExitDecision(112); }
			switch (alt112)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1135:10: assignmentOperator expression
				{
				DebugLocation(1135, 10);
				PushFollow(Follow._assignmentOperator_in_expression5385);
				assignmentOperator();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1135, 29);
				PushFollow(Follow._expression_in_expression5387);
				expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(112); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expression", 70);
			LeaveRule("expression", 70);
			LeaveRule_expression();
	        if (state.backtracking > 0) { Memoize(input, 70, expression_StartIndex); }

	    }
	 	DebugLocation(1137, 4);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return;

	}
	// $ANTLR end "expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_assignmentOperator() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_assignmentOperator() {}
	// $ANTLR start "assignmentOperator"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1140:1: assignmentOperator : ( '=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | '<' '<' '=' | '>' '>' '>' '=' | '>' '>' '=' );
	[GrammarRule("assignmentOperator")]
	private void assignmentOperator()
	{
		EnterRule_assignmentOperator();
		EnterRule("assignmentOperator", 71);
		TraceIn("assignmentOperator", 71);
	    int assignmentOperator_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "assignmentOperator");
		DebugLocation(1140, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 71)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1141:5: ( '=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | '<' '<' '=' | '>' '>' '>' '=' | '>' '>' '=' )
			int alt113=12;
			try { DebugEnterDecision(113, decisionCanBacktrack[113]);
			switch (input.LA(1))
			{
			case EQ:
				{
				alt113 = 1;
				}
				break;
			case PLUSEQ:
				{
				alt113 = 2;
				}
				break;
			case SUBEQ:
				{
				alt113 = 3;
				}
				break;
			case STAREQ:
				{
				alt113 = 4;
				}
				break;
			case SLASHEQ:
				{
				alt113 = 5;
				}
				break;
			case AMPEQ:
				{
				alt113 = 6;
				}
				break;
			case BAREQ:
				{
				alt113 = 7;
				}
				break;
			case CARETEQ:
				{
				alt113 = 8;
				}
				break;
			case PERCENTEQ:
				{
				alt113 = 9;
				}
				break;
			case LT:
				{
				alt113 = 10;
				}
				break;
			case GT:
				{
				int LA113_2 = input.LA(2);

				if ((LA113_2==GT))
				{
					int LA113_3 = input.LA(3);

					if ((LA113_3==GT))
					{
						alt113 = 11;
					}
					else if ((LA113_3==EQ))
					{
						alt113 = 12;
					}

					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 113, 12, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}

				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 113, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 113, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(113); }
			switch (alt113)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1141:9: '='
				{
				DebugLocation(1141, 9);
				Match(input,EQ,Follow._EQ_in_assignmentOperator5419); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1142:9: '+='
				{
				DebugLocation(1142, 9);
				Match(input,PLUSEQ,Follow._PLUSEQ_in_assignmentOperator5429); if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1143:9: '-='
				{
				DebugLocation(1143, 9);
				Match(input,SUBEQ,Follow._SUBEQ_in_assignmentOperator5439); if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1144:9: '*='
				{
				DebugLocation(1144, 9);
				Match(input,STAREQ,Follow._STAREQ_in_assignmentOperator5449); if (state.failed) return;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1145:9: '/='
				{
				DebugLocation(1145, 9);
				Match(input,SLASHEQ,Follow._SLASHEQ_in_assignmentOperator5459); if (state.failed) return;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1146:9: '&='
				{
				DebugLocation(1146, 9);
				Match(input,AMPEQ,Follow._AMPEQ_in_assignmentOperator5469); if (state.failed) return;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1147:9: '|='
				{
				DebugLocation(1147, 9);
				Match(input,BAREQ,Follow._BAREQ_in_assignmentOperator5479); if (state.failed) return;

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1148:9: '^='
				{
				DebugLocation(1148, 9);
				Match(input,CARETEQ,Follow._CARETEQ_in_assignmentOperator5489); if (state.failed) return;

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1149:9: '%='
				{
				DebugLocation(1149, 9);
				Match(input,PERCENTEQ,Follow._PERCENTEQ_in_assignmentOperator5499); if (state.failed) return;

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1150:10: '<' '<' '='
				{
				DebugLocation(1150, 10);
				Match(input,LT,Follow._LT_in_assignmentOperator5510); if (state.failed) return;
				DebugLocation(1150, 14);
				Match(input,LT,Follow._LT_in_assignmentOperator5512); if (state.failed) return;
				DebugLocation(1150, 18);
				Match(input,EQ,Follow._EQ_in_assignmentOperator5514); if (state.failed) return;

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1151:10: '>' '>' '>' '='
				{
				DebugLocation(1151, 10);
				Match(input,GT,Follow._GT_in_assignmentOperator5525); if (state.failed) return;
				DebugLocation(1151, 14);
				Match(input,GT,Follow._GT_in_assignmentOperator5527); if (state.failed) return;
				DebugLocation(1151, 18);
				Match(input,GT,Follow._GT_in_assignmentOperator5529); if (state.failed) return;
				DebugLocation(1151, 22);
				Match(input,EQ,Follow._EQ_in_assignmentOperator5531); if (state.failed) return;

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1152:10: '>' '>' '='
				{
				DebugLocation(1152, 10);
				Match(input,GT,Follow._GT_in_assignmentOperator5542); if (state.failed) return;
				DebugLocation(1152, 14);
				Match(input,GT,Follow._GT_in_assignmentOperator5544); if (state.failed) return;
				DebugLocation(1152, 18);
				Match(input,EQ,Follow._EQ_in_assignmentOperator5546); if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("assignmentOperator", 71);
			LeaveRule("assignmentOperator", 71);
			LeaveRule_assignmentOperator();
	        if (state.backtracking > 0) { Memoize(input, 71, assignmentOperator_StartIndex); }

	    }
	 	DebugLocation(1153, 4);
		} finally { DebugExitRule(GrammarFileName, "assignmentOperator"); }
		return;

	}
	// $ANTLR end "assignmentOperator"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_conditionalExpression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_conditionalExpression() {}
	// $ANTLR start "conditionalExpression"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1156:1: conditionalExpression : conditionalOrExpression ( '?' expression ':' conditionalExpression )? ;
	[GrammarRule("conditionalExpression")]
	private void conditionalExpression()
	{
		EnterRule_conditionalExpression();
		EnterRule("conditionalExpression", 72);
		TraceIn("conditionalExpression", 72);
	    int conditionalExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "conditionalExpression");
		DebugLocation(1156, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 72)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1157:5: ( conditionalOrExpression ( '?' expression ':' conditionalExpression )? )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1157:9: conditionalOrExpression ( '?' expression ':' conditionalExpression )?
			{
			DebugLocation(1157, 9);
			PushFollow(Follow._conditionalOrExpression_in_conditionalExpression5567);
			conditionalOrExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1158, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1158:9: ( '?' expression ':' conditionalExpression )?
			int alt114=2;
			try { DebugEnterSubRule(114);
			try { DebugEnterDecision(114, decisionCanBacktrack[114]);
			int LA114_1 = input.LA(1);

			if ((LA114_1==QUES))
			{
				alt114 = 1;
			}
			} finally { DebugExitDecision(114); }
			switch (alt114)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1158:10: '?' expression ':' conditionalExpression
				{
				DebugLocation(1158, 10);
				Match(input,QUES,Follow._QUES_in_conditionalExpression5578); if (state.failed) return;
				DebugLocation(1158, 14);
				PushFollow(Follow._expression_in_conditionalExpression5580);
				expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1158, 25);
				Match(input,COLON,Follow._COLON_in_conditionalExpression5582); if (state.failed) return;
				DebugLocation(1158, 29);
				PushFollow(Follow._conditionalExpression_in_conditionalExpression5584);
				conditionalExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(114); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("conditionalExpression", 72);
			LeaveRule("conditionalExpression", 72);
			LeaveRule_conditionalExpression();
	        if (state.backtracking > 0) { Memoize(input, 72, conditionalExpression_StartIndex); }

	    }
	 	DebugLocation(1160, 4);
		} finally { DebugExitRule(GrammarFileName, "conditionalExpression"); }
		return;

	}
	// $ANTLR end "conditionalExpression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_conditionalOrExpression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_conditionalOrExpression() {}
	// $ANTLR start "conditionalOrExpression"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1162:1: conditionalOrExpression : conditionalAndExpression ( '||' conditionalAndExpression )* ;
	[GrammarRule("conditionalOrExpression")]
	private void conditionalOrExpression()
	{
		EnterRule_conditionalOrExpression();
		EnterRule("conditionalOrExpression", 73);
		TraceIn("conditionalOrExpression", 73);
	    int conditionalOrExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "conditionalOrExpression");
		DebugLocation(1162, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 73)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1163:5: ( conditionalAndExpression ( '||' conditionalAndExpression )* )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1163:9: conditionalAndExpression ( '||' conditionalAndExpression )*
			{
			DebugLocation(1163, 9);
			PushFollow(Follow._conditionalAndExpression_in_conditionalOrExpression5615);
			conditionalAndExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1164, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1164:9: ( '||' conditionalAndExpression )*
			try { DebugEnterSubRule(115);
			while (true)
			{
				int alt115=2;
				try { DebugEnterDecision(115, decisionCanBacktrack[115]);
				int LA115_1 = input.LA(1);

				if ((LA115_1==BARBAR))
				{
					alt115 = 1;
				}


				} finally { DebugExitDecision(115); }
				switch ( alt115 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1164:10: '||' conditionalAndExpression
					{
					DebugLocation(1164, 10);
					Match(input,BARBAR,Follow._BARBAR_in_conditionalOrExpression5626); if (state.failed) return;
					DebugLocation(1164, 15);
					PushFollow(Follow._conditionalAndExpression_in_conditionalOrExpression5628);
					conditionalAndExpression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop115;
				}
			}

			loop115:
				;

			} finally { DebugExitSubRule(115); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("conditionalOrExpression", 73);
			LeaveRule("conditionalOrExpression", 73);
			LeaveRule_conditionalOrExpression();
	        if (state.backtracking > 0) { Memoize(input, 73, conditionalOrExpression_StartIndex); }

	    }
	 	DebugLocation(1166, 4);
		} finally { DebugExitRule(GrammarFileName, "conditionalOrExpression"); }
		return;

	}
	// $ANTLR end "conditionalOrExpression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_conditionalAndExpression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_conditionalAndExpression() {}
	// $ANTLR start "conditionalAndExpression"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1168:1: conditionalAndExpression : inclusiveOrExpression ( '&&' inclusiveOrExpression )* ;
	[GrammarRule("conditionalAndExpression")]
	private void conditionalAndExpression()
	{
		EnterRule_conditionalAndExpression();
		EnterRule("conditionalAndExpression", 74);
		TraceIn("conditionalAndExpression", 74);
	    int conditionalAndExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "conditionalAndExpression");
		DebugLocation(1168, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 74)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1169:5: ( inclusiveOrExpression ( '&&' inclusiveOrExpression )* )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1169:9: inclusiveOrExpression ( '&&' inclusiveOrExpression )*
			{
			DebugLocation(1169, 9);
			PushFollow(Follow._inclusiveOrExpression_in_conditionalAndExpression5659);
			inclusiveOrExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1170, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1170:9: ( '&&' inclusiveOrExpression )*
			try { DebugEnterSubRule(116);
			while (true)
			{
				int alt116=2;
				try { DebugEnterDecision(116, decisionCanBacktrack[116]);
				int LA116_1 = input.LA(1);

				if ((LA116_1==AMPAMP))
				{
					alt116 = 1;
				}


				} finally { DebugExitDecision(116); }
				switch ( alt116 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1170:10: '&&' inclusiveOrExpression
					{
					DebugLocation(1170, 10);
					Match(input,AMPAMP,Follow._AMPAMP_in_conditionalAndExpression5670); if (state.failed) return;
					DebugLocation(1170, 15);
					PushFollow(Follow._inclusiveOrExpression_in_conditionalAndExpression5672);
					inclusiveOrExpression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop116;
				}
			}

			loop116:
				;

			} finally { DebugExitSubRule(116); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("conditionalAndExpression", 74);
			LeaveRule("conditionalAndExpression", 74);
			LeaveRule_conditionalAndExpression();
	        if (state.backtracking > 0) { Memoize(input, 74, conditionalAndExpression_StartIndex); }

	    }
	 	DebugLocation(1172, 4);
		} finally { DebugExitRule(GrammarFileName, "conditionalAndExpression"); }
		return;

	}
	// $ANTLR end "conditionalAndExpression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_inclusiveOrExpression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_inclusiveOrExpression() {}
	// $ANTLR start "inclusiveOrExpression"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1174:1: inclusiveOrExpression : exclusiveOrExpression ( '|' exclusiveOrExpression )* ;
	[GrammarRule("inclusiveOrExpression")]
	private void inclusiveOrExpression()
	{
		EnterRule_inclusiveOrExpression();
		EnterRule("inclusiveOrExpression", 75);
		TraceIn("inclusiveOrExpression", 75);
	    int inclusiveOrExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "inclusiveOrExpression");
		DebugLocation(1174, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 75)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1175:5: ( exclusiveOrExpression ( '|' exclusiveOrExpression )* )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1175:9: exclusiveOrExpression ( '|' exclusiveOrExpression )*
			{
			DebugLocation(1175, 9);
			PushFollow(Follow._exclusiveOrExpression_in_inclusiveOrExpression5703);
			exclusiveOrExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1176, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1176:9: ( '|' exclusiveOrExpression )*
			try { DebugEnterSubRule(117);
			while (true)
			{
				int alt117=2;
				try { DebugEnterDecision(117, decisionCanBacktrack[117]);
				int LA117_1 = input.LA(1);

				if ((LA117_1==BAR))
				{
					alt117 = 1;
				}


				} finally { DebugExitDecision(117); }
				switch ( alt117 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1176:10: '|' exclusiveOrExpression
					{
					DebugLocation(1176, 10);
					Match(input,BAR,Follow._BAR_in_inclusiveOrExpression5714); if (state.failed) return;
					DebugLocation(1176, 14);
					PushFollow(Follow._exclusiveOrExpression_in_inclusiveOrExpression5716);
					exclusiveOrExpression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop117;
				}
			}

			loop117:
				;

			} finally { DebugExitSubRule(117); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("inclusiveOrExpression", 75);
			LeaveRule("inclusiveOrExpression", 75);
			LeaveRule_inclusiveOrExpression();
	        if (state.backtracking > 0) { Memoize(input, 75, inclusiveOrExpression_StartIndex); }

	    }
	 	DebugLocation(1178, 4);
		} finally { DebugExitRule(GrammarFileName, "inclusiveOrExpression"); }
		return;

	}
	// $ANTLR end "inclusiveOrExpression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_exclusiveOrExpression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_exclusiveOrExpression() {}
	// $ANTLR start "exclusiveOrExpression"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1180:1: exclusiveOrExpression : andExpression ( '^' andExpression )* ;
	[GrammarRule("exclusiveOrExpression")]
	private void exclusiveOrExpression()
	{
		EnterRule_exclusiveOrExpression();
		EnterRule("exclusiveOrExpression", 76);
		TraceIn("exclusiveOrExpression", 76);
	    int exclusiveOrExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "exclusiveOrExpression");
		DebugLocation(1180, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 76)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1181:5: ( andExpression ( '^' andExpression )* )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1181:9: andExpression ( '^' andExpression )*
			{
			DebugLocation(1181, 9);
			PushFollow(Follow._andExpression_in_exclusiveOrExpression5747);
			andExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1182, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1182:9: ( '^' andExpression )*
			try { DebugEnterSubRule(118);
			while (true)
			{
				int alt118=2;
				try { DebugEnterDecision(118, decisionCanBacktrack[118]);
				int LA118_1 = input.LA(1);

				if ((LA118_1==CARET))
				{
					alt118 = 1;
				}


				} finally { DebugExitDecision(118); }
				switch ( alt118 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1182:10: '^' andExpression
					{
					DebugLocation(1182, 10);
					Match(input,CARET,Follow._CARET_in_exclusiveOrExpression5758); if (state.failed) return;
					DebugLocation(1182, 14);
					PushFollow(Follow._andExpression_in_exclusiveOrExpression5760);
					andExpression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop118;
				}
			}

			loop118:
				;

			} finally { DebugExitSubRule(118); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("exclusiveOrExpression", 76);
			LeaveRule("exclusiveOrExpression", 76);
			LeaveRule_exclusiveOrExpression();
	        if (state.backtracking > 0) { Memoize(input, 76, exclusiveOrExpression_StartIndex); }

	    }
	 	DebugLocation(1184, 4);
		} finally { DebugExitRule(GrammarFileName, "exclusiveOrExpression"); }
		return;

	}
	// $ANTLR end "exclusiveOrExpression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_andExpression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_andExpression() {}
	// $ANTLR start "andExpression"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1186:1: andExpression : equalityExpression ( '&' equalityExpression )* ;
	[GrammarRule("andExpression")]
	private void andExpression()
	{
		EnterRule_andExpression();
		EnterRule("andExpression", 77);
		TraceIn("andExpression", 77);
	    int andExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "andExpression");
		DebugLocation(1186, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 77)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1187:5: ( equalityExpression ( '&' equalityExpression )* )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1187:9: equalityExpression ( '&' equalityExpression )*
			{
			DebugLocation(1187, 9);
			PushFollow(Follow._equalityExpression_in_andExpression5791);
			equalityExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1188, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1188:9: ( '&' equalityExpression )*
			try { DebugEnterSubRule(119);
			while (true)
			{
				int alt119=2;
				try { DebugEnterDecision(119, decisionCanBacktrack[119]);
				int LA119_1 = input.LA(1);

				if ((LA119_1==AMP))
				{
					alt119 = 1;
				}


				} finally { DebugExitDecision(119); }
				switch ( alt119 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1188:10: '&' equalityExpression
					{
					DebugLocation(1188, 10);
					Match(input,AMP,Follow._AMP_in_andExpression5802); if (state.failed) return;
					DebugLocation(1188, 14);
					PushFollow(Follow._equalityExpression_in_andExpression5804);
					equalityExpression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop119;
				}
			}

			loop119:
				;

			} finally { DebugExitSubRule(119); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("andExpression", 77);
			LeaveRule("andExpression", 77);
			LeaveRule_andExpression();
	        if (state.backtracking > 0) { Memoize(input, 77, andExpression_StartIndex); }

	    }
	 	DebugLocation(1190, 4);
		} finally { DebugExitRule(GrammarFileName, "andExpression"); }
		return;

	}
	// $ANTLR end "andExpression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_equalityExpression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_equalityExpression() {}
	// $ANTLR start "equalityExpression"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1192:1: equalityExpression : instanceOfExpression ( ( '==' | '!=' ) instanceOfExpression )* ;
	[GrammarRule("equalityExpression")]
	private void equalityExpression()
	{
		EnterRule_equalityExpression();
		EnterRule("equalityExpression", 78);
		TraceIn("equalityExpression", 78);
	    int equalityExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "equalityExpression");
		DebugLocation(1192, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 78)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1193:5: ( instanceOfExpression ( ( '==' | '!=' ) instanceOfExpression )* )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1193:9: instanceOfExpression ( ( '==' | '!=' ) instanceOfExpression )*
			{
			DebugLocation(1193, 9);
			PushFollow(Follow._instanceOfExpression_in_equalityExpression5835);
			instanceOfExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1194, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1194:9: ( ( '==' | '!=' ) instanceOfExpression )*
			try { DebugEnterSubRule(120);
			while (true)
			{
				int alt120=2;
				try { DebugEnterDecision(120, decisionCanBacktrack[120]);
				int LA120_1 = input.LA(1);

				if ((LA120_1==BANGEQ||LA120_1==EQEQ))
				{
					alt120 = 1;
				}


				} finally { DebugExitDecision(120); }
				switch ( alt120 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1195:13: ( '==' | '!=' ) instanceOfExpression
					{
					DebugLocation(1195, 13);
					if (input.LA(1)==BANGEQ||input.LA(1)==EQEQ)
					{
						input.Consume();
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(1198, 13);
					PushFollow(Follow._instanceOfExpression_in_equalityExpression5912);
					instanceOfExpression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop120;
				}
			}

			loop120:
				;

			} finally { DebugExitSubRule(120); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("equalityExpression", 78);
			LeaveRule("equalityExpression", 78);
			LeaveRule_equalityExpression();
	        if (state.backtracking > 0) { Memoize(input, 78, equalityExpression_StartIndex); }

	    }
	 	DebugLocation(1200, 4);
		} finally { DebugExitRule(GrammarFileName, "equalityExpression"); }
		return;

	}
	// $ANTLR end "equalityExpression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_instanceOfExpression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_instanceOfExpression() {}
	// $ANTLR start "instanceOfExpression"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1202:1: instanceOfExpression : relationalExpression ( 'instanceof' type )? ;
	[GrammarRule("instanceOfExpression")]
	private void instanceOfExpression()
	{
		EnterRule_instanceOfExpression();
		EnterRule("instanceOfExpression", 79);
		TraceIn("instanceOfExpression", 79);
	    int instanceOfExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "instanceOfExpression");
		DebugLocation(1202, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 79)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1203:5: ( relationalExpression ( 'instanceof' type )? )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1203:9: relationalExpression ( 'instanceof' type )?
			{
			DebugLocation(1203, 9);
			PushFollow(Follow._relationalExpression_in_instanceOfExpression5943);
			relationalExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1204, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1204:9: ( 'instanceof' type )?
			int alt121=2;
			try { DebugEnterSubRule(121);
			try { DebugEnterDecision(121, decisionCanBacktrack[121]);
			int LA121_1 = input.LA(1);

			if ((LA121_1==INSTANCEOF))
			{
				alt121 = 1;
			}
			} finally { DebugExitDecision(121); }
			switch (alt121)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1204:10: 'instanceof' type
				{
				DebugLocation(1204, 10);
				Match(input,INSTANCEOF,Follow._INSTANCEOF_in_instanceOfExpression5954); if (state.failed) return;
				DebugLocation(1204, 23);
				PushFollow(Follow._type_in_instanceOfExpression5956);
				type();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(121); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("instanceOfExpression", 79);
			LeaveRule("instanceOfExpression", 79);
			LeaveRule_instanceOfExpression();
	        if (state.backtracking > 0) { Memoize(input, 79, instanceOfExpression_StartIndex); }

	    }
	 	DebugLocation(1206, 4);
		} finally { DebugExitRule(GrammarFileName, "instanceOfExpression"); }
		return;

	}
	// $ANTLR end "instanceOfExpression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_relationalExpression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_relationalExpression() {}
	// $ANTLR start "relationalExpression"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1208:1: relationalExpression : shiftExpression ( relationalOp shiftExpression )* ;
	[GrammarRule("relationalExpression")]
	private void relationalExpression()
	{
		EnterRule_relationalExpression();
		EnterRule("relationalExpression", 80);
		TraceIn("relationalExpression", 80);
	    int relationalExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "relationalExpression");
		DebugLocation(1208, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 80)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1209:5: ( shiftExpression ( relationalOp shiftExpression )* )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1209:9: shiftExpression ( relationalOp shiftExpression )*
			{
			DebugLocation(1209, 9);
			PushFollow(Follow._shiftExpression_in_relationalExpression5987);
			shiftExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1210, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1210:9: ( relationalOp shiftExpression )*
			try { DebugEnterSubRule(122);
			while (true)
			{
				int alt122=2;
				try { DebugEnterDecision(122, decisionCanBacktrack[122]);
				int LA122_1 = input.LA(1);

				if ((LA122_1==LT))
				{
					int LA122_2 = input.LA(2);

					if ((LA122_2==BANG||LA122_2==BOOLEAN||LA122_2==BYTE||(LA122_2>=CHAR && LA122_2<=CHARLITERAL)||(LA122_2>=DOUBLE && LA122_2<=DOUBLELITERAL)||LA122_2==EQ||LA122_2==FALSE||(LA122_2>=FLOAT && LA122_2<=FLOATLITERAL)||LA122_2==IDENTIFIER||LA122_2==INT||LA122_2==INTLITERAL||(LA122_2>=LONG && LA122_2<=LPAREN)||(LA122_2>=NEW && LA122_2<=NULL)||LA122_2==PLUS||LA122_2==PLUSPLUS||LA122_2==SHORT||(LA122_2>=STRINGLITERAL && LA122_2<=SUB)||(LA122_2>=SUBSUB && LA122_2<=SUPER)||LA122_2==THIS||LA122_2==TILDE||LA122_2==TRUE||LA122_2==VOID))
					{
						alt122 = 1;
					}


				}
				else if ((LA122_1==GT))
				{
					int LA122_2 = input.LA(2);

					if ((LA122_2==BANG||LA122_2==BOOLEAN||LA122_2==BYTE||(LA122_2>=CHAR && LA122_2<=CHARLITERAL)||(LA122_2>=DOUBLE && LA122_2<=DOUBLELITERAL)||LA122_2==EQ||LA122_2==FALSE||(LA122_2>=FLOAT && LA122_2<=FLOATLITERAL)||LA122_2==IDENTIFIER||LA122_2==INT||LA122_2==INTLITERAL||(LA122_2>=LONG && LA122_2<=LPAREN)||(LA122_2>=NEW && LA122_2<=NULL)||LA122_2==PLUS||LA122_2==PLUSPLUS||LA122_2==SHORT||(LA122_2>=STRINGLITERAL && LA122_2<=SUB)||(LA122_2>=SUBSUB && LA122_2<=SUPER)||LA122_2==THIS||LA122_2==TILDE||LA122_2==TRUE||LA122_2==VOID))
					{
						alt122 = 1;
					}


				}


				} finally { DebugExitDecision(122); }
				switch ( alt122 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1210:10: relationalOp shiftExpression
					{
					DebugLocation(1210, 10);
					PushFollow(Follow._relationalOp_in_relationalExpression5998);
					relationalOp();
					PopFollow();
					if (state.failed) return;
					DebugLocation(1210, 23);
					PushFollow(Follow._shiftExpression_in_relationalExpression6000);
					shiftExpression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop122;
				}
			}

			loop122:
				;

			} finally { DebugExitSubRule(122); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("relationalExpression", 80);
			LeaveRule("relationalExpression", 80);
			LeaveRule_relationalExpression();
	        if (state.backtracking > 0) { Memoize(input, 80, relationalExpression_StartIndex); }

	    }
	 	DebugLocation(1212, 4);
		} finally { DebugExitRule(GrammarFileName, "relationalExpression"); }
		return;

	}
	// $ANTLR end "relationalExpression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_relationalOp() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_relationalOp() {}
	// $ANTLR start "relationalOp"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1214:1: relationalOp : ( '<' '=' | '>' '=' | '<' | '>' );
	[GrammarRule("relationalOp")]
	private void relationalOp()
	{
		EnterRule_relationalOp();
		EnterRule("relationalOp", 81);
		TraceIn("relationalOp", 81);
	    int relationalOp_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "relationalOp");
		DebugLocation(1214, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 81)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1215:5: ( '<' '=' | '>' '=' | '<' | '>' )
			int alt123=4;
			try { DebugEnterDecision(123, decisionCanBacktrack[123]);
			int LA123_1 = input.LA(1);

			if ((LA123_1==LT))
			{
				int LA123_2 = input.LA(2);

				if ((LA123_2==EQ))
				{
					alt123 = 1;
				}
				else if ((LA123_2==BANG||LA123_2==BOOLEAN||LA123_2==BYTE||(LA123_2>=CHAR && LA123_2<=CHARLITERAL)||(LA123_2>=DOUBLE && LA123_2<=DOUBLELITERAL)||LA123_2==FALSE||(LA123_2>=FLOAT && LA123_2<=FLOATLITERAL)||LA123_2==IDENTIFIER||LA123_2==INT||LA123_2==INTLITERAL||(LA123_2>=LONG && LA123_2<=LPAREN)||(LA123_2>=NEW && LA123_2<=NULL)||LA123_2==PLUS||LA123_2==PLUSPLUS||LA123_2==SHORT||(LA123_2>=STRINGLITERAL && LA123_2<=SUB)||(LA123_2>=SUBSUB && LA123_2<=SUPER)||LA123_2==THIS||LA123_2==TILDE||LA123_2==TRUE||LA123_2==VOID))
				{
					alt123 = 3;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 123, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

			}
			else if ((LA123_1==GT))
			{
				int LA123_2 = input.LA(2);

				if ((LA123_2==EQ))
				{
					alt123 = 2;
				}
				else if ((LA123_2==BANG||LA123_2==BOOLEAN||LA123_2==BYTE||(LA123_2>=CHAR && LA123_2<=CHARLITERAL)||(LA123_2>=DOUBLE && LA123_2<=DOUBLELITERAL)||LA123_2==FALSE||(LA123_2>=FLOAT && LA123_2<=FLOATLITERAL)||LA123_2==IDENTIFIER||LA123_2==INT||LA123_2==INTLITERAL||(LA123_2>=LONG && LA123_2<=LPAREN)||(LA123_2>=NEW && LA123_2<=NULL)||LA123_2==PLUS||LA123_2==PLUSPLUS||LA123_2==SHORT||(LA123_2>=STRINGLITERAL && LA123_2<=SUB)||(LA123_2>=SUBSUB && LA123_2<=SUPER)||LA123_2==THIS||LA123_2==TILDE||LA123_2==TRUE||LA123_2==VOID))
				{
					alt123 = 4;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 123, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

			}

			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 123, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}

			} finally { DebugExitDecision(123); }
			switch (alt123)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1215:10: '<' '='
				{
				DebugLocation(1215, 10);
				Match(input,LT,Follow._LT_in_relationalOp6032); if (state.failed) return;
				DebugLocation(1215, 14);
				Match(input,EQ,Follow._EQ_in_relationalOp6034); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1216:10: '>' '='
				{
				DebugLocation(1216, 10);
				Match(input,GT,Follow._GT_in_relationalOp6045); if (state.failed) return;
				DebugLocation(1216, 14);
				Match(input,EQ,Follow._EQ_in_relationalOp6047); if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1217:9: '<'
				{
				DebugLocation(1217, 9);
				Match(input,LT,Follow._LT_in_relationalOp6057); if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1218:9: '>'
				{
				DebugLocation(1218, 9);
				Match(input,GT,Follow._GT_in_relationalOp6067); if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("relationalOp", 81);
			LeaveRule("relationalOp", 81);
			LeaveRule_relationalOp();
	        if (state.backtracking > 0) { Memoize(input, 81, relationalOp_StartIndex); }

	    }
	 	DebugLocation(1219, 4);
		} finally { DebugExitRule(GrammarFileName, "relationalOp"); }
		return;

	}
	// $ANTLR end "relationalOp"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_shiftExpression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_shiftExpression() {}
	// $ANTLR start "shiftExpression"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1221:1: shiftExpression : additiveExpression ( shiftOp additiveExpression )* ;
	[GrammarRule("shiftExpression")]
	private void shiftExpression()
	{
		EnterRule_shiftExpression();
		EnterRule("shiftExpression", 82);
		TraceIn("shiftExpression", 82);
	    int shiftExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "shiftExpression");
		DebugLocation(1221, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 82)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1222:5: ( additiveExpression ( shiftOp additiveExpression )* )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1222:9: additiveExpression ( shiftOp additiveExpression )*
			{
			DebugLocation(1222, 9);
			PushFollow(Follow._additiveExpression_in_shiftExpression6087);
			additiveExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1223, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1223:9: ( shiftOp additiveExpression )*
			try { DebugEnterSubRule(124);
			while (true)
			{
				int alt124=2;
				try { DebugEnterDecision(124, decisionCanBacktrack[124]);
				int LA124_1 = input.LA(1);

				if ((LA124_1==LT))
				{
					int LA124_2 = input.LA(2);

					if ((LA124_2==LT))
					{
						int LA124_3 = input.LA(3);

						if ((LA124_3==BANG||LA124_3==BOOLEAN||LA124_3==BYTE||(LA124_3>=CHAR && LA124_3<=CHARLITERAL)||(LA124_3>=DOUBLE && LA124_3<=DOUBLELITERAL)||LA124_3==FALSE||(LA124_3>=FLOAT && LA124_3<=FLOATLITERAL)||LA124_3==IDENTIFIER||LA124_3==INT||LA124_3==INTLITERAL||(LA124_3>=LONG && LA124_3<=LPAREN)||(LA124_3>=NEW && LA124_3<=NULL)||LA124_3==PLUS||LA124_3==PLUSPLUS||LA124_3==SHORT||(LA124_3>=STRINGLITERAL && LA124_3<=SUB)||(LA124_3>=SUBSUB && LA124_3<=SUPER)||LA124_3==THIS||LA124_3==TILDE||LA124_3==TRUE||LA124_3==VOID))
						{
							alt124 = 1;
						}


					}


				}
				else if ((LA124_1==GT))
				{
					int LA124_2 = input.LA(2);

					if ((LA124_2==GT))
					{
						int LA124_3 = input.LA(3);

						if ((LA124_3==GT))
						{
							int LA124_4 = input.LA(4);

							if ((LA124_4==BANG||LA124_4==BOOLEAN||LA124_4==BYTE||(LA124_4>=CHAR && LA124_4<=CHARLITERAL)||(LA124_4>=DOUBLE && LA124_4<=DOUBLELITERAL)||LA124_4==FALSE||(LA124_4>=FLOAT && LA124_4<=FLOATLITERAL)||LA124_4==IDENTIFIER||LA124_4==INT||LA124_4==INTLITERAL||(LA124_4>=LONG && LA124_4<=LPAREN)||(LA124_4>=NEW && LA124_4<=NULL)||LA124_4==PLUS||LA124_4==PLUSPLUS||LA124_4==SHORT||(LA124_4>=STRINGLITERAL && LA124_4<=SUB)||(LA124_4>=SUBSUB && LA124_4<=SUPER)||LA124_4==THIS||LA124_4==TILDE||LA124_4==TRUE||LA124_4==VOID))
							{
								alt124 = 1;
							}


						}
						else if ((LA124_3==BANG||LA124_3==BOOLEAN||LA124_3==BYTE||(LA124_3>=CHAR && LA124_3<=CHARLITERAL)||(LA124_3>=DOUBLE && LA124_3<=DOUBLELITERAL)||LA124_3==FALSE||(LA124_3>=FLOAT && LA124_3<=FLOATLITERAL)||LA124_3==IDENTIFIER||LA124_3==INT||LA124_3==INTLITERAL||(LA124_3>=LONG && LA124_3<=LPAREN)||(LA124_3>=NEW && LA124_3<=NULL)||LA124_3==PLUS||LA124_3==PLUSPLUS||LA124_3==SHORT||(LA124_3>=STRINGLITERAL && LA124_3<=SUB)||(LA124_3>=SUBSUB && LA124_3<=SUPER)||LA124_3==THIS||LA124_3==TILDE||LA124_3==TRUE||LA124_3==VOID))
						{
							alt124 = 1;
						}


					}


				}


				} finally { DebugExitDecision(124); }
				switch ( alt124 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1223:10: shiftOp additiveExpression
					{
					DebugLocation(1223, 10);
					PushFollow(Follow._shiftOp_in_shiftExpression6098);
					shiftOp();
					PopFollow();
					if (state.failed) return;
					DebugLocation(1223, 18);
					PushFollow(Follow._additiveExpression_in_shiftExpression6100);
					additiveExpression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop124;
				}
			}

			loop124:
				;

			} finally { DebugExitSubRule(124); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("shiftExpression", 82);
			LeaveRule("shiftExpression", 82);
			LeaveRule_shiftExpression();
	        if (state.backtracking > 0) { Memoize(input, 82, shiftExpression_StartIndex); }

	    }
	 	DebugLocation(1225, 4);
		} finally { DebugExitRule(GrammarFileName, "shiftExpression"); }
		return;

	}
	// $ANTLR end "shiftExpression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_shiftOp() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_shiftOp() {}
	// $ANTLR start "shiftOp"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1228:1: shiftOp : ( '<' '<' | '>' '>' '>' | '>' '>' );
	[GrammarRule("shiftOp")]
	private void shiftOp()
	{
		EnterRule_shiftOp();
		EnterRule("shiftOp", 83);
		TraceIn("shiftOp", 83);
	    int shiftOp_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "shiftOp");
		DebugLocation(1228, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 83)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1229:5: ( '<' '<' | '>' '>' '>' | '>' '>' )
			int alt125=3;
			try { DebugEnterDecision(125, decisionCanBacktrack[125]);
			int LA125_1 = input.LA(1);

			if ((LA125_1==LT))
			{
				alt125 = 1;
			}
			else if ((LA125_1==GT))
			{
				int LA125_2 = input.LA(2);

				if ((LA125_2==GT))
				{
					int LA125_3 = input.LA(3);

					if ((LA125_3==GT))
					{
						alt125 = 2;
					}
					else if ((LA125_3==BANG||LA125_3==BOOLEAN||LA125_3==BYTE||(LA125_3>=CHAR && LA125_3<=CHARLITERAL)||(LA125_3>=DOUBLE && LA125_3<=DOUBLELITERAL)||LA125_3==FALSE||(LA125_3>=FLOAT && LA125_3<=FLOATLITERAL)||LA125_3==IDENTIFIER||LA125_3==INT||LA125_3==INTLITERAL||(LA125_3>=LONG && LA125_3<=LPAREN)||(LA125_3>=NEW && LA125_3<=NULL)||LA125_3==PLUS||LA125_3==PLUSPLUS||LA125_3==SHORT||(LA125_3>=STRINGLITERAL && LA125_3<=SUB)||(LA125_3>=SUBSUB && LA125_3<=SUPER)||LA125_3==THIS||LA125_3==TILDE||LA125_3==TRUE||LA125_3==VOID))
					{
						alt125 = 3;
					}

					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 125, 3, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}

				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 125, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

			}

			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 125, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}

			} finally { DebugExitDecision(125); }
			switch (alt125)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1229:10: '<' '<'
				{
				DebugLocation(1229, 10);
				Match(input,LT,Follow._LT_in_shiftOp6133); if (state.failed) return;
				DebugLocation(1229, 14);
				Match(input,LT,Follow._LT_in_shiftOp6135); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1230:10: '>' '>' '>'
				{
				DebugLocation(1230, 10);
				Match(input,GT,Follow._GT_in_shiftOp6146); if (state.failed) return;
				DebugLocation(1230, 14);
				Match(input,GT,Follow._GT_in_shiftOp6148); if (state.failed) return;
				DebugLocation(1230, 18);
				Match(input,GT,Follow._GT_in_shiftOp6150); if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1231:10: '>' '>'
				{
				DebugLocation(1231, 10);
				Match(input,GT,Follow._GT_in_shiftOp6161); if (state.failed) return;
				DebugLocation(1231, 14);
				Match(input,GT,Follow._GT_in_shiftOp6163); if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("shiftOp", 83);
			LeaveRule("shiftOp", 83);
			LeaveRule_shiftOp();
	        if (state.backtracking > 0) { Memoize(input, 83, shiftOp_StartIndex); }

	    }
	 	DebugLocation(1232, 4);
		} finally { DebugExitRule(GrammarFileName, "shiftOp"); }
		return;

	}
	// $ANTLR end "shiftOp"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_additiveExpression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_additiveExpression() {}
	// $ANTLR start "additiveExpression"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1235:1: additiveExpression : multiplicativeExpression ( ( '+' | '-' ) multiplicativeExpression )* ;
	[GrammarRule("additiveExpression")]
	private void additiveExpression()
	{
		EnterRule_additiveExpression();
		EnterRule("additiveExpression", 84);
		TraceIn("additiveExpression", 84);
	    int additiveExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "additiveExpression");
		DebugLocation(1235, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 84)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1236:5: ( multiplicativeExpression ( ( '+' | '-' ) multiplicativeExpression )* )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1236:9: multiplicativeExpression ( ( '+' | '-' ) multiplicativeExpression )*
			{
			DebugLocation(1236, 9);
			PushFollow(Follow._multiplicativeExpression_in_additiveExpression6184);
			multiplicativeExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1237, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1237:9: ( ( '+' | '-' ) multiplicativeExpression )*
			try { DebugEnterSubRule(126);
			while (true)
			{
				int alt126=2;
				try { DebugEnterDecision(126, decisionCanBacktrack[126]);
				int LA126_1 = input.LA(1);

				if ((LA126_1==PLUS||LA126_1==SUB))
				{
					alt126 = 1;
				}


				} finally { DebugExitDecision(126); }
				switch ( alt126 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1238:13: ( '+' | '-' ) multiplicativeExpression
					{
					DebugLocation(1238, 13);
					if (input.LA(1)==PLUS||input.LA(1)==SUB)
					{
						input.Consume();
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(1241, 13);
					PushFollow(Follow._multiplicativeExpression_in_additiveExpression6261);
					multiplicativeExpression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop126;
				}
			}

			loop126:
				;

			} finally { DebugExitSubRule(126); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("additiveExpression", 84);
			LeaveRule("additiveExpression", 84);
			LeaveRule_additiveExpression();
	        if (state.backtracking > 0) { Memoize(input, 84, additiveExpression_StartIndex); }

	    }
	 	DebugLocation(1243, 4);
		} finally { DebugExitRule(GrammarFileName, "additiveExpression"); }
		return;

	}
	// $ANTLR end "additiveExpression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_multiplicativeExpression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_multiplicativeExpression() {}
	// $ANTLR start "multiplicativeExpression"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1245:1: multiplicativeExpression : unaryExpression ( ( '*' | '/' | '%' ) unaryExpression )* ;
	[GrammarRule("multiplicativeExpression")]
	private void multiplicativeExpression()
	{
		EnterRule_multiplicativeExpression();
		EnterRule("multiplicativeExpression", 85);
		TraceIn("multiplicativeExpression", 85);
	    int multiplicativeExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "multiplicativeExpression");
		DebugLocation(1245, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 85)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1246:5: ( unaryExpression ( ( '*' | '/' | '%' ) unaryExpression )* )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1247:9: unaryExpression ( ( '*' | '/' | '%' ) unaryExpression )*
			{
			DebugLocation(1247, 9);
			PushFollow(Follow._unaryExpression_in_multiplicativeExpression6299);
			unaryExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1248, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1248:9: ( ( '*' | '/' | '%' ) unaryExpression )*
			try { DebugEnterSubRule(127);
			while (true)
			{
				int alt127=2;
				try { DebugEnterDecision(127, decisionCanBacktrack[127]);
				int LA127_1 = input.LA(1);

				if ((LA127_1==PERCENT||LA127_1==SLASH||LA127_1==STAR))
				{
					alt127 = 1;
				}


				} finally { DebugExitDecision(127); }
				switch ( alt127 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1249:13: ( '*' | '/' | '%' ) unaryExpression
					{
					DebugLocation(1249, 13);
					if (input.LA(1)==PERCENT||input.LA(1)==SLASH||input.LA(1)==STAR)
					{
						input.Consume();
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(1253, 13);
					PushFollow(Follow._unaryExpression_in_multiplicativeExpression6394);
					unaryExpression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop127;
				}
			}

			loop127:
				;

			} finally { DebugExitSubRule(127); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("multiplicativeExpression", 85);
			LeaveRule("multiplicativeExpression", 85);
			LeaveRule_multiplicativeExpression();
	        if (state.backtracking > 0) { Memoize(input, 85, multiplicativeExpression_StartIndex); }

	    }
	 	DebugLocation(1255, 4);
		} finally { DebugExitRule(GrammarFileName, "multiplicativeExpression"); }
		return;

	}
	// $ANTLR end "multiplicativeExpression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_unaryExpression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_unaryExpression() {}
	// $ANTLR start "unaryExpression"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1261:1: unaryExpression : ( '+' unaryExpression | '-' unaryExpression | '++' unaryExpression | '--' unaryExpression | unaryExpressionNotPlusMinus );
	[GrammarRule("unaryExpression")]
	private void unaryExpression()
	{
		EnterRule_unaryExpression();
		EnterRule("unaryExpression", 86);
		TraceIn("unaryExpression", 86);
	    int unaryExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "unaryExpression");
		DebugLocation(1261, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 86)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1262:5: ( '+' unaryExpression | '-' unaryExpression | '++' unaryExpression | '--' unaryExpression | unaryExpressionNotPlusMinus )
			int alt128=5;
			try { DebugEnterDecision(128, decisionCanBacktrack[128]);
			switch (input.LA(1))
			{
			case PLUS:
				{
				alt128 = 1;
				}
				break;
			case SUB:
				{
				alt128 = 2;
				}
				break;
			case PLUSPLUS:
				{
				alt128 = 3;
				}
				break;
			case SUBSUB:
				{
				alt128 = 4;
				}
				break;
			case BANG:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CHARLITERAL:
			case DOUBLE:
			case DOUBLELITERAL:
			case FALSE:
			case FLOAT:
			case FLOATLITERAL:
			case IDENTIFIER:
			case INT:
			case INTLITERAL:
			case LONG:
			case LONGLITERAL:
			case LPAREN:
			case NEW:
			case NULL:
			case SHORT:
			case STRINGLITERAL:
			case SUPER:
			case THIS:
			case TILDE:
			case TRUE:
			case VOID:
				{
				alt128 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 128, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(128); }
			switch (alt128)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1262:9: '+' unaryExpression
				{
				DebugLocation(1262, 9);
				Match(input,PLUS,Follow._PLUS_in_unaryExpression6427); if (state.failed) return;
				DebugLocation(1262, 14);
				PushFollow(Follow._unaryExpression_in_unaryExpression6430);
				unaryExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1263:9: '-' unaryExpression
				{
				DebugLocation(1263, 9);
				Match(input,SUB,Follow._SUB_in_unaryExpression6440); if (state.failed) return;
				DebugLocation(1263, 13);
				PushFollow(Follow._unaryExpression_in_unaryExpression6442);
				unaryExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1264:9: '++' unaryExpression
				{
				DebugLocation(1264, 9);
				Match(input,PLUSPLUS,Follow._PLUSPLUS_in_unaryExpression6452); if (state.failed) return;
				DebugLocation(1264, 14);
				PushFollow(Follow._unaryExpression_in_unaryExpression6454);
				unaryExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1265:9: '--' unaryExpression
				{
				DebugLocation(1265, 9);
				Match(input,SUBSUB,Follow._SUBSUB_in_unaryExpression6464); if (state.failed) return;
				DebugLocation(1265, 14);
				PushFollow(Follow._unaryExpression_in_unaryExpression6466);
				unaryExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1266:9: unaryExpressionNotPlusMinus
				{
				DebugLocation(1266, 9);
				PushFollow(Follow._unaryExpressionNotPlusMinus_in_unaryExpression6476);
				unaryExpressionNotPlusMinus();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("unaryExpression", 86);
			LeaveRule("unaryExpression", 86);
			LeaveRule_unaryExpression();
	        if (state.backtracking > 0) { Memoize(input, 86, unaryExpression_StartIndex); }

	    }
	 	DebugLocation(1267, 4);
		} finally { DebugExitRule(GrammarFileName, "unaryExpression"); }
		return;

	}
	// $ANTLR end "unaryExpression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_unaryExpressionNotPlusMinus() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_unaryExpressionNotPlusMinus() {}
	// $ANTLR start "unaryExpressionNotPlusMinus"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1269:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );
	[GrammarRule("unaryExpressionNotPlusMinus")]
	private void unaryExpressionNotPlusMinus()
	{
		EnterRule_unaryExpressionNotPlusMinus();
		EnterRule("unaryExpressionNotPlusMinus", 87);
		TraceIn("unaryExpressionNotPlusMinus", 87);
	    int unaryExpressionNotPlusMinus_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "unaryExpressionNotPlusMinus");
		DebugLocation(1269, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 87)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1270:5: ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? )
			int alt131=4;
			try { DebugEnterDecision(131, decisionCanBacktrack[131]);
			switch (input.LA(1))
			{
			case TILDE:
				{
				alt131 = 1;
				}
				break;
			case BANG:
				{
				alt131 = 2;
				}
				break;
			case LPAREN:
				{
				int LA131_2 = input.LA(2);

				if ((EvaluatePredicate(synpred202_Java_fragment)))
				{
					alt131 = 3;
				}
				else if ((true))
				{
					alt131 = 4;
				}

				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CHARLITERAL:
			case DOUBLE:
			case DOUBLELITERAL:
			case FALSE:
			case FLOAT:
			case FLOATLITERAL:
			case IDENTIFIER:
			case INT:
			case INTLITERAL:
			case LONG:
			case LONGLITERAL:
			case NEW:
			case NULL:
			case SHORT:
			case STRINGLITERAL:
			case SUPER:
			case THIS:
			case TRUE:
			case VOID:
				{
				alt131 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 131, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(131); }
			switch (alt131)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1270:9: '~' unaryExpression
				{
				DebugLocation(1270, 9);
				Match(input,TILDE,Follow._TILDE_in_unaryExpressionNotPlusMinus6496); if (state.failed) return;
				DebugLocation(1270, 13);
				PushFollow(Follow._unaryExpression_in_unaryExpressionNotPlusMinus6498);
				unaryExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1271:9: '!' unaryExpression
				{
				DebugLocation(1271, 9);
				Match(input,BANG,Follow._BANG_in_unaryExpressionNotPlusMinus6508); if (state.failed) return;
				DebugLocation(1271, 13);
				PushFollow(Follow._unaryExpression_in_unaryExpressionNotPlusMinus6510);
				unaryExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1272:9: castExpression
				{
				DebugLocation(1272, 9);
				PushFollow(Follow._castExpression_in_unaryExpressionNotPlusMinus6520);
				castExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1273:9: primary ( selector )* ( '++' | '--' )?
				{
				DebugLocation(1273, 9);
				PushFollow(Follow._primary_in_unaryExpressionNotPlusMinus6530);
				primary();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1274, 9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1274:9: ( selector )*
				try { DebugEnterSubRule(129);
				while (true)
				{
					int alt129=2;
					try { DebugEnterDecision(129, decisionCanBacktrack[129]);
					int LA129_1 = input.LA(1);

					if ((LA129_1==DOT||LA129_1==LBRACKET))
					{
						alt129 = 1;
					}


					} finally { DebugExitDecision(129); }
					switch ( alt129 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1274:10: selector
						{
						DebugLocation(1274, 10);
						PushFollow(Follow._selector_in_unaryExpressionNotPlusMinus6541);
						selector();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop129;
					}
				}

				loop129:
					;

				} finally { DebugExitSubRule(129); }

				DebugLocation(1276, 9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1276:9: ( '++' | '--' )?
				int alt130=2;
				try { DebugEnterSubRule(130);
				try { DebugEnterDecision(130, decisionCanBacktrack[130]);
				int LA130_1 = input.LA(1);

				if ((LA130_1==PLUSPLUS||LA130_1==SUBSUB))
				{
					alt130 = 1;
				}
				} finally { DebugExitDecision(130); }
				switch (alt130)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:
					{
					DebugLocation(1276, 9);
					if (input.LA(1)==PLUSPLUS||input.LA(1)==SUBSUB)
					{
						input.Consume();
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				}
				} finally { DebugExitSubRule(130); }


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("unaryExpressionNotPlusMinus", 87);
			LeaveRule("unaryExpressionNotPlusMinus", 87);
			LeaveRule_unaryExpressionNotPlusMinus();
	        if (state.backtracking > 0) { Memoize(input, 87, unaryExpressionNotPlusMinus_StartIndex); }

	    }
	 	DebugLocation(1279, 4);
		} finally { DebugExitRule(GrammarFileName, "unaryExpressionNotPlusMinus"); }
		return;

	}
	// $ANTLR end "unaryExpressionNotPlusMinus"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_castExpression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_castExpression() {}
	// $ANTLR start "castExpression"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1281:1: castExpression : ( '(' primitiveType ')' unaryExpression | '(' type ')' unaryExpressionNotPlusMinus );
	[GrammarRule("castExpression")]
	private void castExpression()
	{
		EnterRule_castExpression();
		EnterRule("castExpression", 88);
		TraceIn("castExpression", 88);
	    int castExpression_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "castExpression");
		DebugLocation(1281, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 88)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1282:5: ( '(' primitiveType ')' unaryExpression | '(' type ')' unaryExpressionNotPlusMinus )
			int alt132=2;
			try { DebugEnterDecision(132, decisionCanBacktrack[132]);
			int LA132_1 = input.LA(1);

			if ((LA132_1==LPAREN))
			{
				int LA132_2 = input.LA(2);

				if ((EvaluatePredicate(synpred206_Java_fragment)))
				{
					alt132 = 1;
				}
				else if ((true))
				{
					alt132 = 2;
				}

			}

			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 132, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}

			} finally { DebugExitDecision(132); }
			switch (alt132)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1282:9: '(' primitiveType ')' unaryExpression
				{
				DebugLocation(1282, 9);
				Match(input,LPAREN,Follow._LPAREN_in_castExpression6611); if (state.failed) return;
				DebugLocation(1282, 13);
				PushFollow(Follow._primitiveType_in_castExpression6613);
				primitiveType();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1282, 27);
				Match(input,RPAREN,Follow._RPAREN_in_castExpression6615); if (state.failed) return;
				DebugLocation(1282, 31);
				PushFollow(Follow._unaryExpression_in_castExpression6617);
				unaryExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1283:9: '(' type ')' unaryExpressionNotPlusMinus
				{
				DebugLocation(1283, 9);
				Match(input,LPAREN,Follow._LPAREN_in_castExpression6627); if (state.failed) return;
				DebugLocation(1283, 13);
				PushFollow(Follow._type_in_castExpression6629);
				type();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1283, 18);
				Match(input,RPAREN,Follow._RPAREN_in_castExpression6631); if (state.failed) return;
				DebugLocation(1283, 22);
				PushFollow(Follow._unaryExpressionNotPlusMinus_in_castExpression6633);
				unaryExpressionNotPlusMinus();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("castExpression", 88);
			LeaveRule("castExpression", 88);
			LeaveRule_castExpression();
	        if (state.backtracking > 0) { Memoize(input, 88, castExpression_StartIndex); }

	    }
	 	DebugLocation(1284, 4);
		} finally { DebugExitRule(GrammarFileName, "castExpression"); }
		return;

	}
	// $ANTLR end "castExpression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_primary() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_primary() {}
	// $ANTLR start "primary"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1289:1: primary : ( parExpression | 'this' ( '.' IDENTIFIER )* ( identifierSuffix )? | IDENTIFIER ( '.' IDENTIFIER )* ( identifierSuffix )? | 'super' superSuffix | literal | creator | primitiveType ( '[' ']' )* '.' 'class' | 'void' '.' 'class' );
	[GrammarRule("primary")]
	private void primary()
	{
		EnterRule_primary();
		EnterRule("primary", 89);
		TraceIn("primary", 89);
	    int primary_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "primary");
		DebugLocation(1289, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 89)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1290:5: ( parExpression | 'this' ( '.' IDENTIFIER )* ( identifierSuffix )? | IDENTIFIER ( '.' IDENTIFIER )* ( identifierSuffix )? | 'super' superSuffix | literal | creator | primitiveType ( '[' ']' )* '.' 'class' | 'void' '.' 'class' )
			int alt138=8;
			try { DebugEnterDecision(138, decisionCanBacktrack[138]);
			switch (input.LA(1))
			{
			case LPAREN:
				{
				alt138 = 1;
				}
				break;
			case THIS:
				{
				alt138 = 2;
				}
				break;
			case IDENTIFIER:
				{
				alt138 = 3;
				}
				break;
			case SUPER:
				{
				alt138 = 4;
				}
				break;
			case CHARLITERAL:
			case DOUBLELITERAL:
			case FALSE:
			case FLOATLITERAL:
			case INTLITERAL:
			case LONGLITERAL:
			case NULL:
			case STRINGLITERAL:
			case TRUE:
				{
				alt138 = 5;
				}
				break;
			case NEW:
				{
				alt138 = 6;
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				alt138 = 7;
				}
				break;
			case VOID:
				{
				alt138 = 8;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 138, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(138); }
			switch (alt138)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1290:9: parExpression
				{
				DebugLocation(1290, 9);
				PushFollow(Follow._parExpression_in_primary6655);
				parExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1291:9: 'this' ( '.' IDENTIFIER )* ( identifierSuffix )?
				{
				DebugLocation(1291, 9);
				Match(input,THIS,Follow._THIS_in_primary6677); if (state.failed) return;
				DebugLocation(1292, 9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1292:9: ( '.' IDENTIFIER )*
				try { DebugEnterSubRule(133);
				while (true)
				{
					int alt133=2;
					try { DebugEnterDecision(133, decisionCanBacktrack[133]);
					int LA133_1 = input.LA(1);

					if ((LA133_1==DOT))
					{
						int LA133_2 = input.LA(2);

						if ((LA133_2==IDENTIFIER))
						{
							int LA133_3 = input.LA(3);

							if ((EvaluatePredicate(synpred208_Java_fragment)))
							{
								alt133 = 1;
							}


						}


					}


					} finally { DebugExitDecision(133); }
					switch ( alt133 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1292:10: '.' IDENTIFIER
						{
						DebugLocation(1292, 10);
						Match(input,DOT,Follow._DOT_in_primary6688); if (state.failed) return;
						DebugLocation(1292, 14);
						Match(input,IDENTIFIER,Follow._IDENTIFIER_in_primary6690); if (state.failed) return;

						}
						break;

					default:
						goto loop133;
					}
				}

				loop133:
					;

				} finally { DebugExitSubRule(133); }

				DebugLocation(1294, 9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1294:9: ( identifierSuffix )?
				int alt134=2;
				try { DebugEnterSubRule(134);
				try { DebugEnterDecision(134, decisionCanBacktrack[134]);
				switch (input.LA(1))
				{
				case LBRACKET:
					{
					int LA134_2 = input.LA(2);

					if ((EvaluatePredicate(synpred209_Java_fragment)))
					{
						alt134 = 1;
					}
					}
					break;
				case LPAREN:
					{
					alt134 = 1;
					}
					break;
				case DOT:
					{
					int LA134_2 = input.LA(2);

					if ((EvaluatePredicate(synpred209_Java_fragment)))
					{
						alt134 = 1;
					}
					}
					break;
				}

				} finally { DebugExitDecision(134); }
				switch (alt134)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1294:10: identifierSuffix
					{
					DebugLocation(1294, 10);
					PushFollow(Follow._identifierSuffix_in_primary6712);
					identifierSuffix();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(134); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1296:9: IDENTIFIER ( '.' IDENTIFIER )* ( identifierSuffix )?
				{
				DebugLocation(1296, 9);
				Match(input,IDENTIFIER,Follow._IDENTIFIER_in_primary6733); if (state.failed) return;
				DebugLocation(1297, 9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1297:9: ( '.' IDENTIFIER )*
				try { DebugEnterSubRule(135);
				while (true)
				{
					int alt135=2;
					try { DebugEnterDecision(135, decisionCanBacktrack[135]);
					int LA135_1 = input.LA(1);

					if ((LA135_1==DOT))
					{
						int LA135_2 = input.LA(2);

						if ((LA135_2==IDENTIFIER))
						{
							int LA135_3 = input.LA(3);

							if ((EvaluatePredicate(synpred211_Java_fragment)))
							{
								alt135 = 1;
							}


						}


					}


					} finally { DebugExitDecision(135); }
					switch ( alt135 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1297:10: '.' IDENTIFIER
						{
						DebugLocation(1297, 10);
						Match(input,DOT,Follow._DOT_in_primary6744); if (state.failed) return;
						DebugLocation(1297, 14);
						Match(input,IDENTIFIER,Follow._IDENTIFIER_in_primary6746); if (state.failed) return;

						}
						break;

					default:
						goto loop135;
					}
				}

				loop135:
					;

				} finally { DebugExitSubRule(135); }

				DebugLocation(1299, 9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1299:9: ( identifierSuffix )?
				int alt136=2;
				try { DebugEnterSubRule(136);
				try { DebugEnterDecision(136, decisionCanBacktrack[136]);
				switch (input.LA(1))
				{
				case LBRACKET:
					{
					int LA136_2 = input.LA(2);

					if ((EvaluatePredicate(synpred212_Java_fragment)))
					{
						alt136 = 1;
					}
					}
					break;
				case LPAREN:
					{
					alt136 = 1;
					}
					break;
				case DOT:
					{
					int LA136_2 = input.LA(2);

					if ((EvaluatePredicate(synpred212_Java_fragment)))
					{
						alt136 = 1;
					}
					}
					break;
				}

				} finally { DebugExitDecision(136); }
				switch (alt136)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1299:10: identifierSuffix
					{
					DebugLocation(1299, 10);
					PushFollow(Follow._identifierSuffix_in_primary6768);
					identifierSuffix();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(136); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1301:9: 'super' superSuffix
				{
				DebugLocation(1301, 9);
				Match(input,SUPER,Follow._SUPER_in_primary6789); if (state.failed) return;
				DebugLocation(1302, 9);
				PushFollow(Follow._superSuffix_in_primary6799);
				superSuffix();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1303:9: literal
				{
				DebugLocation(1303, 9);
				PushFollow(Follow._literal_in_primary6809);
				literal();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1304:9: creator
				{
				DebugLocation(1304, 9);
				PushFollow(Follow._creator_in_primary6819);
				creator();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1305:9: primitiveType ( '[' ']' )* '.' 'class'
				{
				DebugLocation(1305, 9);
				PushFollow(Follow._primitiveType_in_primary6829);
				primitiveType();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1306, 9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1306:9: ( '[' ']' )*
				try { DebugEnterSubRule(137);
				while (true)
				{
					int alt137=2;
					try { DebugEnterDecision(137, decisionCanBacktrack[137]);
					int LA137_1 = input.LA(1);

					if ((LA137_1==LBRACKET))
					{
						alt137 = 1;
					}


					} finally { DebugExitDecision(137); }
					switch ( alt137 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1306:10: '[' ']'
						{
						DebugLocation(1306, 10);
						Match(input,LBRACKET,Follow._LBRACKET_in_primary6840); if (state.failed) return;
						DebugLocation(1306, 14);
						Match(input,RBRACKET,Follow._RBRACKET_in_primary6842); if (state.failed) return;

						}
						break;

					default:
						goto loop137;
					}
				}

				loop137:
					;

				} finally { DebugExitSubRule(137); }

				DebugLocation(1308, 9);
				Match(input,DOT,Follow._DOT_in_primary6863); if (state.failed) return;
				DebugLocation(1308, 13);
				Match(input,CLASS,Follow._CLASS_in_primary6865); if (state.failed) return;

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1309:9: 'void' '.' 'class'
				{
				DebugLocation(1309, 9);
				Match(input,VOID,Follow._VOID_in_primary6875); if (state.failed) return;
				DebugLocation(1309, 16);
				Match(input,DOT,Follow._DOT_in_primary6877); if (state.failed) return;
				DebugLocation(1309, 20);
				Match(input,CLASS,Follow._CLASS_in_primary6879); if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("primary", 89);
			LeaveRule("primary", 89);
			LeaveRule_primary();
	        if (state.backtracking > 0) { Memoize(input, 89, primary_StartIndex); }

	    }
	 	DebugLocation(1310, 4);
		} finally { DebugExitRule(GrammarFileName, "primary"); }
		return;

	}
	// $ANTLR end "primary"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_superSuffix() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_superSuffix() {}
	// $ANTLR start "superSuffix"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1313:1: superSuffix : ( arguments | '.' ( typeArguments )? IDENTIFIER ( arguments )? );
	[GrammarRule("superSuffix")]
	private void superSuffix()
	{
		EnterRule_superSuffix();
		EnterRule("superSuffix", 90);
		TraceIn("superSuffix", 90);
	    int superSuffix_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "superSuffix");
		DebugLocation(1313, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 90)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1314:5: ( arguments | '.' ( typeArguments )? IDENTIFIER ( arguments )? )
			int alt141=2;
			try { DebugEnterDecision(141, decisionCanBacktrack[141]);
			int LA141_1 = input.LA(1);

			if ((LA141_1==LPAREN))
			{
				alt141 = 1;
			}
			else if ((LA141_1==DOT))
			{
				alt141 = 2;
			}

			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 141, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}

			} finally { DebugExitDecision(141); }
			switch (alt141)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1314:9: arguments
				{
				DebugLocation(1314, 9);
				PushFollow(Follow._arguments_in_superSuffix6905);
				arguments();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1315:9: '.' ( typeArguments )? IDENTIFIER ( arguments )?
				{
				DebugLocation(1315, 9);
				Match(input,DOT,Follow._DOT_in_superSuffix6915); if (state.failed) return;
				DebugLocation(1315, 13);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1315:13: ( typeArguments )?
				int alt139=2;
				try { DebugEnterSubRule(139);
				try { DebugEnterDecision(139, decisionCanBacktrack[139]);
				int LA139_1 = input.LA(1);

				if ((LA139_1==LT))
				{
					alt139 = 1;
				}
				} finally { DebugExitDecision(139); }
				switch (alt139)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1315:14: typeArguments
					{
					DebugLocation(1315, 14);
					PushFollow(Follow._typeArguments_in_superSuffix6918);
					typeArguments();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(139); }

				DebugLocation(1317, 9);
				Match(input,IDENTIFIER,Follow._IDENTIFIER_in_superSuffix6939); if (state.failed) return;
				DebugLocation(1318, 9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1318:9: ( arguments )?
				int alt140=2;
				try { DebugEnterSubRule(140);
				try { DebugEnterDecision(140, decisionCanBacktrack[140]);
				int LA140_1 = input.LA(1);

				if ((LA140_1==LPAREN))
				{
					alt140 = 1;
				}
				} finally { DebugExitDecision(140); }
				switch (alt140)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1318:10: arguments
					{
					DebugLocation(1318, 10);
					PushFollow(Follow._arguments_in_superSuffix6950);
					arguments();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(140); }


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("superSuffix", 90);
			LeaveRule("superSuffix", 90);
			LeaveRule_superSuffix();
	        if (state.backtracking > 0) { Memoize(input, 90, superSuffix_StartIndex); }

	    }
	 	DebugLocation(1320, 4);
		} finally { DebugExitRule(GrammarFileName, "superSuffix"); }
		return;

	}
	// $ANTLR end "superSuffix"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_identifierSuffix() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_identifierSuffix() {}
	// $ANTLR start "identifierSuffix"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1323:1: identifierSuffix : ( ( '[' ']' )+ '.' 'class' | ( '[' expression ']' )+ | arguments | '.' 'class' | '.' nonWildcardTypeArguments IDENTIFIER arguments | '.' 'this' | '.' 'super' arguments | innerCreator );
	[GrammarRule("identifierSuffix")]
	private void identifierSuffix()
	{
		EnterRule_identifierSuffix();
		EnterRule("identifierSuffix", 91);
		TraceIn("identifierSuffix", 91);
	    int identifierSuffix_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "identifierSuffix");
		DebugLocation(1323, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 91)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1324:5: ( ( '[' ']' )+ '.' 'class' | ( '[' expression ']' )+ | arguments | '.' 'class' | '.' nonWildcardTypeArguments IDENTIFIER arguments | '.' 'this' | '.' 'super' arguments | innerCreator )
			int alt144=8;
			try { DebugEnterDecision(144, decisionCanBacktrack[144]);
			switch (input.LA(1))
			{
			case LBRACKET:
				{
				int LA144_2 = input.LA(2);

				if ((LA144_2==RBRACKET))
				{
					alt144 = 1;
				}
				else if ((LA144_2==BANG||LA144_2==BOOLEAN||LA144_2==BYTE||(LA144_2>=CHAR && LA144_2<=CHARLITERAL)||(LA144_2>=DOUBLE && LA144_2<=DOUBLELITERAL)||LA144_2==FALSE||(LA144_2>=FLOAT && LA144_2<=FLOATLITERAL)||LA144_2==IDENTIFIER||LA144_2==INT||LA144_2==INTLITERAL||(LA144_2>=LONG && LA144_2<=LPAREN)||(LA144_2>=NEW && LA144_2<=NULL)||LA144_2==PLUS||LA144_2==PLUSPLUS||LA144_2==SHORT||(LA144_2>=STRINGLITERAL && LA144_2<=SUB)||(LA144_2>=SUBSUB && LA144_2<=SUPER)||LA144_2==THIS||LA144_2==TILDE||LA144_2==TRUE||LA144_2==VOID))
				{
					alt144 = 2;
				}

				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 144, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case LPAREN:
				{
				alt144 = 3;
				}
				break;
			case DOT:
				{
				switch (input.LA(2))
				{
				case CLASS:
					{
					alt144 = 4;
					}
					break;
				case THIS:
					{
					alt144 = 6;
					}
					break;
				case SUPER:
					{
					alt144 = 7;
					}
					break;
				case NEW:
					{
					alt144 = 8;
					}
					break;
				case LT:
					{
					alt144 = 5;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 144, 3, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 144, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(144); }
			switch (alt144)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1324:9: ( '[' ']' )+ '.' 'class'
				{
				DebugLocation(1324, 9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1324:9: ( '[' ']' )+
				int cnt142=0;
				try { DebugEnterSubRule(142);
				while (true)
				{
					int alt142=2;
					try { DebugEnterDecision(142, decisionCanBacktrack[142]);
					int LA142_1 = input.LA(1);

					if ((LA142_1==LBRACKET))
					{
						alt142 = 1;
					}


					} finally { DebugExitDecision(142); }
					switch (alt142)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1324:10: '[' ']'
						{
						DebugLocation(1324, 10);
						Match(input,LBRACKET,Follow._LBRACKET_in_identifierSuffix6983); if (state.failed) return;
						DebugLocation(1324, 14);
						Match(input,RBRACKET,Follow._RBRACKET_in_identifierSuffix6985); if (state.failed) return;

						}
						break;

					default:
						if (cnt142 >= 1)
							goto loop142;

						if (state.backtracking>0) {state.failed=true; return;}
						EarlyExitException eee142 = new EarlyExitException( 142, input );
						DebugRecognitionException(eee142);
						throw eee142;
					}
					cnt142++;
				}
				loop142:
					;

				} finally { DebugExitSubRule(142); }

				DebugLocation(1326, 9);
				Match(input,DOT,Follow._DOT_in_identifierSuffix7006); if (state.failed) return;
				DebugLocation(1326, 13);
				Match(input,CLASS,Follow._CLASS_in_identifierSuffix7008); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1327:9: ( '[' expression ']' )+
				{
				DebugLocation(1327, 9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1327:9: ( '[' expression ']' )+
				int cnt143=0;
				try { DebugEnterSubRule(143);
				while (true)
				{
					int alt143=2;
					try { DebugEnterDecision(143, decisionCanBacktrack[143]);
					int LA143_1 = input.LA(1);

					if ((LA143_1==LBRACKET))
					{
						int LA143_2 = input.LA(2);

						if ((EvaluatePredicate(synpred224_Java_fragment)))
						{
							alt143 = 1;
						}


					}


					} finally { DebugExitDecision(143); }
					switch (alt143)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1327:10: '[' expression ']'
						{
						DebugLocation(1327, 10);
						Match(input,LBRACKET,Follow._LBRACKET_in_identifierSuffix7019); if (state.failed) return;
						DebugLocation(1327, 14);
						PushFollow(Follow._expression_in_identifierSuffix7021);
						expression();
						PopFollow();
						if (state.failed) return;
						DebugLocation(1327, 25);
						Match(input,RBRACKET,Follow._RBRACKET_in_identifierSuffix7023); if (state.failed) return;

						}
						break;

					default:
						if (cnt143 >= 1)
							goto loop143;

						if (state.backtracking>0) {state.failed=true; return;}
						EarlyExitException eee143 = new EarlyExitException( 143, input );
						DebugRecognitionException(eee143);
						throw eee143;
					}
					cnt143++;
				}
				loop143:
					;

				} finally { DebugExitSubRule(143); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1329:9: arguments
				{
				DebugLocation(1329, 9);
				PushFollow(Follow._arguments_in_identifierSuffix7044);
				arguments();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1330:9: '.' 'class'
				{
				DebugLocation(1330, 9);
				Match(input,DOT,Follow._DOT_in_identifierSuffix7054); if (state.failed) return;
				DebugLocation(1330, 13);
				Match(input,CLASS,Follow._CLASS_in_identifierSuffix7056); if (state.failed) return;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1331:9: '.' nonWildcardTypeArguments IDENTIFIER arguments
				{
				DebugLocation(1331, 9);
				Match(input,DOT,Follow._DOT_in_identifierSuffix7066); if (state.failed) return;
				DebugLocation(1331, 13);
				PushFollow(Follow._nonWildcardTypeArguments_in_identifierSuffix7068);
				nonWildcardTypeArguments();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1331, 38);
				Match(input,IDENTIFIER,Follow._IDENTIFIER_in_identifierSuffix7070); if (state.failed) return;
				DebugLocation(1331, 49);
				PushFollow(Follow._arguments_in_identifierSuffix7072);
				arguments();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1332:9: '.' 'this'
				{
				DebugLocation(1332, 9);
				Match(input,DOT,Follow._DOT_in_identifierSuffix7082); if (state.failed) return;
				DebugLocation(1332, 13);
				Match(input,THIS,Follow._THIS_in_identifierSuffix7084); if (state.failed) return;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1333:9: '.' 'super' arguments
				{
				DebugLocation(1333, 9);
				Match(input,DOT,Follow._DOT_in_identifierSuffix7094); if (state.failed) return;
				DebugLocation(1333, 13);
				Match(input,SUPER,Follow._SUPER_in_identifierSuffix7096); if (state.failed) return;
				DebugLocation(1333, 21);
				PushFollow(Follow._arguments_in_identifierSuffix7098);
				arguments();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1334:9: innerCreator
				{
				DebugLocation(1334, 9);
				PushFollow(Follow._innerCreator_in_identifierSuffix7108);
				innerCreator();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("identifierSuffix", 91);
			LeaveRule("identifierSuffix", 91);
			LeaveRule_identifierSuffix();
	        if (state.backtracking > 0) { Memoize(input, 91, identifierSuffix_StartIndex); }

	    }
	 	DebugLocation(1335, 4);
		} finally { DebugExitRule(GrammarFileName, "identifierSuffix"); }
		return;

	}
	// $ANTLR end "identifierSuffix"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_selector() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_selector() {}
	// $ANTLR start "selector"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1338:1: selector : ( '.' IDENTIFIER ( arguments )? | '.' 'this' | '.' 'super' superSuffix | innerCreator | '[' expression ']' );
	[GrammarRule("selector")]
	private void selector()
	{
		EnterRule_selector();
		EnterRule("selector", 92);
		TraceIn("selector", 92);
	    int selector_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "selector");
		DebugLocation(1338, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 92)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1339:5: ( '.' IDENTIFIER ( arguments )? | '.' 'this' | '.' 'super' superSuffix | innerCreator | '[' expression ']' )
			int alt146=5;
			try { DebugEnterDecision(146, decisionCanBacktrack[146]);
			int LA146_1 = input.LA(1);

			if ((LA146_1==DOT))
			{
				switch (input.LA(2))
				{
				case IDENTIFIER:
					{
					alt146 = 1;
					}
					break;
				case THIS:
					{
					alt146 = 2;
					}
					break;
				case SUPER:
					{
					alt146 = 3;
					}
					break;
				case NEW:
					{
					alt146 = 4;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 146, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if ((LA146_1==LBRACKET))
			{
				alt146 = 5;
			}

			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 146, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}

			} finally { DebugExitDecision(146); }
			switch (alt146)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1339:9: '.' IDENTIFIER ( arguments )?
				{
				DebugLocation(1339, 9);
				Match(input,DOT,Follow._DOT_in_selector7130); if (state.failed) return;
				DebugLocation(1339, 13);
				Match(input,IDENTIFIER,Follow._IDENTIFIER_in_selector7132); if (state.failed) return;
				DebugLocation(1340, 9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1340:9: ( arguments )?
				int alt145=2;
				try { DebugEnterSubRule(145);
				try { DebugEnterDecision(145, decisionCanBacktrack[145]);
				int LA145_1 = input.LA(1);

				if ((LA145_1==LPAREN))
				{
					alt145 = 1;
				}
				} finally { DebugExitDecision(145); }
				switch (alt145)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1340:10: arguments
					{
					DebugLocation(1340, 10);
					PushFollow(Follow._arguments_in_selector7143);
					arguments();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(145); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1342:9: '.' 'this'
				{
				DebugLocation(1342, 9);
				Match(input,DOT,Follow._DOT_in_selector7164); if (state.failed) return;
				DebugLocation(1342, 13);
				Match(input,THIS,Follow._THIS_in_selector7166); if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1343:9: '.' 'super' superSuffix
				{
				DebugLocation(1343, 9);
				Match(input,DOT,Follow._DOT_in_selector7176); if (state.failed) return;
				DebugLocation(1343, 13);
				Match(input,SUPER,Follow._SUPER_in_selector7178); if (state.failed) return;
				DebugLocation(1344, 9);
				PushFollow(Follow._superSuffix_in_selector7188);
				superSuffix();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1345:9: innerCreator
				{
				DebugLocation(1345, 9);
				PushFollow(Follow._innerCreator_in_selector7198);
				innerCreator();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1346:9: '[' expression ']'
				{
				DebugLocation(1346, 9);
				Match(input,LBRACKET,Follow._LBRACKET_in_selector7208); if (state.failed) return;
				DebugLocation(1346, 13);
				PushFollow(Follow._expression_in_selector7210);
				expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1346, 24);
				Match(input,RBRACKET,Follow._RBRACKET_in_selector7212); if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("selector", 92);
			LeaveRule("selector", 92);
			LeaveRule_selector();
	        if (state.backtracking > 0) { Memoize(input, 92, selector_StartIndex); }

	    }
	 	DebugLocation(1347, 4);
		} finally { DebugExitRule(GrammarFileName, "selector"); }
		return;

	}
	// $ANTLR end "selector"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_creator() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_creator() {}
	// $ANTLR start "creator"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1349:1: creator : ( 'new' nonWildcardTypeArguments classOrInterfaceType classCreatorRest | 'new' classOrInterfaceType classCreatorRest | arrayCreator );
	[GrammarRule("creator")]
	private void creator()
	{
		EnterRule_creator();
		EnterRule("creator", 93);
		TraceIn("creator", 93);
	    int creator_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "creator");
		DebugLocation(1349, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 93)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1350:5: ( 'new' nonWildcardTypeArguments classOrInterfaceType classCreatorRest | 'new' classOrInterfaceType classCreatorRest | arrayCreator )
			int alt147=3;
			try { DebugEnterDecision(147, decisionCanBacktrack[147]);
			int LA147_1 = input.LA(1);

			if ((LA147_1==NEW))
			{
				int LA147_2 = input.LA(2);

				if ((EvaluatePredicate(synpred236_Java_fragment)))
				{
					alt147 = 1;
				}
				else if ((EvaluatePredicate(synpred237_Java_fragment)))
				{
					alt147 = 2;
				}
				else if ((true))
				{
					alt147 = 3;
				}

			}

			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 147, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}

			} finally { DebugExitDecision(147); }
			switch (alt147)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1350:9: 'new' nonWildcardTypeArguments classOrInterfaceType classCreatorRest
				{
				DebugLocation(1350, 9);
				Match(input,NEW,Follow._NEW_in_creator7232); if (state.failed) return;
				DebugLocation(1350, 15);
				PushFollow(Follow._nonWildcardTypeArguments_in_creator7234);
				nonWildcardTypeArguments();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1350, 40);
				PushFollow(Follow._classOrInterfaceType_in_creator7236);
				classOrInterfaceType();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1350, 61);
				PushFollow(Follow._classCreatorRest_in_creator7238);
				classCreatorRest();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1351:9: 'new' classOrInterfaceType classCreatorRest
				{
				DebugLocation(1351, 9);
				Match(input,NEW,Follow._NEW_in_creator7248); if (state.failed) return;
				DebugLocation(1351, 15);
				PushFollow(Follow._classOrInterfaceType_in_creator7250);
				classOrInterfaceType();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1351, 36);
				PushFollow(Follow._classCreatorRest_in_creator7252);
				classCreatorRest();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1352:9: arrayCreator
				{
				DebugLocation(1352, 9);
				PushFollow(Follow._arrayCreator_in_creator7262);
				arrayCreator();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("creator", 93);
			LeaveRule("creator", 93);
			LeaveRule_creator();
	        if (state.backtracking > 0) { Memoize(input, 93, creator_StartIndex); }

	    }
	 	DebugLocation(1353, 4);
		} finally { DebugExitRule(GrammarFileName, "creator"); }
		return;

	}
	// $ANTLR end "creator"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_arrayCreator() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_arrayCreator() {}
	// $ANTLR start "arrayCreator"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1355:1: arrayCreator : ( 'new' createdName '[' ']' ( '[' ']' )* arrayInitializer | 'new' createdName '[' expression ']' ( '[' expression ']' )* ( '[' ']' )* );
	[GrammarRule("arrayCreator")]
	private void arrayCreator()
	{
		EnterRule_arrayCreator();
		EnterRule("arrayCreator", 94);
		TraceIn("arrayCreator", 94);
	    int arrayCreator_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "arrayCreator");
		DebugLocation(1355, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 94)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1356:5: ( 'new' createdName '[' ']' ( '[' ']' )* arrayInitializer | 'new' createdName '[' expression ']' ( '[' expression ']' )* ( '[' ']' )* )
			int alt151=2;
			try { DebugEnterDecision(151, decisionCanBacktrack[151]);
			int LA151_1 = input.LA(1);

			if ((LA151_1==NEW))
			{
				int LA151_2 = input.LA(2);

				if ((EvaluatePredicate(synpred239_Java_fragment)))
				{
					alt151 = 1;
				}
				else if ((true))
				{
					alt151 = 2;
				}

			}

			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 151, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}

			} finally { DebugExitDecision(151); }
			switch (alt151)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1356:9: 'new' createdName '[' ']' ( '[' ']' )* arrayInitializer
				{
				DebugLocation(1356, 9);
				Match(input,NEW,Follow._NEW_in_arrayCreator7282); if (state.failed) return;
				DebugLocation(1356, 15);
				PushFollow(Follow._createdName_in_arrayCreator7284);
				createdName();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1357, 9);
				Match(input,LBRACKET,Follow._LBRACKET_in_arrayCreator7294); if (state.failed) return;
				DebugLocation(1357, 13);
				Match(input,RBRACKET,Follow._RBRACKET_in_arrayCreator7296); if (state.failed) return;
				DebugLocation(1358, 9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1358:9: ( '[' ']' )*
				try { DebugEnterSubRule(148);
				while (true)
				{
					int alt148=2;
					try { DebugEnterDecision(148, decisionCanBacktrack[148]);
					int LA148_1 = input.LA(1);

					if ((LA148_1==LBRACKET))
					{
						alt148 = 1;
					}


					} finally { DebugExitDecision(148); }
					switch ( alt148 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1358:10: '[' ']'
						{
						DebugLocation(1358, 10);
						Match(input,LBRACKET,Follow._LBRACKET_in_arrayCreator7307); if (state.failed) return;
						DebugLocation(1358, 14);
						Match(input,RBRACKET,Follow._RBRACKET_in_arrayCreator7309); if (state.failed) return;

						}
						break;

					default:
						goto loop148;
					}
				}

				loop148:
					;

				} finally { DebugExitSubRule(148); }

				DebugLocation(1360, 9);
				PushFollow(Follow._arrayInitializer_in_arrayCreator7330);
				arrayInitializer();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1362:9: 'new' createdName '[' expression ']' ( '[' expression ']' )* ( '[' ']' )*
				{
				DebugLocation(1362, 9);
				Match(input,NEW,Follow._NEW_in_arrayCreator7341); if (state.failed) return;
				DebugLocation(1362, 15);
				PushFollow(Follow._createdName_in_arrayCreator7343);
				createdName();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1363, 9);
				Match(input,LBRACKET,Follow._LBRACKET_in_arrayCreator7353); if (state.failed) return;
				DebugLocation(1363, 13);
				PushFollow(Follow._expression_in_arrayCreator7355);
				expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1364, 9);
				Match(input,RBRACKET,Follow._RBRACKET_in_arrayCreator7365); if (state.failed) return;
				DebugLocation(1365, 9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1365:9: ( '[' expression ']' )*
				try { DebugEnterSubRule(149);
				while (true)
				{
					int alt149=2;
					try { DebugEnterDecision(149, decisionCanBacktrack[149]);
					int LA149_1 = input.LA(1);

					if ((LA149_1==LBRACKET))
					{
						int LA149_2 = input.LA(2);

						if ((EvaluatePredicate(synpred240_Java_fragment)))
						{
							alt149 = 1;
						}


					}


					} finally { DebugExitDecision(149); }
					switch ( alt149 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1365:13: '[' expression ']'
						{
						DebugLocation(1365, 13);
						Match(input,LBRACKET,Follow._LBRACKET_in_arrayCreator7379); if (state.failed) return;
						DebugLocation(1365, 17);
						PushFollow(Follow._expression_in_arrayCreator7381);
						expression();
						PopFollow();
						if (state.failed) return;
						DebugLocation(1366, 13);
						Match(input,RBRACKET,Follow._RBRACKET_in_arrayCreator7395); if (state.failed) return;

						}
						break;

					default:
						goto loop149;
					}
				}

				loop149:
					;

				} finally { DebugExitSubRule(149); }

				DebugLocation(1368, 9);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1368:9: ( '[' ']' )*
				try { DebugEnterSubRule(150);
				while (true)
				{
					int alt150=2;
					try { DebugEnterDecision(150, decisionCanBacktrack[150]);
					int LA150_1 = input.LA(1);

					if ((LA150_1==LBRACKET))
					{
						int LA150_2 = input.LA(2);

						if ((LA150_2==RBRACKET))
						{
							alt150 = 1;
						}


					}


					} finally { DebugExitDecision(150); }
					switch ( alt150 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1368:10: '[' ']'
						{
						DebugLocation(1368, 10);
						Match(input,LBRACKET,Follow._LBRACKET_in_arrayCreator7417); if (state.failed) return;
						DebugLocation(1368, 14);
						Match(input,RBRACKET,Follow._RBRACKET_in_arrayCreator7419); if (state.failed) return;

						}
						break;

					default:
						goto loop150;
					}
				}

				loop150:
					;

				} finally { DebugExitSubRule(150); }


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arrayCreator", 94);
			LeaveRule("arrayCreator", 94);
			LeaveRule_arrayCreator();
	        if (state.backtracking > 0) { Memoize(input, 94, arrayCreator_StartIndex); }

	    }
	 	DebugLocation(1370, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayCreator"); }
		return;

	}
	// $ANTLR end "arrayCreator"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_variableInitializer() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_variableInitializer() {}
	// $ANTLR start "variableInitializer"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1372:1: variableInitializer : ( arrayInitializer | expression );
	[GrammarRule("variableInitializer")]
	private void variableInitializer()
	{
		EnterRule_variableInitializer();
		EnterRule("variableInitializer", 95);
		TraceIn("variableInitializer", 95);
	    int variableInitializer_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "variableInitializer");
		DebugLocation(1372, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 95)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1373:5: ( arrayInitializer | expression )
			int alt152=2;
			try { DebugEnterDecision(152, decisionCanBacktrack[152]);
			int LA152_1 = input.LA(1);

			if ((LA152_1==LBRACE))
			{
				alt152 = 1;
			}
			else if ((LA152_1==BANG||LA152_1==BOOLEAN||LA152_1==BYTE||(LA152_1>=CHAR && LA152_1<=CHARLITERAL)||(LA152_1>=DOUBLE && LA152_1<=DOUBLELITERAL)||LA152_1==FALSE||(LA152_1>=FLOAT && LA152_1<=FLOATLITERAL)||LA152_1==IDENTIFIER||LA152_1==INT||LA152_1==INTLITERAL||(LA152_1>=LONG && LA152_1<=LPAREN)||(LA152_1>=NEW && LA152_1<=NULL)||LA152_1==PLUS||LA152_1==PLUSPLUS||LA152_1==SHORT||(LA152_1>=STRINGLITERAL && LA152_1<=SUB)||(LA152_1>=SUBSUB && LA152_1<=SUPER)||LA152_1==THIS||LA152_1==TILDE||LA152_1==TRUE||LA152_1==VOID))
			{
				alt152 = 2;
			}

			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 152, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}

			} finally { DebugExitDecision(152); }
			switch (alt152)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1373:9: arrayInitializer
				{
				DebugLocation(1373, 9);
				PushFollow(Follow._arrayInitializer_in_variableInitializer7450);
				arrayInitializer();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1374:9: expression
				{
				DebugLocation(1374, 9);
				PushFollow(Follow._expression_in_variableInitializer7460);
				expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableInitializer", 95);
			LeaveRule("variableInitializer", 95);
			LeaveRule_variableInitializer();
	        if (state.backtracking > 0) { Memoize(input, 95, variableInitializer_StartIndex); }

	    }
	 	DebugLocation(1375, 4);
		} finally { DebugExitRule(GrammarFileName, "variableInitializer"); }
		return;

	}
	// $ANTLR end "variableInitializer"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_arrayInitializer() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_arrayInitializer() {}
	// $ANTLR start "arrayInitializer"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1377:1: arrayInitializer : '{' ( variableInitializer ( ',' variableInitializer )* )? ( ',' )? '}' ;
	[GrammarRule("arrayInitializer")]
	private void arrayInitializer()
	{
		EnterRule_arrayInitializer();
		EnterRule("arrayInitializer", 96);
		TraceIn("arrayInitializer", 96);
	    int arrayInitializer_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "arrayInitializer");
		DebugLocation(1377, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 96)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1378:5: ( '{' ( variableInitializer ( ',' variableInitializer )* )? ( ',' )? '}' )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1378:9: '{' ( variableInitializer ( ',' variableInitializer )* )? ( ',' )? '}'
			{
			DebugLocation(1378, 9);
			Match(input,LBRACE,Follow._LBRACE_in_arrayInitializer7480); if (state.failed) return;
			DebugLocation(1379, 13);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1379:13: ( variableInitializer ( ',' variableInitializer )* )?
			int alt154=2;
			try { DebugEnterSubRule(154);
			try { DebugEnterDecision(154, decisionCanBacktrack[154]);
			int LA154_1 = input.LA(1);

			if ((LA154_1==BANG||LA154_1==BOOLEAN||LA154_1==BYTE||(LA154_1>=CHAR && LA154_1<=CHARLITERAL)||(LA154_1>=DOUBLE && LA154_1<=DOUBLELITERAL)||LA154_1==FALSE||(LA154_1>=FLOAT && LA154_1<=FLOATLITERAL)||LA154_1==IDENTIFIER||LA154_1==INT||LA154_1==INTLITERAL||LA154_1==LBRACE||(LA154_1>=LONG && LA154_1<=LPAREN)||(LA154_1>=NEW && LA154_1<=NULL)||LA154_1==PLUS||LA154_1==PLUSPLUS||LA154_1==SHORT||(LA154_1>=STRINGLITERAL && LA154_1<=SUB)||(LA154_1>=SUBSUB && LA154_1<=SUPER)||LA154_1==THIS||LA154_1==TILDE||LA154_1==TRUE||LA154_1==VOID))
			{
				alt154 = 1;
			}
			} finally { DebugExitDecision(154); }
			switch (alt154)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1379:14: variableInitializer ( ',' variableInitializer )*
				{
				DebugLocation(1379, 14);
				PushFollow(Follow._variableInitializer_in_arrayInitializer7496);
				variableInitializer();
				PopFollow();
				if (state.failed) return;
				DebugLocation(1380, 17);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1380:17: ( ',' variableInitializer )*
				try { DebugEnterSubRule(153);
				while (true)
				{
					int alt153=2;
					try { DebugEnterDecision(153, decisionCanBacktrack[153]);
					int LA153_1 = input.LA(1);

					if ((LA153_1==COMMA))
					{
						int LA153_2 = input.LA(2);

						if ((LA153_2==BANG||LA153_2==BOOLEAN||LA153_2==BYTE||(LA153_2>=CHAR && LA153_2<=CHARLITERAL)||(LA153_2>=DOUBLE && LA153_2<=DOUBLELITERAL)||LA153_2==FALSE||(LA153_2>=FLOAT && LA153_2<=FLOATLITERAL)||LA153_2==IDENTIFIER||LA153_2==INT||LA153_2==INTLITERAL||LA153_2==LBRACE||(LA153_2>=LONG && LA153_2<=LPAREN)||(LA153_2>=NEW && LA153_2<=NULL)||LA153_2==PLUS||LA153_2==PLUSPLUS||LA153_2==SHORT||(LA153_2>=STRINGLITERAL && LA153_2<=SUB)||(LA153_2>=SUBSUB && LA153_2<=SUPER)||LA153_2==THIS||LA153_2==TILDE||LA153_2==TRUE||LA153_2==VOID))
						{
							alt153 = 1;
						}


					}


					} finally { DebugExitDecision(153); }
					switch ( alt153 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1380:18: ',' variableInitializer
						{
						DebugLocation(1380, 18);
						Match(input,COMMA,Follow._COMMA_in_arrayInitializer7515); if (state.failed) return;
						DebugLocation(1380, 22);
						PushFollow(Follow._variableInitializer_in_arrayInitializer7517);
						variableInitializer();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop153;
					}
				}

				loop153:
					;

				} finally { DebugExitSubRule(153); }


				}
				break;

			}
			} finally { DebugExitSubRule(154); }

			DebugLocation(1383, 13);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1383:13: ( ',' )?
			int alt155=2;
			try { DebugEnterSubRule(155);
			try { DebugEnterDecision(155, decisionCanBacktrack[155]);
			int LA155_1 = input.LA(1);

			if ((LA155_1==COMMA))
			{
				alt155 = 1;
			}
			} finally { DebugExitDecision(155); }
			switch (alt155)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1383:14: ','
				{
				DebugLocation(1383, 14);
				Match(input,COMMA,Follow._COMMA_in_arrayInitializer7567); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(155); }

			DebugLocation(1384, 9);
			Match(input,RBRACE,Follow._RBRACE_in_arrayInitializer7580); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arrayInitializer", 96);
			LeaveRule("arrayInitializer", 96);
			LeaveRule_arrayInitializer();
	        if (state.backtracking > 0) { Memoize(input, 96, arrayInitializer_StartIndex); }

	    }
	 	DebugLocation(1385, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayInitializer"); }
		return;

	}
	// $ANTLR end "arrayInitializer"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_createdName() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_createdName() {}
	// $ANTLR start "createdName"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1388:1: createdName : ( classOrInterfaceType | primitiveType );
	[GrammarRule("createdName")]
	private void createdName()
	{
		EnterRule_createdName();
		EnterRule("createdName", 97);
		TraceIn("createdName", 97);
	    int createdName_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "createdName");
		DebugLocation(1388, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 97)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1389:5: ( classOrInterfaceType | primitiveType )
			int alt156=2;
			try { DebugEnterDecision(156, decisionCanBacktrack[156]);
			int LA156_1 = input.LA(1);

			if ((LA156_1==IDENTIFIER))
			{
				alt156 = 1;
			}
			else if ((LA156_1==BOOLEAN||LA156_1==BYTE||LA156_1==CHAR||LA156_1==DOUBLE||LA156_1==FLOAT||LA156_1==INT||LA156_1==LONG||LA156_1==SHORT))
			{
				alt156 = 2;
			}

			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 156, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}

			} finally { DebugExitDecision(156); }
			switch (alt156)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1389:9: classOrInterfaceType
				{
				DebugLocation(1389, 9);
				PushFollow(Follow._classOrInterfaceType_in_createdName7614);
				classOrInterfaceType();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1390:9: primitiveType
				{
				DebugLocation(1390, 9);
				PushFollow(Follow._primitiveType_in_createdName7624);
				primitiveType();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("createdName", 97);
			LeaveRule("createdName", 97);
			LeaveRule_createdName();
	        if (state.backtracking > 0) { Memoize(input, 97, createdName_StartIndex); }

	    }
	 	DebugLocation(1391, 4);
		} finally { DebugExitRule(GrammarFileName, "createdName"); }
		return;

	}
	// $ANTLR end "createdName"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_innerCreator() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_innerCreator() {}
	// $ANTLR start "innerCreator"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1393:1: innerCreator : '.' 'new' ( nonWildcardTypeArguments )? IDENTIFIER ( typeArguments )? classCreatorRest ;
	[GrammarRule("innerCreator")]
	private void innerCreator()
	{
		EnterRule_innerCreator();
		EnterRule("innerCreator", 98);
		TraceIn("innerCreator", 98);
	    int innerCreator_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "innerCreator");
		DebugLocation(1393, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 98)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1394:5: ( '.' 'new' ( nonWildcardTypeArguments )? IDENTIFIER ( typeArguments )? classCreatorRest )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1394:9: '.' 'new' ( nonWildcardTypeArguments )? IDENTIFIER ( typeArguments )? classCreatorRest
			{
			DebugLocation(1394, 9);
			Match(input,DOT,Follow._DOT_in_innerCreator7645); if (state.failed) return;
			DebugLocation(1394, 13);
			Match(input,NEW,Follow._NEW_in_innerCreator7647); if (state.failed) return;
			DebugLocation(1395, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1395:9: ( nonWildcardTypeArguments )?
			int alt157=2;
			try { DebugEnterSubRule(157);
			try { DebugEnterDecision(157, decisionCanBacktrack[157]);
			int LA157_1 = input.LA(1);

			if ((LA157_1==LT))
			{
				alt157 = 1;
			}
			} finally { DebugExitDecision(157); }
			switch (alt157)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1395:10: nonWildcardTypeArguments
				{
				DebugLocation(1395, 10);
				PushFollow(Follow._nonWildcardTypeArguments_in_innerCreator7658);
				nonWildcardTypeArguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(157); }

			DebugLocation(1397, 9);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_innerCreator7679); if (state.failed) return;
			DebugLocation(1398, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1398:9: ( typeArguments )?
			int alt158=2;
			try { DebugEnterSubRule(158);
			try { DebugEnterDecision(158, decisionCanBacktrack[158]);
			int LA158_1 = input.LA(1);

			if ((LA158_1==LT))
			{
				alt158 = 1;
			}
			} finally { DebugExitDecision(158); }
			switch (alt158)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1398:10: typeArguments
				{
				DebugLocation(1398, 10);
				PushFollow(Follow._typeArguments_in_innerCreator7690);
				typeArguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(158); }

			DebugLocation(1400, 9);
			PushFollow(Follow._classCreatorRest_in_innerCreator7711);
			classCreatorRest();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("innerCreator", 98);
			LeaveRule("innerCreator", 98);
			LeaveRule_innerCreator();
	        if (state.backtracking > 0) { Memoize(input, 98, innerCreator_StartIndex); }

	    }
	 	DebugLocation(1401, 4);
		} finally { DebugExitRule(GrammarFileName, "innerCreator"); }
		return;

	}
	// $ANTLR end "innerCreator"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_classCreatorRest() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_classCreatorRest() {}
	// $ANTLR start "classCreatorRest"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1404:1: classCreatorRest : arguments ( classBody )? ;
	[GrammarRule("classCreatorRest")]
	private void classCreatorRest()
	{
		EnterRule_classCreatorRest();
		EnterRule("classCreatorRest", 99);
		TraceIn("classCreatorRest", 99);
	    int classCreatorRest_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "classCreatorRest");
		DebugLocation(1404, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 99)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1405:5: ( arguments ( classBody )? )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1405:9: arguments ( classBody )?
			{
			DebugLocation(1405, 9);
			PushFollow(Follow._arguments_in_classCreatorRest7732);
			arguments();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1406, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1406:9: ( classBody )?
			int alt159=2;
			try { DebugEnterSubRule(159);
			try { DebugEnterDecision(159, decisionCanBacktrack[159]);
			int LA159_1 = input.LA(1);

			if ((LA159_1==LBRACE))
			{
				alt159 = 1;
			}
			} finally { DebugExitDecision(159); }
			switch (alt159)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1406:10: classBody
				{
				DebugLocation(1406, 10);
				PushFollow(Follow._classBody_in_classCreatorRest7743);
				classBody();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(159); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("classCreatorRest", 99);
			LeaveRule("classCreatorRest", 99);
			LeaveRule_classCreatorRest();
	        if (state.backtracking > 0) { Memoize(input, 99, classCreatorRest_StartIndex); }

	    }
	 	DebugLocation(1408, 4);
		} finally { DebugExitRule(GrammarFileName, "classCreatorRest"); }
		return;

	}
	// $ANTLR end "classCreatorRest"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_nonWildcardTypeArguments() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_nonWildcardTypeArguments() {}
	// $ANTLR start "nonWildcardTypeArguments"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1411:1: nonWildcardTypeArguments : '<' typeList '>' ;
	[GrammarRule("nonWildcardTypeArguments")]
	private void nonWildcardTypeArguments()
	{
		EnterRule_nonWildcardTypeArguments();
		EnterRule("nonWildcardTypeArguments", 100);
		TraceIn("nonWildcardTypeArguments", 100);
	    int nonWildcardTypeArguments_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "nonWildcardTypeArguments");
		DebugLocation(1411, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 100)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1412:5: ( '<' typeList '>' )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1412:9: '<' typeList '>'
			{
			DebugLocation(1412, 9);
			Match(input,LT,Follow._LT_in_nonWildcardTypeArguments7775); if (state.failed) return;
			DebugLocation(1412, 13);
			PushFollow(Follow._typeList_in_nonWildcardTypeArguments7777);
			typeList();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1413, 9);
			Match(input,GT,Follow._GT_in_nonWildcardTypeArguments7787); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("nonWildcardTypeArguments", 100);
			LeaveRule("nonWildcardTypeArguments", 100);
			LeaveRule_nonWildcardTypeArguments();
	        if (state.backtracking > 0) { Memoize(input, 100, nonWildcardTypeArguments_StartIndex); }

	    }
	 	DebugLocation(1414, 4);
		} finally { DebugExitRule(GrammarFileName, "nonWildcardTypeArguments"); }
		return;

	}
	// $ANTLR end "nonWildcardTypeArguments"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_arguments() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_arguments() {}
	// $ANTLR start "arguments"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1416:1: arguments : '(' ( expressionList )? ')' ;
	[GrammarRule("arguments")]
	private void arguments()
	{
		EnterRule_arguments();
		EnterRule("arguments", 101);
		TraceIn("arguments", 101);
	    int arguments_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "arguments");
		DebugLocation(1416, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 101)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1417:5: ( '(' ( expressionList )? ')' )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1417:9: '(' ( expressionList )? ')'
			{
			DebugLocation(1417, 9);
			Match(input,LPAREN,Follow._LPAREN_in_arguments7807); if (state.failed) return;
			DebugLocation(1417, 13);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1417:13: ( expressionList )?
			int alt160=2;
			try { DebugEnterSubRule(160);
			try { DebugEnterDecision(160, decisionCanBacktrack[160]);
			int LA160_1 = input.LA(1);

			if ((LA160_1==BANG||LA160_1==BOOLEAN||LA160_1==BYTE||(LA160_1>=CHAR && LA160_1<=CHARLITERAL)||(LA160_1>=DOUBLE && LA160_1<=DOUBLELITERAL)||LA160_1==FALSE||(LA160_1>=FLOAT && LA160_1<=FLOATLITERAL)||LA160_1==IDENTIFIER||LA160_1==INT||LA160_1==INTLITERAL||(LA160_1>=LONG && LA160_1<=LPAREN)||(LA160_1>=NEW && LA160_1<=NULL)||LA160_1==PLUS||LA160_1==PLUSPLUS||LA160_1==SHORT||(LA160_1>=STRINGLITERAL && LA160_1<=SUB)||(LA160_1>=SUBSUB && LA160_1<=SUPER)||LA160_1==THIS||LA160_1==TILDE||LA160_1==TRUE||LA160_1==VOID))
			{
				alt160 = 1;
			}
			} finally { DebugExitDecision(160); }
			switch (alt160)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1417:14: expressionList
				{
				DebugLocation(1417, 14);
				PushFollow(Follow._expressionList_in_arguments7810);
				expressionList();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(160); }

			DebugLocation(1418, 12);
			Match(input,RPAREN,Follow._RPAREN_in_arguments7823); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arguments", 101);
			LeaveRule("arguments", 101);
			LeaveRule_arguments();
	        if (state.backtracking > 0) { Memoize(input, 101, arguments_StartIndex); }

	    }
	 	DebugLocation(1419, 4);
		} finally { DebugExitRule(GrammarFileName, "arguments"); }
		return;

	}
	// $ANTLR end "arguments"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_literal() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_literal() {}
	// $ANTLR start "literal"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1421:1: literal : ( INTLITERAL | LONGLITERAL | FLOATLITERAL | DOUBLELITERAL | CHARLITERAL | STRINGLITERAL | TRUE | FALSE | NULL );
	[GrammarRule("literal")]
	private void literal()
	{
		EnterRule_literal();
		EnterRule("literal", 102);
		TraceIn("literal", 102);
	    int literal_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(1421, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 102)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1422:5: ( INTLITERAL | LONGLITERAL | FLOATLITERAL | DOUBLELITERAL | CHARLITERAL | STRINGLITERAL | TRUE | FALSE | NULL )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:
			{
			DebugLocation(1422, 5);
			if (input.LA(1)==CHARLITERAL||input.LA(1)==DOUBLELITERAL||input.LA(1)==FALSE||input.LA(1)==FLOATLITERAL||input.LA(1)==INTLITERAL||input.LA(1)==LONGLITERAL||input.LA(1)==NULL||input.LA(1)==STRINGLITERAL||input.LA(1)==TRUE)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("literal", 102);
			LeaveRule("literal", 102);
			LeaveRule_literal();
	        if (state.backtracking > 0) { Memoize(input, 102, literal_StartIndex); }

	    }
	 	DebugLocation(1431, 4);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return;

	}
	// $ANTLR end "literal"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_classHeader() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_classHeader() {}
	// $ANTLR start "classHeader"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1437:1: classHeader : modifiers 'class' IDENTIFIER ;
	[GrammarRule("classHeader")]
	private void classHeader()
	{
		EnterRule_classHeader();
		EnterRule("classHeader", 103);
		TraceIn("classHeader", 103);
	    int classHeader_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "classHeader");
		DebugLocation(1437, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 103)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1438:5: ( modifiers 'class' IDENTIFIER )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1438:9: modifiers 'class' IDENTIFIER
			{
			DebugLocation(1438, 9);
			PushFollow(Follow._modifiers_in_classHeader7947);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1438, 19);
			Match(input,CLASS,Follow._CLASS_in_classHeader7949); if (state.failed) return;
			DebugLocation(1438, 27);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_classHeader7951); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("classHeader", 103);
			LeaveRule("classHeader", 103);
			LeaveRule_classHeader();
	        if (state.backtracking > 0) { Memoize(input, 103, classHeader_StartIndex); }

	    }
	 	DebugLocation(1439, 4);
		} finally { DebugExitRule(GrammarFileName, "classHeader"); }
		return;

	}
	// $ANTLR end "classHeader"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_enumHeader() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_enumHeader() {}
	// $ANTLR start "enumHeader"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1441:1: enumHeader : modifiers ( 'enum' | IDENTIFIER ) IDENTIFIER ;
	[GrammarRule("enumHeader")]
	private void enumHeader()
	{
		EnterRule_enumHeader();
		EnterRule("enumHeader", 104);
		TraceIn("enumHeader", 104);
	    int enumHeader_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "enumHeader");
		DebugLocation(1441, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 104)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1442:5: ( modifiers ( 'enum' | IDENTIFIER ) IDENTIFIER )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1442:9: modifiers ( 'enum' | IDENTIFIER ) IDENTIFIER
			{
			DebugLocation(1442, 9);
			PushFollow(Follow._modifiers_in_enumHeader7971);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1442, 19);
			if (input.LA(1)==ENUM||input.LA(1)==IDENTIFIER)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(1442, 39);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_enumHeader7979); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enumHeader", 104);
			LeaveRule("enumHeader", 104);
			LeaveRule_enumHeader();
	        if (state.backtracking > 0) { Memoize(input, 104, enumHeader_StartIndex); }

	    }
	 	DebugLocation(1443, 4);
		} finally { DebugExitRule(GrammarFileName, "enumHeader"); }
		return;

	}
	// $ANTLR end "enumHeader"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_interfaceHeader() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_interfaceHeader() {}
	// $ANTLR start "interfaceHeader"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1445:1: interfaceHeader : modifiers 'interface' IDENTIFIER ;
	[GrammarRule("interfaceHeader")]
	private void interfaceHeader()
	{
		EnterRule_interfaceHeader();
		EnterRule("interfaceHeader", 105);
		TraceIn("interfaceHeader", 105);
	    int interfaceHeader_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "interfaceHeader");
		DebugLocation(1445, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 105)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1446:5: ( modifiers 'interface' IDENTIFIER )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1446:9: modifiers 'interface' IDENTIFIER
			{
			DebugLocation(1446, 9);
			PushFollow(Follow._modifiers_in_interfaceHeader7999);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1446, 19);
			Match(input,INTERFACE,Follow._INTERFACE_in_interfaceHeader8001); if (state.failed) return;
			DebugLocation(1446, 31);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_interfaceHeader8003); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("interfaceHeader", 105);
			LeaveRule("interfaceHeader", 105);
			LeaveRule_interfaceHeader();
	        if (state.backtracking > 0) { Memoize(input, 105, interfaceHeader_StartIndex); }

	    }
	 	DebugLocation(1447, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceHeader"); }
		return;

	}
	// $ANTLR end "interfaceHeader"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_annotationHeader() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_annotationHeader() {}
	// $ANTLR start "annotationHeader"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1449:1: annotationHeader : modifiers '@' 'interface' IDENTIFIER ;
	[GrammarRule("annotationHeader")]
	private void annotationHeader()
	{
		EnterRule_annotationHeader();
		EnterRule("annotationHeader", 106);
		TraceIn("annotationHeader", 106);
	    int annotationHeader_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "annotationHeader");
		DebugLocation(1449, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 106)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1450:5: ( modifiers '@' 'interface' IDENTIFIER )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1450:9: modifiers '@' 'interface' IDENTIFIER
			{
			DebugLocation(1450, 9);
			PushFollow(Follow._modifiers_in_annotationHeader8023);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1450, 19);
			Match(input,MONKEYS_AT,Follow._MONKEYS_AT_in_annotationHeader8025); if (state.failed) return;
			DebugLocation(1450, 23);
			Match(input,INTERFACE,Follow._INTERFACE_in_annotationHeader8027); if (state.failed) return;
			DebugLocation(1450, 35);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_annotationHeader8029); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("annotationHeader", 106);
			LeaveRule("annotationHeader", 106);
			LeaveRule_annotationHeader();
	        if (state.backtracking > 0) { Memoize(input, 106, annotationHeader_StartIndex); }

	    }
	 	DebugLocation(1451, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationHeader"); }
		return;

	}
	// $ANTLR end "annotationHeader"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_typeHeader() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_typeHeader() {}
	// $ANTLR start "typeHeader"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1453:1: typeHeader : modifiers ( 'class' | 'enum' | ( ( '@' )? 'interface' ) ) IDENTIFIER ;
	[GrammarRule("typeHeader")]
	private void typeHeader()
	{
		EnterRule_typeHeader();
		EnterRule("typeHeader", 107);
		TraceIn("typeHeader", 107);
	    int typeHeader_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "typeHeader");
		DebugLocation(1453, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 107)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1454:5: ( modifiers ( 'class' | 'enum' | ( ( '@' )? 'interface' ) ) IDENTIFIER )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1454:9: modifiers ( 'class' | 'enum' | ( ( '@' )? 'interface' ) ) IDENTIFIER
			{
			DebugLocation(1454, 9);
			PushFollow(Follow._modifiers_in_typeHeader8049);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1454, 19);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1454:19: ( 'class' | 'enum' | ( ( '@' )? 'interface' ) )
			int alt162=3;
			try { DebugEnterSubRule(162);
			try { DebugEnterDecision(162, decisionCanBacktrack[162]);
			switch (input.LA(1))
			{
			case CLASS:
				{
				alt162 = 1;
				}
				break;
			case ENUM:
				{
				alt162 = 2;
				}
				break;
			case INTERFACE:
			case MONKEYS_AT:
				{
				alt162 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 162, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(162); }
			switch (alt162)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1454:20: 'class'
				{
				DebugLocation(1454, 20);
				Match(input,CLASS,Follow._CLASS_in_typeHeader8052); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1454:28: 'enum'
				{
				DebugLocation(1454, 28);
				Match(input,ENUM,Follow._ENUM_in_typeHeader8054); if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1454:35: ( ( '@' )? 'interface' )
				{
				DebugLocation(1454, 35);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1454:35: ( ( '@' )? 'interface' )
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1454:36: ( '@' )? 'interface'
				{
				DebugLocation(1454, 36);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1454:36: ( '@' )?
				int alt161=2;
				try { DebugEnterSubRule(161);
				try { DebugEnterDecision(161, decisionCanBacktrack[161]);
				int LA161_1 = input.LA(1);

				if ((LA161_1==MONKEYS_AT))
				{
					alt161 = 1;
				}
				} finally { DebugExitDecision(161); }
				switch (alt161)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1454:36: '@'
					{
					DebugLocation(1454, 36);
					Match(input,MONKEYS_AT,Follow._MONKEYS_AT_in_typeHeader8057); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(161); }

				DebugLocation(1454, 42);
				Match(input,INTERFACE,Follow._INTERFACE_in_typeHeader8061); if (state.failed) return;

				}


				}
				break;

			}
			} finally { DebugExitSubRule(162); }

			DebugLocation(1454, 56);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_typeHeader8065); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeHeader", 107);
			LeaveRule("typeHeader", 107);
			LeaveRule_typeHeader();
	        if (state.backtracking > 0) { Memoize(input, 107, typeHeader_StartIndex); }

	    }
	 	DebugLocation(1455, 4);
		} finally { DebugExitRule(GrammarFileName, "typeHeader"); }
		return;

	}
	// $ANTLR end "typeHeader"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_methodHeader() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_methodHeader() {}
	// $ANTLR start "methodHeader"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1457:1: methodHeader : modifiers ( typeParameters )? ( type | 'void' )? IDENTIFIER '(' ;
	[GrammarRule("methodHeader")]
	private void methodHeader()
	{
		EnterRule_methodHeader();
		EnterRule("methodHeader", 108);
		TraceIn("methodHeader", 108);
	    int methodHeader_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "methodHeader");
		DebugLocation(1457, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 108)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1458:5: ( modifiers ( typeParameters )? ( type | 'void' )? IDENTIFIER '(' )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1458:9: modifiers ( typeParameters )? ( type | 'void' )? IDENTIFIER '('
			{
			DebugLocation(1458, 9);
			PushFollow(Follow._modifiers_in_methodHeader8085);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1458, 19);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1458:19: ( typeParameters )?
			int alt163=2;
			try { DebugEnterSubRule(163);
			try { DebugEnterDecision(163, decisionCanBacktrack[163]);
			int LA163_1 = input.LA(1);

			if ((LA163_1==LT))
			{
				alt163 = 1;
			}
			} finally { DebugExitDecision(163); }
			switch (alt163)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1458:19: typeParameters
				{
				DebugLocation(1458, 19);
				PushFollow(Follow._typeParameters_in_methodHeader8087);
				typeParameters();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(163); }

			DebugLocation(1458, 35);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1458:35: ( type | 'void' )?
			int alt164=3;
			try { DebugEnterSubRule(164);
			try { DebugEnterDecision(164, decisionCanBacktrack[164]);
			switch (input.LA(1))
			{
			case IDENTIFIER:
				{
				int LA164_2 = input.LA(2);

				if ((LA164_2==DOT||LA164_2==IDENTIFIER||LA164_2==LBRACKET||LA164_2==LT))
				{
					alt164 = 1;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				alt164 = 1;
				}
				break;
			case VOID:
				{
				alt164 = 2;
				}
				break;
			}

			} finally { DebugExitDecision(164); }
			switch (alt164)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1458:36: type
				{
				DebugLocation(1458, 36);
				PushFollow(Follow._type_in_methodHeader8091);
				type();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1458:41: 'void'
				{
				DebugLocation(1458, 41);
				Match(input,VOID,Follow._VOID_in_methodHeader8093); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(164); }

			DebugLocation(1458, 50);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_methodHeader8097); if (state.failed) return;
			DebugLocation(1458, 61);
			Match(input,LPAREN,Follow._LPAREN_in_methodHeader8099); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("methodHeader", 108);
			LeaveRule("methodHeader", 108);
			LeaveRule_methodHeader();
	        if (state.backtracking > 0) { Memoize(input, 108, methodHeader_StartIndex); }

	    }
	 	DebugLocation(1459, 4);
		} finally { DebugExitRule(GrammarFileName, "methodHeader"); }
		return;

	}
	// $ANTLR end "methodHeader"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_fieldHeader() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_fieldHeader() {}
	// $ANTLR start "fieldHeader"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1461:1: fieldHeader : modifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' ) ;
	[GrammarRule("fieldHeader")]
	private void fieldHeader()
	{
		EnterRule_fieldHeader();
		EnterRule("fieldHeader", 109);
		TraceIn("fieldHeader", 109);
	    int fieldHeader_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "fieldHeader");
		DebugLocation(1461, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 109)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1462:5: ( modifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1462:9: modifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' )
			{
			DebugLocation(1462, 9);
			PushFollow(Follow._modifiers_in_fieldHeader8119);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1462, 19);
			PushFollow(Follow._type_in_fieldHeader8121);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1462, 24);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_fieldHeader8123); if (state.failed) return;
			DebugLocation(1462, 35);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1462:35: ( '[' ']' )*
			try { DebugEnterSubRule(165);
			while (true)
			{
				int alt165=2;
				try { DebugEnterDecision(165, decisionCanBacktrack[165]);
				int LA165_1 = input.LA(1);

				if ((LA165_1==LBRACKET))
				{
					alt165 = 1;
				}


				} finally { DebugExitDecision(165); }
				switch ( alt165 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1462:36: '[' ']'
					{
					DebugLocation(1462, 36);
					Match(input,LBRACKET,Follow._LBRACKET_in_fieldHeader8126); if (state.failed) return;
					DebugLocation(1462, 39);
					Match(input,RBRACKET,Follow._RBRACKET_in_fieldHeader8127); if (state.failed) return;

					}
					break;

				default:
					goto loop165;
				}
			}

			loop165:
				;

			} finally { DebugExitSubRule(165); }

			DebugLocation(1462, 45);
			if (input.LA(1)==COMMA||input.LA(1)==EQ||input.LA(1)==SEMI)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("fieldHeader", 109);
			LeaveRule("fieldHeader", 109);
			LeaveRule_fieldHeader();
	        if (state.backtracking > 0) { Memoize(input, 109, fieldHeader_StartIndex); }

	    }
	 	DebugLocation(1463, 4);
		} finally { DebugExitRule(GrammarFileName, "fieldHeader"); }
		return;

	}
	// $ANTLR end "fieldHeader"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_localVariableHeader() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_localVariableHeader() {}
	// $ANTLR start "localVariableHeader"
	// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1465:1: localVariableHeader : variableModifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' ) ;
	[GrammarRule("localVariableHeader")]
	private void localVariableHeader()
	{
		EnterRule_localVariableHeader();
		EnterRule("localVariableHeader", 110);
		TraceIn("localVariableHeader", 110);
	    int localVariableHeader_StartIndex = input.Index;

		try { DebugEnterRule(GrammarFileName, "localVariableHeader");
		DebugLocation(1465, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 110)) { return; }

			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1466:5: ( variableModifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1466:9: variableModifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' )
			{
			DebugLocation(1466, 9);
			PushFollow(Follow._variableModifiers_in_localVariableHeader8157);
			variableModifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1466, 27);
			PushFollow(Follow._type_in_localVariableHeader8159);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1466, 32);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_localVariableHeader8161); if (state.failed) return;
			DebugLocation(1466, 43);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1466:43: ( '[' ']' )*
			try { DebugEnterSubRule(166);
			while (true)
			{
				int alt166=2;
				try { DebugEnterDecision(166, decisionCanBacktrack[166]);
				int LA166_1 = input.LA(1);

				if ((LA166_1==LBRACKET))
				{
					alt166 = 1;
				}


				} finally { DebugExitDecision(166); }
				switch ( alt166 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1466:44: '[' ']'
					{
					DebugLocation(1466, 44);
					Match(input,LBRACKET,Follow._LBRACKET_in_localVariableHeader8164); if (state.failed) return;
					DebugLocation(1466, 47);
					Match(input,RBRACKET,Follow._RBRACKET_in_localVariableHeader8165); if (state.failed) return;

					}
					break;

				default:
					goto loop166;
				}
			}

			loop166:
				;

			} finally { DebugExitSubRule(166); }

			DebugLocation(1466, 53);
			if (input.LA(1)==COMMA||input.LA(1)==EQ||input.LA(1)==SEMI)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("localVariableHeader", 110);
			LeaveRule("localVariableHeader", 110);
			LeaveRule_localVariableHeader();
	        if (state.backtracking > 0) { Memoize(input, 110, localVariableHeader_StartIndex); }

	    }
	 	DebugLocation(1467, 4);
		} finally { DebugExitRule(GrammarFileName, "localVariableHeader"); }
		return;

	}
	// $ANTLR end "localVariableHeader"
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred2_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred2_Java_fragment() {}

	// $ANTLR start synpred2_Java
	private void synpred2_Java_fragment()
	{
		EnterRule_synpred2_Java_fragment();
		EnterRule("synpred2_Java_fragment", 112);
		TraceIn("synpred2_Java_fragment", 112);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:483:10: ( ( annotations )? packageDeclaration )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:483:10: ( annotations )? packageDeclaration
			{
			DebugLocation(483, 10);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:483:10: ( annotations )?
			int alt167=2;
			try { DebugEnterSubRule(167);
			try { DebugEnterDecision(167, decisionCanBacktrack[167]);
			int LA167_1 = input.LA(1);

			if ((LA167_1==MONKEYS_AT))
			{
				alt167 = 1;
			}
			} finally { DebugExitDecision(167); }
			switch (alt167)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:483:11: annotations
				{
				DebugLocation(483, 11);
				PushFollow(Follow._annotations_in_synpred2_Java105);
				annotations();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(167); }

			DebugLocation(485, 13);
			PushFollow(Follow._packageDeclaration_in_synpred2_Java134);
			packageDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_Java_fragment", 112);
			LeaveRule("synpred2_Java_fragment", 112);
			LeaveRule_synpred2_Java_fragment();
		}
	}
	// $ANTLR end synpred2_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred12_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred12_Java_fragment() {}

	// $ANTLR start synpred12_Java
	private void synpred12_Java_fragment()
	{
		EnterRule_synpred12_Java_fragment();
		EnterRule("synpred12_Java_fragment", 122);
		TraceIn("synpred12_Java_fragment", 122);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:528:10: ( classDeclaration )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:528:10: classDeclaration
			{
			DebugLocation(528, 10);
			PushFollow(Follow._classDeclaration_in_synpred12_Java505);
			classDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred12_Java_fragment", 122);
			LeaveRule("synpred12_Java_fragment", 122);
			LeaveRule_synpred12_Java_fragment();
		}
	}
	// $ANTLR end synpred12_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred27_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred27_Java_fragment() {}

	// $ANTLR start synpred27_Java
	private void synpred27_Java_fragment()
	{
		EnterRule_synpred27_Java_fragment();
		EnterRule("synpred27_Java_fragment", 137);
		TraceIn("synpred27_Java_fragment", 137);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:560:9: ( normalClassDeclaration )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:560:9: normalClassDeclaration
			{
			DebugLocation(560, 9);
			PushFollow(Follow._normalClassDeclaration_in_synpred27_Java755);
			normalClassDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred27_Java_fragment", 137);
			LeaveRule("synpred27_Java_fragment", 137);
			LeaveRule_synpred27_Java_fragment();
		}
	}
	// $ANTLR end synpred27_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred43_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred43_Java_fragment() {}

	// $ANTLR start synpred43_Java
	private void synpred43_Java_fragment()
	{
		EnterRule_synpred43_Java_fragment();
		EnterRule("synpred43_Java_fragment", 153);
		TraceIn("synpred43_Java_fragment", 153);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:650:9: ( normalInterfaceDeclaration )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:650:9: normalInterfaceDeclaration
			{
			DebugLocation(650, 9);
			PushFollow(Follow._normalInterfaceDeclaration_in_synpred43_Java1446);
			normalInterfaceDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred43_Java_fragment", 153);
			LeaveRule("synpred43_Java_fragment", 153);
			LeaveRule_synpred43_Java_fragment();
		}
	}
	// $ANTLR end synpred43_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred52_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred52_Java_fragment() {}

	// $ANTLR start synpred52_Java
	private void synpred52_Java_fragment()
	{
		EnterRule_synpred52_Java_fragment();
		EnterRule("synpred52_Java_fragment", 162);
		TraceIn("synpred52_Java_fragment", 162);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:692:10: ( fieldDeclaration )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:692:10: fieldDeclaration
			{
			DebugLocation(692, 10);
			PushFollow(Follow._fieldDeclaration_in_synpred52_Java1780);
			fieldDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred52_Java_fragment", 162);
			LeaveRule("synpred52_Java_fragment", 162);
			LeaveRule_synpred52_Java_fragment();
		}
	}
	// $ANTLR end synpred52_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred53_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred53_Java_fragment() {}

	// $ANTLR start synpred53_Java
	private void synpred53_Java_fragment()
	{
		EnterRule_synpred53_Java_fragment();
		EnterRule("synpred53_Java_fragment", 163);
		TraceIn("synpred53_Java_fragment", 163);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:693:10: ( methodDeclaration )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:693:10: methodDeclaration
			{
			DebugLocation(693, 10);
			PushFollow(Follow._methodDeclaration_in_synpred53_Java1791);
			methodDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred53_Java_fragment", 163);
			LeaveRule("synpred53_Java_fragment", 163);
			LeaveRule_synpred53_Java_fragment();
		}
	}
	// $ANTLR end synpred53_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred54_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred54_Java_fragment() {}

	// $ANTLR start synpred54_Java
	private void synpred54_Java_fragment()
	{
		EnterRule_synpred54_Java_fragment();
		EnterRule("synpred54_Java_fragment", 164);
		TraceIn("synpred54_Java_fragment", 164);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:694:10: ( classDeclaration )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:694:10: classDeclaration
			{
			DebugLocation(694, 10);
			PushFollow(Follow._classDeclaration_in_synpred54_Java1802);
			classDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred54_Java_fragment", 164);
			LeaveRule("synpred54_Java_fragment", 164);
			LeaveRule_synpred54_Java_fragment();
		}
	}
	// $ANTLR end synpred54_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred57_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred57_Java_fragment() {}

	// $ANTLR start synpred57_Java
	private void synpred57_Java_fragment()
	{
		EnterRule_synpred57_Java_fragment();
		EnterRule("synpred57_Java_fragment", 167);
		TraceIn("synpred57_Java_fragment", 167);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:710:10: ( explicitConstructorInvocation )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:710:10: explicitConstructorInvocation
			{
			DebugLocation(710, 10);
			PushFollow(Follow._explicitConstructorInvocation_in_synpred57_Java1941);
			explicitConstructorInvocation();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred57_Java_fragment", 167);
			LeaveRule("synpred57_Java_fragment", 167);
			LeaveRule_synpred57_Java_fragment();
		}
	}
	// $ANTLR end synpred57_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred59_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred59_Java_fragment() {}

	// $ANTLR start synpred59_Java
	private void synpred59_Java_fragment()
	{
		EnterRule_synpred59_Java_fragment();
		EnterRule("synpred59_Java_fragment", 169);
		TraceIn("synpred59_Java_fragment", 169);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:702:10: ( modifiers ( typeParameters )? IDENTIFIER formalParameters ( 'throws' qualifiedNameList )? '{' ( explicitConstructorInvocation )? ( blockStatement )* '}' )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:702:10: modifiers ( typeParameters )? IDENTIFIER formalParameters ( 'throws' qualifiedNameList )? '{' ( explicitConstructorInvocation )? ( blockStatement )* '}'
			{
			DebugLocation(702, 10);
			PushFollow(Follow._modifiers_in_synpred59_Java1851);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(703, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:703:9: ( typeParameters )?
			int alt170=2;
			try { DebugEnterSubRule(170);
			try { DebugEnterDecision(170, decisionCanBacktrack[170]);
			int LA170_1 = input.LA(1);

			if ((LA170_1==LT))
			{
				alt170 = 1;
			}
			} finally { DebugExitDecision(170); }
			switch (alt170)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:703:10: typeParameters
				{
				DebugLocation(703, 10);
				PushFollow(Follow._typeParameters_in_synpred59_Java1862);
				typeParameters();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(170); }

			DebugLocation(705, 9);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_synpred59_Java1883); if (state.failed) return;
			DebugLocation(706, 9);
			PushFollow(Follow._formalParameters_in_synpred59_Java1895);
			formalParameters();
			PopFollow();
			if (state.failed) return;
			DebugLocation(707, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:707:9: ( 'throws' qualifiedNameList )?
			int alt171=2;
			try { DebugEnterSubRule(171);
			try { DebugEnterDecision(171, decisionCanBacktrack[171]);
			int LA171_1 = input.LA(1);

			if ((LA171_1==THROWS))
			{
				alt171 = 1;
			}
			} finally { DebugExitDecision(171); }
			switch (alt171)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:707:10: 'throws' qualifiedNameList
				{
				DebugLocation(707, 10);
				Match(input,THROWS,Follow._THROWS_in_synpred59_Java1906); if (state.failed) return;
				DebugLocation(707, 19);
				PushFollow(Follow._qualifiedNameList_in_synpred59_Java1908);
				qualifiedNameList();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(171); }

			DebugLocation(709, 9);
			Match(input,LBRACE,Follow._LBRACE_in_synpred59_Java1929); if (state.failed) return;
			DebugLocation(710, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:710:9: ( explicitConstructorInvocation )?
			int alt172=2;
			try { DebugEnterSubRule(172);
			try { DebugEnterDecision(172, decisionCanBacktrack[172]);
			switch (input.LA(1))
			{
			case LT:
				{
				alt172 = 1;
				}
				break;
			case THIS:
				{
				int LA172_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt172 = 1;
				}
				}
				break;
			case LPAREN:
				{
				int LA172_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt172 = 1;
				}
				}
				break;
			case SUPER:
				{
				int LA172_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt172 = 1;
				}
				}
				break;
			case IDENTIFIER:
				{
				int LA172_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt172 = 1;
				}
				}
				break;
			case CHARLITERAL:
			case DOUBLELITERAL:
			case FALSE:
			case FLOATLITERAL:
			case INTLITERAL:
			case LONGLITERAL:
			case NULL:
			case STRINGLITERAL:
			case TRUE:
				{
				int LA172_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt172 = 1;
				}
				}
				break;
			case NEW:
				{
				int LA172_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt172 = 1;
				}
				}
				break;
			case BOOLEAN:
				{
				int LA172_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt172 = 1;
				}
				}
				break;
			case CHAR:
				{
				int LA172_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt172 = 1;
				}
				}
				break;
			case BYTE:
				{
				int LA172_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt172 = 1;
				}
				}
				break;
			case SHORT:
				{
				int LA172_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt172 = 1;
				}
				}
				break;
			case INT:
				{
				int LA172_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt172 = 1;
				}
				}
				break;
			case LONG:
				{
				int LA172_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt172 = 1;
				}
				}
				break;
			case FLOAT:
				{
				int LA172_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt172 = 1;
				}
				}
				break;
			case DOUBLE:
				{
				int LA172_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt172 = 1;
				}
				}
				break;
			case VOID:
				{
				int LA172_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt172 = 1;
				}
				}
				break;
			}

			} finally { DebugExitDecision(172); }
			switch (alt172)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:710:10: explicitConstructorInvocation
				{
				DebugLocation(710, 10);
				PushFollow(Follow._explicitConstructorInvocation_in_synpred59_Java1941);
				explicitConstructorInvocation();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(172); }

			DebugLocation(712, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:712:9: ( blockStatement )*
			try { DebugEnterSubRule(173);
			while (true)
			{
				int alt173=2;
				try { DebugEnterDecision(173, decisionCanBacktrack[173]);
				int LA173_1 = input.LA(1);

				if ((LA173_1==ABSTRACT||(LA173_1>=ASSERT && LA173_1<=BANG)||(LA173_1>=BOOLEAN && LA173_1<=BYTE)||(LA173_1>=CHAR && LA173_1<=CLASS)||LA173_1==CONTINUE||LA173_1==DO||(LA173_1>=DOUBLE && LA173_1<=DOUBLELITERAL)||LA173_1==ENUM||(LA173_1>=FALSE && LA173_1<=FINAL)||(LA173_1>=FLOAT && LA173_1<=FOR)||(LA173_1>=IDENTIFIER && LA173_1<=IF)||(LA173_1>=INT && LA173_1<=INTLITERAL)||LA173_1==LBRACE||(LA173_1>=LONG && LA173_1<=LT)||(LA173_1>=MONKEYS_AT && LA173_1<=NULL)||LA173_1==PLUS||(LA173_1>=PLUSPLUS && LA173_1<=PUBLIC)||LA173_1==RETURN||(LA173_1>=SEMI && LA173_1<=SHORT)||(LA173_1>=STATIC && LA173_1<=SUB)||(LA173_1>=SUBSUB && LA173_1<=SYNCHRONIZED)||(LA173_1>=THIS && LA173_1<=THROW)||(LA173_1>=TILDE && LA173_1<=WHILE)))
				{
					alt173 = 1;
				}


				} finally { DebugExitDecision(173); }
				switch ( alt173 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:712:10: blockStatement
					{
					DebugLocation(712, 10);
					PushFollow(Follow._blockStatement_in_synpred59_Java1963);
					blockStatement();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop173;
				}
			}

			loop173:
				;

			} finally { DebugExitSubRule(173); }

			DebugLocation(714, 9);
			Match(input,RBRACE,Follow._RBRACE_in_synpred59_Java1984); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred59_Java_fragment", 169);
			LeaveRule("synpred59_Java_fragment", 169);
			LeaveRule_synpred59_Java_fragment();
		}
	}
	// $ANTLR end synpred59_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred68_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred68_Java_fragment() {}

	// $ANTLR start synpred68_Java
	private void synpred68_Java_fragment()
	{
		EnterRule_synpred68_Java_fragment();
		EnterRule("synpred68_Java_fragment", 178);
		TraceIn("synpred68_Java_fragment", 178);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:756:9: ( interfaceFieldDeclaration )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:756:9: interfaceFieldDeclaration
			{
			DebugLocation(756, 9);
			PushFollow(Follow._interfaceFieldDeclaration_in_synpred68_Java2364);
			interfaceFieldDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred68_Java_fragment", 178);
			LeaveRule("synpred68_Java_fragment", 178);
			LeaveRule_synpred68_Java_fragment();
		}
	}
	// $ANTLR end synpred68_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred69_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred69_Java_fragment() {}

	// $ANTLR start synpred69_Java
	private void synpred69_Java_fragment()
	{
		EnterRule_synpred69_Java_fragment();
		EnterRule("synpred69_Java_fragment", 179);
		TraceIn("synpred69_Java_fragment", 179);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:757:9: ( interfaceMethodDeclaration )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:757:9: interfaceMethodDeclaration
			{
			DebugLocation(757, 9);
			PushFollow(Follow._interfaceMethodDeclaration_in_synpred69_Java2374);
			interfaceMethodDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred69_Java_fragment", 179);
			LeaveRule("synpred69_Java_fragment", 179);
			LeaveRule_synpred69_Java_fragment();
		}
	}
	// $ANTLR end synpred69_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred70_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred70_Java_fragment() {}

	// $ANTLR start synpred70_Java
	private void synpred70_Java_fragment()
	{
		EnterRule_synpred70_Java_fragment();
		EnterRule("synpred70_Java_fragment", 180);
		TraceIn("synpred70_Java_fragment", 180);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:758:9: ( interfaceDeclaration )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:758:9: interfaceDeclaration
			{
			DebugLocation(758, 9);
			PushFollow(Follow._interfaceDeclaration_in_synpred70_Java2384);
			interfaceDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred70_Java_fragment", 180);
			LeaveRule("synpred70_Java_fragment", 180);
			LeaveRule_synpred70_Java_fragment();
		}
	}
	// $ANTLR end synpred70_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred71_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred71_Java_fragment() {}

	// $ANTLR start synpred71_Java
	private void synpred71_Java_fragment()
	{
		EnterRule_synpred71_Java_fragment();
		EnterRule("synpred71_Java_fragment", 181);
		TraceIn("synpred71_Java_fragment", 181);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:759:9: ( classDeclaration )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:759:9: classDeclaration
			{
			DebugLocation(759, 9);
			PushFollow(Follow._classDeclaration_in_synpred71_Java2394);
			classDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred71_Java_fragment", 181);
			LeaveRule("synpred71_Java_fragment", 181);
			LeaveRule_synpred71_Java_fragment();
		}
	}
	// $ANTLR end synpred71_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred96_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred96_Java_fragment() {}

	// $ANTLR start synpred96_Java
	private void synpred96_Java_fragment()
	{
		EnterRule_synpred96_Java_fragment();
		EnterRule("synpred96_Java_fragment", 206);
		TraceIn("synpred96_Java_fragment", 206);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:854:9: ( ellipsisParameterDecl )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:854:9: ellipsisParameterDecl
			{
			DebugLocation(854, 9);
			PushFollow(Follow._ellipsisParameterDecl_in_synpred96_Java3160);
			ellipsisParameterDecl();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred96_Java_fragment", 206);
			LeaveRule("synpred96_Java_fragment", 206);
			LeaveRule_synpred96_Java_fragment();
		}
	}
	// $ANTLR end synpred96_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred98_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred98_Java_fragment() {}

	// $ANTLR start synpred98_Java
	private void synpred98_Java_fragment()
	{
		EnterRule_synpred98_Java_fragment();
		EnterRule("synpred98_Java_fragment", 208);
		TraceIn("synpred98_Java_fragment", 208);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:855:9: ( normalParameterDecl ( ',' normalParameterDecl )* )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:855:9: normalParameterDecl ( ',' normalParameterDecl )*
			{
			DebugLocation(855, 9);
			PushFollow(Follow._normalParameterDecl_in_synpred98_Java3170);
			normalParameterDecl();
			PopFollow();
			if (state.failed) return;
			DebugLocation(856, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:856:9: ( ',' normalParameterDecl )*
			try { DebugEnterSubRule(176);
			while (true)
			{
				int alt176=2;
				try { DebugEnterDecision(176, decisionCanBacktrack[176]);
				int LA176_1 = input.LA(1);

				if ((LA176_1==COMMA))
				{
					alt176 = 1;
				}


				} finally { DebugExitDecision(176); }
				switch ( alt176 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:856:10: ',' normalParameterDecl
					{
					DebugLocation(856, 10);
					Match(input,COMMA,Follow._COMMA_in_synpred98_Java3181); if (state.failed) return;
					DebugLocation(856, 14);
					PushFollow(Follow._normalParameterDecl_in_synpred98_Java3183);
					normalParameterDecl();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop176;
				}
			}

			loop176:
				;

			} finally { DebugExitSubRule(176); }


			}

		}
		finally
		{
			TraceOut("synpred98_Java_fragment", 208);
			LeaveRule("synpred98_Java_fragment", 208);
			LeaveRule_synpred98_Java_fragment();
		}
	}
	// $ANTLR end synpred98_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred99_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred99_Java_fragment() {}

	// $ANTLR start synpred99_Java
	private void synpred99_Java_fragment()
	{
		EnterRule_synpred99_Java_fragment();
		EnterRule("synpred99_Java_fragment", 209);
		TraceIn("synpred99_Java_fragment", 209);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:858:10: ( normalParameterDecl ',' )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:858:10: normalParameterDecl ','
			{
			DebugLocation(858, 10);
			PushFollow(Follow._normalParameterDecl_in_synpred99_Java3205);
			normalParameterDecl();
			PopFollow();
			if (state.failed) return;
			DebugLocation(859, 9);
			Match(input,COMMA,Follow._COMMA_in_synpred99_Java3215); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred99_Java_fragment", 209);
			LeaveRule("synpred99_Java_fragment", 209);
			LeaveRule_synpred99_Java_fragment();
		}
	}
	// $ANTLR end synpred99_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred103_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred103_Java_fragment() {}

	// $ANTLR start synpred103_Java
	private void synpred103_Java_fragment()
	{
		EnterRule_synpred103_Java_fragment();
		EnterRule("synpred103_Java_fragment", 213);
		TraceIn("synpred103_Java_fragment", 213);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:878:9: ( ( nonWildcardTypeArguments )? ( 'this' | 'super' ) arguments ';' )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:878:9: ( nonWildcardTypeArguments )? ( 'this' | 'super' ) arguments ';'
			{
			DebugLocation(878, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:878:9: ( nonWildcardTypeArguments )?
			int alt177=2;
			try { DebugEnterSubRule(177);
			try { DebugEnterDecision(177, decisionCanBacktrack[177]);
			int LA177_1 = input.LA(1);

			if ((LA177_1==LT))
			{
				alt177 = 1;
			}
			} finally { DebugExitDecision(177); }
			switch (alt177)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:878:10: nonWildcardTypeArguments
				{
				DebugLocation(878, 10);
				PushFollow(Follow._nonWildcardTypeArguments_in_synpred103_Java3350);
				nonWildcardTypeArguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(177); }

			DebugLocation(880, 9);
			if (input.LA(1)==SUPER||input.LA(1)==THIS)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(883, 9);
			PushFollow(Follow._arguments_in_synpred103_Java3408);
			arguments();
			PopFollow();
			if (state.failed) return;
			DebugLocation(883, 19);
			Match(input,SEMI,Follow._SEMI_in_synpred103_Java3410); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred103_Java_fragment", 213);
			LeaveRule("synpred103_Java_fragment", 213);
			LeaveRule_synpred103_Java_fragment();
		}
	}
	// $ANTLR end synpred103_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred117_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred117_Java_fragment() {}

	// $ANTLR start synpred117_Java
	private void synpred117_Java_fragment()
	{
		EnterRule_synpred117_Java_fragment();
		EnterRule("synpred117_Java_fragment", 227);
		TraceIn("synpred117_Java_fragment", 227);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:965:9: ( annotationMethodDeclaration )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:965:9: annotationMethodDeclaration
			{
			DebugLocation(965, 9);
			PushFollow(Follow._annotationMethodDeclaration_in_synpred117_Java4020);
			annotationMethodDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred117_Java_fragment", 227);
			LeaveRule("synpred117_Java_fragment", 227);
			LeaveRule_synpred117_Java_fragment();
		}
	}
	// $ANTLR end synpred117_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred118_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred118_Java_fragment() {}

	// $ANTLR start synpred118_Java
	private void synpred118_Java_fragment()
	{
		EnterRule_synpred118_Java_fragment();
		EnterRule("synpred118_Java_fragment", 228);
		TraceIn("synpred118_Java_fragment", 228);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:966:9: ( interfaceFieldDeclaration )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:966:9: interfaceFieldDeclaration
			{
			DebugLocation(966, 9);
			PushFollow(Follow._interfaceFieldDeclaration_in_synpred118_Java4030);
			interfaceFieldDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred118_Java_fragment", 228);
			LeaveRule("synpred118_Java_fragment", 228);
			LeaveRule_synpred118_Java_fragment();
		}
	}
	// $ANTLR end synpred118_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred119_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred119_Java_fragment() {}

	// $ANTLR start synpred119_Java
	private void synpred119_Java_fragment()
	{
		EnterRule_synpred119_Java_fragment();
		EnterRule("synpred119_Java_fragment", 229);
		TraceIn("synpred119_Java_fragment", 229);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:967:9: ( normalClassDeclaration )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:967:9: normalClassDeclaration
			{
			DebugLocation(967, 9);
			PushFollow(Follow._normalClassDeclaration_in_synpred119_Java4040);
			normalClassDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred119_Java_fragment", 229);
			LeaveRule("synpred119_Java_fragment", 229);
			LeaveRule_synpred119_Java_fragment();
		}
	}
	// $ANTLR end synpred119_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred120_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred120_Java_fragment() {}

	// $ANTLR start synpred120_Java
	private void synpred120_Java_fragment()
	{
		EnterRule_synpred120_Java_fragment();
		EnterRule("synpred120_Java_fragment", 230);
		TraceIn("synpred120_Java_fragment", 230);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:968:9: ( normalInterfaceDeclaration )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:968:9: normalInterfaceDeclaration
			{
			DebugLocation(968, 9);
			PushFollow(Follow._normalInterfaceDeclaration_in_synpred120_Java4050);
			normalInterfaceDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred120_Java_fragment", 230);
			LeaveRule("synpred120_Java_fragment", 230);
			LeaveRule_synpred120_Java_fragment();
		}
	}
	// $ANTLR end synpred120_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred121_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred121_Java_fragment() {}

	// $ANTLR start synpred121_Java
	private void synpred121_Java_fragment()
	{
		EnterRule_synpred121_Java_fragment();
		EnterRule("synpred121_Java_fragment", 231);
		TraceIn("synpred121_Java_fragment", 231);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:969:9: ( enumDeclaration )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:969:9: enumDeclaration
			{
			DebugLocation(969, 9);
			PushFollow(Follow._enumDeclaration_in_synpred121_Java4060);
			enumDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred121_Java_fragment", 231);
			LeaveRule("synpred121_Java_fragment", 231);
			LeaveRule_synpred121_Java_fragment();
		}
	}
	// $ANTLR end synpred121_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred122_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred122_Java_fragment() {}

	// $ANTLR start synpred122_Java
	private void synpred122_Java_fragment()
	{
		EnterRule_synpred122_Java_fragment();
		EnterRule("synpred122_Java_fragment", 232);
		TraceIn("synpred122_Java_fragment", 232);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:970:9: ( annotationTypeDeclaration )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:970:9: annotationTypeDeclaration
			{
			DebugLocation(970, 9);
			PushFollow(Follow._annotationTypeDeclaration_in_synpred122_Java4070);
			annotationTypeDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred122_Java_fragment", 232);
			LeaveRule("synpred122_Java_fragment", 232);
			LeaveRule_synpred122_Java_fragment();
		}
	}
	// $ANTLR end synpred122_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred125_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred125_Java_fragment() {}

	// $ANTLR start synpred125_Java
	private void synpred125_Java_fragment()
	{
		EnterRule_synpred125_Java_fragment();
		EnterRule("synpred125_Java_fragment", 235);
		TraceIn("synpred125_Java_fragment", 235);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1013:9: ( localVariableDeclarationStatement )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1013:9: localVariableDeclarationStatement
			{
			DebugLocation(1013, 9);
			PushFollow(Follow._localVariableDeclarationStatement_in_synpred125_Java4228);
			localVariableDeclarationStatement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred125_Java_fragment", 235);
			LeaveRule("synpred125_Java_fragment", 235);
			LeaveRule_synpred125_Java_fragment();
		}
	}
	// $ANTLR end synpred125_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred126_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred126_Java_fragment() {}

	// $ANTLR start synpred126_Java
	private void synpred126_Java_fragment()
	{
		EnterRule_synpred126_Java_fragment();
		EnterRule("synpred126_Java_fragment", 236);
		TraceIn("synpred126_Java_fragment", 236);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1014:9: ( classOrInterfaceDeclaration )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1014:9: classOrInterfaceDeclaration
			{
			DebugLocation(1014, 9);
			PushFollow(Follow._classOrInterfaceDeclaration_in_synpred126_Java4238);
			classOrInterfaceDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred126_Java_fragment", 236);
			LeaveRule("synpred126_Java_fragment", 236);
			LeaveRule_synpred126_Java_fragment();
		}
	}
	// $ANTLR end synpred126_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred130_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred130_Java_fragment() {}

	// $ANTLR start synpred130_Java
	private void synpred130_Java_fragment()
	{
		EnterRule_synpred130_Java_fragment();
		EnterRule("synpred130_Java_fragment", 240);
		TraceIn("synpred130_Java_fragment", 240);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1034:9: ( ( 'assert' ) expression ( ':' expression )? ';' )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1034:9: ( 'assert' ) expression ( ':' expression )? ';'
			{
			DebugLocation(1034, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1034:9: ( 'assert' )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1034:10: 'assert'
			{
			DebugLocation(1034, 10);
			Match(input,ASSERT,Follow._ASSERT_in_synpred130_Java4379); if (state.failed) return;

			}

			DebugLocation(1036, 9);
			PushFollow(Follow._expression_in_synpred130_Java4399);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1036, 20);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1036:20: ( ':' expression )?
			int alt180=2;
			try { DebugEnterSubRule(180);
			try { DebugEnterDecision(180, decisionCanBacktrack[180]);
			int LA180_1 = input.LA(1);

			if ((LA180_1==COLON))
			{
				alt180 = 1;
			}
			} finally { DebugExitDecision(180); }
			switch (alt180)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1036:21: ':' expression
				{
				DebugLocation(1036, 21);
				Match(input,COLON,Follow._COLON_in_synpred130_Java4402); if (state.failed) return;
				DebugLocation(1036, 25);
				PushFollow(Follow._expression_in_synpred130_Java4404);
				expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(180); }

			DebugLocation(1036, 38);
			Match(input,SEMI,Follow._SEMI_in_synpred130_Java4408); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred130_Java_fragment", 240);
			LeaveRule("synpred130_Java_fragment", 240);
			LeaveRule_synpred130_Java_fragment();
		}
	}
	// $ANTLR end synpred130_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred132_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred132_Java_fragment() {}

	// $ANTLR start synpred132_Java
	private void synpred132_Java_fragment()
	{
		EnterRule_synpred132_Java_fragment();
		EnterRule("synpred132_Java_fragment", 242);
		TraceIn("synpred132_Java_fragment", 242);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1037:9: ( 'assert' expression ( ':' expression )? ';' )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1037:9: 'assert' expression ( ':' expression )? ';'
			{
			DebugLocation(1037, 9);
			Match(input,ASSERT,Follow._ASSERT_in_synpred132_Java4418); if (state.failed) return;
			DebugLocation(1037, 19);
			PushFollow(Follow._expression_in_synpred132_Java4421);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1037, 30);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1037:30: ( ':' expression )?
			int alt181=2;
			try { DebugEnterSubRule(181);
			try { DebugEnterDecision(181, decisionCanBacktrack[181]);
			int LA181_1 = input.LA(1);

			if ((LA181_1==COLON))
			{
				alt181 = 1;
			}
			} finally { DebugExitDecision(181); }
			switch (alt181)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1037:31: ':' expression
				{
				DebugLocation(1037, 31);
				Match(input,COLON,Follow._COLON_in_synpred132_Java4424); if (state.failed) return;
				DebugLocation(1037, 35);
				PushFollow(Follow._expression_in_synpred132_Java4426);
				expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(181); }

			DebugLocation(1037, 48);
			Match(input,SEMI,Follow._SEMI_in_synpred132_Java4430); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred132_Java_fragment", 242);
			LeaveRule("synpred132_Java_fragment", 242);
			LeaveRule_synpred132_Java_fragment();
		}
	}
	// $ANTLR end synpred132_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred133_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred133_Java_fragment() {}

	// $ANTLR start synpred133_Java
	private void synpred133_Java_fragment()
	{
		EnterRule_synpred133_Java_fragment();
		EnterRule("synpred133_Java_fragment", 243);
		TraceIn("synpred133_Java_fragment", 243);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1038:39: ( 'else' statement )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1038:39: 'else' statement
			{
			DebugLocation(1038, 39);
			Match(input,ELSE,Follow._ELSE_in_synpred133_Java4459); if (state.failed) return;
			DebugLocation(1038, 46);
			PushFollow(Follow._statement_in_synpred133_Java4461);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred133_Java_fragment", 243);
			LeaveRule("synpred133_Java_fragment", 243);
			LeaveRule_synpred133_Java_fragment();
		}
	}
	// $ANTLR end synpred133_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred148_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred148_Java_fragment() {}

	// $ANTLR start synpred148_Java
	private void synpred148_Java_fragment()
	{
		EnterRule_synpred148_Java_fragment();
		EnterRule("synpred148_Java_fragment", 258);
		TraceIn("synpred148_Java_fragment", 258);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1053:9: ( expression ';' )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1053:9: expression ';'
			{
			DebugLocation(1053, 9);
			PushFollow(Follow._expression_in_synpred148_Java4683);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1053, 21);
			Match(input,SEMI,Follow._SEMI_in_synpred148_Java4686); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred148_Java_fragment", 258);
			LeaveRule("synpred148_Java_fragment", 258);
			LeaveRule_synpred148_Java_fragment();
		}
	}
	// $ANTLR end synpred148_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred149_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred149_Java_fragment() {}

	// $ANTLR start synpred149_Java
	private void synpred149_Java_fragment()
	{
		EnterRule_synpred149_Java_fragment();
		EnterRule("synpred149_Java_fragment", 259);
		TraceIn("synpred149_Java_fragment", 259);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1054:9: ( IDENTIFIER ':' statement )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1054:9: IDENTIFIER ':' statement
			{
			DebugLocation(1054, 9);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_synpred149_Java4701); if (state.failed) return;
			DebugLocation(1054, 20);
			Match(input,COLON,Follow._COLON_in_synpred149_Java4703); if (state.failed) return;
			DebugLocation(1054, 24);
			PushFollow(Follow._statement_in_synpred149_Java4705);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred149_Java_fragment", 259);
			LeaveRule("synpred149_Java_fragment", 259);
			LeaveRule_synpred149_Java_fragment();
		}
	}
	// $ANTLR end synpred149_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred153_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred153_Java_fragment() {}

	// $ANTLR start synpred153_Java
	private void synpred153_Java_fragment()
	{
		EnterRule_synpred153_Java_fragment();
		EnterRule("synpred153_Java_fragment", 263);
		TraceIn("synpred153_Java_fragment", 263);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1078:13: ( catches 'finally' block )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1078:13: catches 'finally' block
			{
			DebugLocation(1078, 13);
			PushFollow(Follow._catches_in_synpred153_Java4861);
			catches();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1078, 21);
			Match(input,FINALLY,Follow._FINALLY_in_synpred153_Java4863); if (state.failed) return;
			DebugLocation(1078, 31);
			PushFollow(Follow._block_in_synpred153_Java4865);
			block();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred153_Java_fragment", 263);
			LeaveRule("synpred153_Java_fragment", 263);
			LeaveRule_synpred153_Java_fragment();
		}
	}
	// $ANTLR end synpred153_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred154_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred154_Java_fragment() {}

	// $ANTLR start synpred154_Java
	private void synpred154_Java_fragment()
	{
		EnterRule_synpred154_Java_fragment();
		EnterRule("synpred154_Java_fragment", 264);
		TraceIn("synpred154_Java_fragment", 264);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1079:13: ( catches )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1079:13: catches
			{
			DebugLocation(1079, 13);
			PushFollow(Follow._catches_in_synpred154_Java4879);
			catches();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred154_Java_fragment", 264);
			LeaveRule("synpred154_Java_fragment", 264);
			LeaveRule_synpred154_Java_fragment();
		}
	}
	// $ANTLR end synpred154_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred157_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred157_Java_fragment() {}

	// $ANTLR start synpred157_Java
	private void synpred157_Java_fragment()
	{
		EnterRule_synpred157_Java_fragment();
		EnterRule("synpred157_Java_fragment", 267);
		TraceIn("synpred157_Java_fragment", 267);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1104:9: ( 'for' '(' variableModifiers type IDENTIFIER ':' expression ')' statement )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1104:9: 'for' '(' variableModifiers type IDENTIFIER ':' expression ')' statement
			{
			DebugLocation(1104, 9);
			Match(input,FOR,Follow._FOR_in_synpred157_Java5071); if (state.failed) return;
			DebugLocation(1104, 15);
			Match(input,LPAREN,Follow._LPAREN_in_synpred157_Java5073); if (state.failed) return;
			DebugLocation(1104, 19);
			PushFollow(Follow._variableModifiers_in_synpred157_Java5075);
			variableModifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1104, 37);
			PushFollow(Follow._type_in_synpred157_Java5077);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1104, 42);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_synpred157_Java5079); if (state.failed) return;
			DebugLocation(1104, 53);
			Match(input,COLON,Follow._COLON_in_synpred157_Java5081); if (state.failed) return;
			DebugLocation(1105, 9);
			PushFollow(Follow._expression_in_synpred157_Java5092);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1105, 20);
			Match(input,RPAREN,Follow._RPAREN_in_synpred157_Java5094); if (state.failed) return;
			DebugLocation(1105, 24);
			PushFollow(Follow._statement_in_synpred157_Java5096);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred157_Java_fragment", 267);
			LeaveRule("synpred157_Java_fragment", 267);
			LeaveRule_synpred157_Java_fragment();
		}
	}
	// $ANTLR end synpred157_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred161_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred161_Java_fragment() {}

	// $ANTLR start synpred161_Java
	private void synpred161_Java_fragment()
	{
		EnterRule_synpred161_Java_fragment();
		EnterRule("synpred161_Java_fragment", 271);
		TraceIn("synpred161_Java_fragment", 271);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1118:9: ( localVariableDeclaration )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1118:9: localVariableDeclaration
			{
			DebugLocation(1118, 9);
			PushFollow(Follow._localVariableDeclaration_in_synpred161_Java5275);
			localVariableDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred161_Java_fragment", 271);
			LeaveRule("synpred161_Java_fragment", 271);
			LeaveRule_synpred161_Java_fragment();
		}
	}
	// $ANTLR end synpred161_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred202_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred202_Java_fragment() {}

	// $ANTLR start synpred202_Java
	private void synpred202_Java_fragment()
	{
		EnterRule_synpred202_Java_fragment();
		EnterRule("synpred202_Java_fragment", 312);
		TraceIn("synpred202_Java_fragment", 312);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1272:9: ( castExpression )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1272:9: castExpression
			{
			DebugLocation(1272, 9);
			PushFollow(Follow._castExpression_in_synpred202_Java6520);
			castExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred202_Java_fragment", 312);
			LeaveRule("synpred202_Java_fragment", 312);
			LeaveRule_synpred202_Java_fragment();
		}
	}
	// $ANTLR end synpred202_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred206_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred206_Java_fragment() {}

	// $ANTLR start synpred206_Java
	private void synpred206_Java_fragment()
	{
		EnterRule_synpred206_Java_fragment();
		EnterRule("synpred206_Java_fragment", 316);
		TraceIn("synpred206_Java_fragment", 316);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1282:9: ( '(' primitiveType ')' unaryExpression )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1282:9: '(' primitiveType ')' unaryExpression
			{
			DebugLocation(1282, 9);
			Match(input,LPAREN,Follow._LPAREN_in_synpred206_Java6611); if (state.failed) return;
			DebugLocation(1282, 13);
			PushFollow(Follow._primitiveType_in_synpred206_Java6613);
			primitiveType();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1282, 27);
			Match(input,RPAREN,Follow._RPAREN_in_synpred206_Java6615); if (state.failed) return;
			DebugLocation(1282, 31);
			PushFollow(Follow._unaryExpression_in_synpred206_Java6617);
			unaryExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred206_Java_fragment", 316);
			LeaveRule("synpred206_Java_fragment", 316);
			LeaveRule_synpred206_Java_fragment();
		}
	}
	// $ANTLR end synpred206_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred208_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred208_Java_fragment() {}

	// $ANTLR start synpred208_Java
	private void synpred208_Java_fragment()
	{
		EnterRule_synpred208_Java_fragment();
		EnterRule("synpred208_Java_fragment", 318);
		TraceIn("synpred208_Java_fragment", 318);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1292:10: ( '.' IDENTIFIER )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1292:10: '.' IDENTIFIER
			{
			DebugLocation(1292, 10);
			Match(input,DOT,Follow._DOT_in_synpred208_Java6688); if (state.failed) return;
			DebugLocation(1292, 14);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_synpred208_Java6690); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred208_Java_fragment", 318);
			LeaveRule("synpred208_Java_fragment", 318);
			LeaveRule_synpred208_Java_fragment();
		}
	}
	// $ANTLR end synpred208_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred209_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred209_Java_fragment() {}

	// $ANTLR start synpred209_Java
	private void synpred209_Java_fragment()
	{
		EnterRule_synpred209_Java_fragment();
		EnterRule("synpred209_Java_fragment", 319);
		TraceIn("synpred209_Java_fragment", 319);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1294:10: ( identifierSuffix )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1294:10: identifierSuffix
			{
			DebugLocation(1294, 10);
			PushFollow(Follow._identifierSuffix_in_synpred209_Java6712);
			identifierSuffix();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred209_Java_fragment", 319);
			LeaveRule("synpred209_Java_fragment", 319);
			LeaveRule_synpred209_Java_fragment();
		}
	}
	// $ANTLR end synpred209_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred211_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred211_Java_fragment() {}

	// $ANTLR start synpred211_Java
	private void synpred211_Java_fragment()
	{
		EnterRule_synpred211_Java_fragment();
		EnterRule("synpred211_Java_fragment", 321);
		TraceIn("synpred211_Java_fragment", 321);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1297:10: ( '.' IDENTIFIER )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1297:10: '.' IDENTIFIER
			{
			DebugLocation(1297, 10);
			Match(input,DOT,Follow._DOT_in_synpred211_Java6744); if (state.failed) return;
			DebugLocation(1297, 14);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_synpred211_Java6746); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred211_Java_fragment", 321);
			LeaveRule("synpred211_Java_fragment", 321);
			LeaveRule_synpred211_Java_fragment();
		}
	}
	// $ANTLR end synpred211_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred212_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred212_Java_fragment() {}

	// $ANTLR start synpred212_Java
	private void synpred212_Java_fragment()
	{
		EnterRule_synpred212_Java_fragment();
		EnterRule("synpred212_Java_fragment", 322);
		TraceIn("synpred212_Java_fragment", 322);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1299:10: ( identifierSuffix )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1299:10: identifierSuffix
			{
			DebugLocation(1299, 10);
			PushFollow(Follow._identifierSuffix_in_synpred212_Java6768);
			identifierSuffix();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred212_Java_fragment", 322);
			LeaveRule("synpred212_Java_fragment", 322);
			LeaveRule_synpred212_Java_fragment();
		}
	}
	// $ANTLR end synpred212_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred224_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred224_Java_fragment() {}

	// $ANTLR start synpred224_Java
	private void synpred224_Java_fragment()
	{
		EnterRule_synpred224_Java_fragment();
		EnterRule("synpred224_Java_fragment", 334);
		TraceIn("synpred224_Java_fragment", 334);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1327:10: ( '[' expression ']' )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1327:10: '[' expression ']'
			{
			DebugLocation(1327, 10);
			Match(input,LBRACKET,Follow._LBRACKET_in_synpred224_Java7019); if (state.failed) return;
			DebugLocation(1327, 14);
			PushFollow(Follow._expression_in_synpred224_Java7021);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1327, 25);
			Match(input,RBRACKET,Follow._RBRACKET_in_synpred224_Java7023); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred224_Java_fragment", 334);
			LeaveRule("synpred224_Java_fragment", 334);
			LeaveRule_synpred224_Java_fragment();
		}
	}
	// $ANTLR end synpred224_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred236_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred236_Java_fragment() {}

	// $ANTLR start synpred236_Java
	private void synpred236_Java_fragment()
	{
		EnterRule_synpred236_Java_fragment();
		EnterRule("synpred236_Java_fragment", 346);
		TraceIn("synpred236_Java_fragment", 346);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1350:9: ( 'new' nonWildcardTypeArguments classOrInterfaceType classCreatorRest )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1350:9: 'new' nonWildcardTypeArguments classOrInterfaceType classCreatorRest
			{
			DebugLocation(1350, 9);
			Match(input,NEW,Follow._NEW_in_synpred236_Java7232); if (state.failed) return;
			DebugLocation(1350, 15);
			PushFollow(Follow._nonWildcardTypeArguments_in_synpred236_Java7234);
			nonWildcardTypeArguments();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1350, 40);
			PushFollow(Follow._classOrInterfaceType_in_synpred236_Java7236);
			classOrInterfaceType();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1350, 61);
			PushFollow(Follow._classCreatorRest_in_synpred236_Java7238);
			classCreatorRest();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred236_Java_fragment", 346);
			LeaveRule("synpred236_Java_fragment", 346);
			LeaveRule_synpred236_Java_fragment();
		}
	}
	// $ANTLR end synpred236_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred237_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred237_Java_fragment() {}

	// $ANTLR start synpred237_Java
	private void synpred237_Java_fragment()
	{
		EnterRule_synpred237_Java_fragment();
		EnterRule("synpred237_Java_fragment", 347);
		TraceIn("synpred237_Java_fragment", 347);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1351:9: ( 'new' classOrInterfaceType classCreatorRest )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1351:9: 'new' classOrInterfaceType classCreatorRest
			{
			DebugLocation(1351, 9);
			Match(input,NEW,Follow._NEW_in_synpred237_Java7248); if (state.failed) return;
			DebugLocation(1351, 15);
			PushFollow(Follow._classOrInterfaceType_in_synpred237_Java7250);
			classOrInterfaceType();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1351, 36);
			PushFollow(Follow._classCreatorRest_in_synpred237_Java7252);
			classCreatorRest();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred237_Java_fragment", 347);
			LeaveRule("synpred237_Java_fragment", 347);
			LeaveRule_synpred237_Java_fragment();
		}
	}
	// $ANTLR end synpred237_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred239_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred239_Java_fragment() {}

	// $ANTLR start synpred239_Java
	private void synpred239_Java_fragment()
	{
		EnterRule_synpred239_Java_fragment();
		EnterRule("synpred239_Java_fragment", 349);
		TraceIn("synpred239_Java_fragment", 349);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1356:9: ( 'new' createdName '[' ']' ( '[' ']' )* arrayInitializer )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1356:9: 'new' createdName '[' ']' ( '[' ']' )* arrayInitializer
			{
			DebugLocation(1356, 9);
			Match(input,NEW,Follow._NEW_in_synpred239_Java7282); if (state.failed) return;
			DebugLocation(1356, 15);
			PushFollow(Follow._createdName_in_synpred239_Java7284);
			createdName();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1357, 9);
			Match(input,LBRACKET,Follow._LBRACKET_in_synpred239_Java7294); if (state.failed) return;
			DebugLocation(1357, 13);
			Match(input,RBRACKET,Follow._RBRACKET_in_synpred239_Java7296); if (state.failed) return;
			DebugLocation(1358, 9);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1358:9: ( '[' ']' )*
			try { DebugEnterSubRule(194);
			while (true)
			{
				int alt194=2;
				try { DebugEnterDecision(194, decisionCanBacktrack[194]);
				int LA194_1 = input.LA(1);

				if ((LA194_1==LBRACKET))
				{
					alt194 = 1;
				}


				} finally { DebugExitDecision(194); }
				switch ( alt194 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1358:10: '[' ']'
					{
					DebugLocation(1358, 10);
					Match(input,LBRACKET,Follow._LBRACKET_in_synpred239_Java7307); if (state.failed) return;
					DebugLocation(1358, 14);
					Match(input,RBRACKET,Follow._RBRACKET_in_synpred239_Java7309); if (state.failed) return;

					}
					break;

				default:
					goto loop194;
				}
			}

			loop194:
				;

			} finally { DebugExitSubRule(194); }

			DebugLocation(1360, 9);
			PushFollow(Follow._arrayInitializer_in_synpred239_Java7330);
			arrayInitializer();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred239_Java_fragment", 349);
			LeaveRule("synpred239_Java_fragment", 349);
			LeaveRule_synpred239_Java_fragment();
		}
	}
	// $ANTLR end synpred239_Java
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred240_Java_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred240_Java_fragment() {}

	// $ANTLR start synpred240_Java
	private void synpred240_Java_fragment()
	{
		EnterRule_synpred240_Java_fragment();
		EnterRule("synpred240_Java_fragment", 350);
		TraceIn("synpred240_Java_fragment", 350);
		try
		{
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1365:13: ( '[' expression ']' )
			DebugEnterAlt(1);
			// C:\\Users\\Ariel\\Documents\\Visual Studio 2013\\Projects\\ANTLRReasoningCounter\\ANTLRReasoningCounter\\Java.g:1365:13: '[' expression ']'
			{
			DebugLocation(1365, 13);
			Match(input,LBRACKET,Follow._LBRACKET_in_synpred240_Java7379); if (state.failed) return;
			DebugLocation(1365, 17);
			PushFollow(Follow._expression_in_synpred240_Java7381);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1366, 13);
			Match(input,RBRACKET,Follow._RBRACKET_in_synpred240_Java7395); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred240_Java_fragment", 350);
			LeaveRule("synpred240_Java_fragment", 350);
			LeaveRule_synpred240_Java_fragment();
		}
	}
	// $ANTLR end synpred240_Java
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _annotations_in_compilationUnit105 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _packageDeclaration_in_compilationUnit134 = new BitSet(new ulong[]{0x1200102000800012UL,0x11040C10700600UL});
		public static readonly BitSet _importDeclaration_in_compilationUnit156 = new BitSet(new ulong[]{0x1200102000800012UL,0x11040C10700600UL});
		public static readonly BitSet _typeDeclaration_in_compilationUnit178 = new BitSet(new ulong[]{0x1000102000800012UL,0x11040C10700600UL});
		public static readonly BitSet _PACKAGE_in_packageDeclaration209 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _qualifiedName_in_packageDeclaration213 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_packageDeclaration234 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IMPORT_in_importDeclaration255 = new BitSet(new ulong[]{0x40000000000000UL,0x400000000UL});
		public static readonly BitSet _STATIC_in_importDeclaration266 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_importDeclaration287 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _DOT_in_importDeclaration289 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _STAR_in_importDeclaration291 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_importDeclaration301 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IMPORT_in_importDeclaration318 = new BitSet(new ulong[]{0x40000000000000UL,0x400000000UL});
		public static readonly BitSet _STATIC_in_importDeclaration330 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_importDeclaration351 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _DOT_in_importDeclaration362 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_importDeclaration364 = new BitSet(new ulong[]{0x80000000UL,0x10000000UL});
		public static readonly BitSet _DOT_in_importDeclaration386 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _STAR_in_importDeclaration388 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_importDeclaration409 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_qualifiedImportName429 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _DOT_in_qualifiedImportName441 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_qualifiedImportName443 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _classOrInterfaceDeclaration_in_typeDeclaration474 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_typeDeclaration484 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDeclaration_in_classOrInterfaceDeclaration505 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceDeclaration_in_classOrInterfaceDeclaration515 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotation_in_modifiers550 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _PUBLIC_in_modifiers560 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _PROTECTED_in_modifiers570 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _PRIVATE_in_modifiers580 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _STATIC_in_modifiers590 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _ABSTRACT_in_modifiers600 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _FINAL_in_modifiers611 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _NATIVE_in_modifiers622 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _SYNCHRONIZED_in_modifiers633 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _TRANSIENT_in_modifiers644 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _VOLATILE_in_modifiers655 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _STRICTFP_in_modifiers666 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _FINAL_in_variableModifiers704 = new BitSet(new ulong[]{0x100000000002UL,0x200UL});
		public static readonly BitSet _annotation_in_variableModifiers719 = new BitSet(new ulong[]{0x100000000002UL,0x200UL});
		public static readonly BitSet _normalClassDeclaration_in_classDeclaration755 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumDeclaration_in_classDeclaration765 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_normalClassDeclaration791 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _CLASS_in_normalClassDeclaration794 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_normalClassDeclaration796 = new BitSet(new ulong[]{0x100010000000000UL,0x82UL});
		public static readonly BitSet _typeParameters_in_normalClassDeclaration809 = new BitSet(new ulong[]{0x100010000000000UL,0x2UL});
		public static readonly BitSet _EXTENDS_in_normalClassDeclaration831 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_normalClassDeclaration833 = new BitSet(new ulong[]{0x100000000000000UL,0x2UL});
		public static readonly BitSet _IMPLEMENTS_in_normalClassDeclaration856 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _typeList_in_normalClassDeclaration858 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _classBody_in_normalClassDeclaration892 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_typeParameters913 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _typeParameter_in_typeParameters927 = new BitSet(new ulong[]{0x8000002000000UL});
		public static readonly BitSet _COMMA_in_typeParameters942 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _typeParameter_in_typeParameters944 = new BitSet(new ulong[]{0x8000002000000UL});
		public static readonly BitSet _GT_in_typeParameters969 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_typeParameter989 = new BitSet(new ulong[]{0x10000000002UL});
		public static readonly BitSet _EXTENDS_in_typeParameter1001 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _typeBound_in_typeParameter1003 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_typeBound1036 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _AMP_in_typeBound1047 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_typeBound1049 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _modifiers_in_enumDeclaration1081 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _ENUM_in_enumDeclaration1093 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_enumDeclaration1114 = new BitSet(new ulong[]{0x100000000000000UL,0x2UL});
		public static readonly BitSet _IMPLEMENTS_in_enumDeclaration1125 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _typeList_in_enumDeclaration1127 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _enumBody_in_enumDeclaration1148 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_enumBody1173 = new BitSet(new ulong[]{0x40000002000000UL,0x11000200UL});
		public static readonly BitSet _enumConstants_in_enumBody1184 = new BitSet(new ulong[]{0x2000000UL,0x11000000UL});
		public static readonly BitSet _COMMA_in_enumBody1206 = new BitSet(new ulong[]{0x0UL,0x11000000UL});
		public static readonly BitSet _enumBodyDeclarations_in_enumBody1219 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _RBRACE_in_enumBody1241 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumConstant_in_enumConstants1261 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _COMMA_in_enumConstants1272 = new BitSet(new ulong[]{0x40000000000000UL,0x200UL});
		public static readonly BitSet _enumConstant_in_enumConstants1274 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _annotations_in_enumConstant1308 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_enumConstant1329 = new BitSet(new ulong[]{0x2UL,0x42UL});
		public static readonly BitSet _arguments_in_enumConstant1340 = new BitSet(new ulong[]{0x2UL,0x2UL});
		public static readonly BitSet _classBody_in_enumConstant1362 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_enumBodyDeclarations1403 = new BitSet(new ulong[]{0x1840502100A14012UL,0x19040C30700692UL});
		public static readonly BitSet _classBodyDeclaration_in_enumBodyDeclarations1415 = new BitSet(new ulong[]{0x1840502100A14012UL,0x19040C30700692UL});
		public static readonly BitSet _normalInterfaceDeclaration_in_interfaceDeclaration1446 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationTypeDeclaration_in_interfaceDeclaration1456 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_normalInterfaceDeclaration1480 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _INTERFACE_in_normalInterfaceDeclaration1482 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_normalInterfaceDeclaration1484 = new BitSet(new ulong[]{0x10000000000UL,0x82UL});
		public static readonly BitSet _typeParameters_in_normalInterfaceDeclaration1495 = new BitSet(new ulong[]{0x10000000000UL,0x2UL});
		public static readonly BitSet _EXTENDS_in_normalInterfaceDeclaration1517 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _typeList_in_normalInterfaceDeclaration1519 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _interfaceBody_in_normalInterfaceDeclaration1540 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_typeList1560 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _COMMA_in_typeList1573 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_typeList1575 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _LBRACE_in_classBody1608 = new BitSet(new ulong[]{0x1840502100A14010UL,0x19040C31700692UL});
		public static readonly BitSet _classBodyDeclaration_in_classBody1620 = new BitSet(new ulong[]{0x1840502100A14010UL,0x19040C31700692UL});
		public static readonly BitSet _RBRACE_in_classBody1642 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_interfaceBody1662 = new BitSet(new ulong[]{0x1840502100A14010UL,0x19040C31700690UL});
		public static readonly BitSet _interfaceBodyDeclaration_in_interfaceBody1674 = new BitSet(new ulong[]{0x1840502100A14010UL,0x19040C31700690UL});
		public static readonly BitSet _RBRACE_in_interfaceBody1696 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_classBodyDeclaration1716 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STATIC_in_classBodyDeclaration1727 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _block_in_classBodyDeclaration1749 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberDecl_in_classBodyDeclaration1759 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fieldDeclaration_in_memberDecl1780 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _methodDeclaration_in_memberDecl1791 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDeclaration_in_memberDecl1802 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceDeclaration_in_memberDecl1813 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_methodDeclaration1851 = new BitSet(new ulong[]{0x40000000000000UL,0x80UL});
		public static readonly BitSet _typeParameters_in_methodDeclaration1862 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_methodDeclaration1883 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _formalParameters_in_methodDeclaration1895 = new BitSet(new ulong[]{0x0UL,0x400000000002UL});
		public static readonly BitSet _THROWS_in_methodDeclaration1906 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _qualifiedNameList_in_methodDeclaration1908 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _LBRACE_in_methodDeclaration1929 = new BitSet(new ulong[]{0x38C1D82350E1C310UL,0x3FB7BC357A1EF2UL});
		public static readonly BitSet _explicitConstructorInvocation_in_methodDeclaration1941 = new BitSet(new ulong[]{0x38C1D82350E1C310UL,0x3FB7BC357A1E72UL});
		public static readonly BitSet _blockStatement_in_methodDeclaration1963 = new BitSet(new ulong[]{0x38C1D82350E1C310UL,0x3FB7BC357A1E72UL});
		public static readonly BitSet _RBRACE_in_methodDeclaration1984 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_methodDeclaration1999 = new BitSet(new ulong[]{0x840400100214000UL,0x8000020000090UL});
		public static readonly BitSet _typeParameters_in_methodDeclaration2010 = new BitSet(new ulong[]{0x840400100214000UL,0x8000020000010UL});
		public static readonly BitSet _type_in_methodDeclaration2032 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _VOID_in_methodDeclaration2046 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_methodDeclaration2066 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _formalParameters_in_methodDeclaration2076 = new BitSet(new ulong[]{0x0UL,0x400010000006UL});
		public static readonly BitSet _LBRACKET_in_methodDeclaration2087 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_methodDeclaration2089 = new BitSet(new ulong[]{0x0UL,0x400010000006UL});
		public static readonly BitSet _THROWS_in_methodDeclaration2111 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _qualifiedNameList_in_methodDeclaration2113 = new BitSet(new ulong[]{0x0UL,0x10000002UL});
		public static readonly BitSet _block_in_methodDeclaration2168 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_methodDeclaration2182 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_fieldDeclaration2214 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_fieldDeclaration2224 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _variableDeclarator_in_fieldDeclaration2234 = new BitSet(new ulong[]{0x2000000UL,0x10000000UL});
		public static readonly BitSet _COMMA_in_fieldDeclaration2245 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _variableDeclarator_in_fieldDeclaration2247 = new BitSet(new ulong[]{0x2000000UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_fieldDeclaration2268 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_variableDeclarator2288 = new BitSet(new ulong[]{0x4000000002UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_variableDeclarator2299 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_variableDeclarator2301 = new BitSet(new ulong[]{0x4000000002UL,0x4UL});
		public static readonly BitSet _EQ_in_variableDeclarator2323 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1872UL});
		public static readonly BitSet _variableInitializer_in_variableDeclarator2325 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceFieldDeclaration_in_interfaceBodyDeclaration2364 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceMethodDeclaration_in_interfaceBodyDeclaration2374 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceDeclaration_in_interfaceBodyDeclaration2384 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDeclaration_in_interfaceBodyDeclaration2394 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_interfaceBodyDeclaration2404 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_interfaceMethodDeclaration2424 = new BitSet(new ulong[]{0x840400100214000UL,0x8000020000090UL});
		public static readonly BitSet _typeParameters_in_interfaceMethodDeclaration2435 = new BitSet(new ulong[]{0x840400100214000UL,0x8000020000010UL});
		public static readonly BitSet _type_in_interfaceMethodDeclaration2457 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _VOID_in_interfaceMethodDeclaration2468 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_interfaceMethodDeclaration2488 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _formalParameters_in_interfaceMethodDeclaration2498 = new BitSet(new ulong[]{0x0UL,0x400010000004UL});
		public static readonly BitSet _LBRACKET_in_interfaceMethodDeclaration2509 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_interfaceMethodDeclaration2511 = new BitSet(new ulong[]{0x0UL,0x400010000004UL});
		public static readonly BitSet _THROWS_in_interfaceMethodDeclaration2533 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _qualifiedNameList_in_interfaceMethodDeclaration2535 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_interfaceMethodDeclaration2548 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_interfaceFieldDeclaration2570 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_interfaceFieldDeclaration2572 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _variableDeclarator_in_interfaceFieldDeclaration2574 = new BitSet(new ulong[]{0x2000000UL,0x10000000UL});
		public static readonly BitSet _COMMA_in_interfaceFieldDeclaration2585 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _variableDeclarator_in_interfaceFieldDeclaration2587 = new BitSet(new ulong[]{0x2000000UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_interfaceFieldDeclaration2608 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classOrInterfaceType_in_type2629 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_type2640 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_type2642 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _primitiveType_in_type2663 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_type2674 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_type2676 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _IDENTIFIER_in_classOrInterfaceType2708 = new BitSet(new ulong[]{0x80000002UL,0x80UL});
		public static readonly BitSet _typeArguments_in_classOrInterfaceType2719 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _DOT_in_classOrInterfaceType2741 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_classOrInterfaceType2743 = new BitSet(new ulong[]{0x80000002UL,0x80UL});
		public static readonly BitSet _typeArguments_in_classOrInterfaceType2758 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _BOOLEAN_in_primitiveType2805 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHAR_in_primitiveType2815 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BYTE_in_primitiveType2825 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SHORT_in_primitiveType2835 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_primitiveType2845 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LONG_in_primitiveType2857 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FLOAT_in_primitiveType2867 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOUBLE_in_primitiveType2877 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_typeArguments2897 = new BitSet(new ulong[]{0x840400100214000UL,0x20800010UL});
		public static readonly BitSet _typeArgument_in_typeArguments2899 = new BitSet(new ulong[]{0x8000002000000UL});
		public static readonly BitSet _COMMA_in_typeArguments2910 = new BitSet(new ulong[]{0x840400100214000UL,0x20800010UL});
		public static readonly BitSet _typeArgument_in_typeArguments2912 = new BitSet(new ulong[]{0x8000002000000UL});
		public static readonly BitSet _GT_in_typeArguments2934 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_typeArgument2954 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _QUES_in_typeArgument2964 = new BitSet(new ulong[]{0x10000000002UL,0x10000000000UL});
		public static readonly BitSet _set_in_typeArgument2988 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_typeArgument3032 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedName_in_qualifiedNameList3063 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _COMMA_in_qualifiedNameList3074 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _qualifiedName_in_qualifiedNameList3076 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _LPAREN_in_formalParameters3107 = new BitSet(new ulong[]{0x840500100214000UL,0x28000210UL});
		public static readonly BitSet _formalParameterDecls_in_formalParameters3118 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_formalParameters3140 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ellipsisParameterDecl_in_formalParameterDecls3160 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalParameterDecl_in_formalParameterDecls3170 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _COMMA_in_formalParameterDecls3181 = new BitSet(new ulong[]{0x840500100214000UL,0x20000210UL});
		public static readonly BitSet _normalParameterDecl_in_formalParameterDecls3183 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _normalParameterDecl_in_formalParameterDecls3205 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _COMMA_in_formalParameterDecls3215 = new BitSet(new ulong[]{0x840500100214000UL,0x20000210UL});
		public static readonly BitSet _ellipsisParameterDecl_in_formalParameterDecls3237 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableModifiers_in_normalParameterDecl3257 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_normalParameterDecl3259 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_normalParameterDecl3261 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_normalParameterDecl3272 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_normalParameterDecl3274 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _variableModifiers_in_ellipsisParameterDecl3305 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_ellipsisParameterDecl3315 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ELLIPSIS_in_ellipsisParameterDecl3318 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_ellipsisParameterDecl3328 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nonWildcardTypeArguments_in_explicitConstructorInvocation3350 = new BitSet(new ulong[]{0x0UL,0x110000000000UL});
		public static readonly BitSet _set_in_explicitConstructorInvocation3376 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _arguments_in_explicitConstructorInvocation3408 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_explicitConstructorInvocation3410 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primary_in_explicitConstructorInvocation3421 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _DOT_in_explicitConstructorInvocation3431 = new BitSet(new ulong[]{0x0UL,0x10000000080UL});
		public static readonly BitSet _nonWildcardTypeArguments_in_explicitConstructorInvocation3442 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _SUPER_in_explicitConstructorInvocation3463 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _arguments_in_explicitConstructorInvocation3473 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_explicitConstructorInvocation3475 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_qualifiedName3500 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _DOT_in_qualifiedName3513 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_qualifiedName3517 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _annotation_in_annotations3551 = new BitSet(new ulong[]{0x2UL,0x200UL});
		public static readonly BitSet _MONKEYS_AT_in_annotation3584 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _qualifiedName_in_annotation3586 = new BitSet(new ulong[]{0x2UL,0x40UL});
		public static readonly BitSet _LPAREN_in_annotation3600 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0280A1A72UL});
		public static readonly BitSet _elementValuePairs_in_annotation3627 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _elementValue_in_annotation3651 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_annotation3687 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _elementValuePair_in_elementValuePairs3719 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _COMMA_in_elementValuePairs3730 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _elementValuePair_in_elementValuePairs3732 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _IDENTIFIER_in_elementValuePair3763 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _EQ_in_elementValuePair3765 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1A72UL});
		public static readonly BitSet _elementValue_in_elementValuePair3767 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalExpression_in_elementValue3787 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotation_in_elementValue3797 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _elementValueArrayInitializer_in_elementValue3807 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_elementValueArrayInitializer3827 = new BitSet(new ulong[]{0x2840C80302614200UL,0xA91B0210A1A72UL});
		public static readonly BitSet _elementValue_in_elementValueArrayInitializer3838 = new BitSet(new ulong[]{0x2000000UL,0x1000000UL});
		public static readonly BitSet _COMMA_in_elementValueArrayInitializer3853 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1A72UL});
		public static readonly BitSet _elementValue_in_elementValueArrayInitializer3855 = new BitSet(new ulong[]{0x2000000UL,0x1000000UL});
		public static readonly BitSet _COMMA_in_elementValueArrayInitializer3884 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _RBRACE_in_elementValueArrayInitializer3888 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_annotationTypeDeclaration3911 = new BitSet(new ulong[]{0x0UL,0x200UL});
		public static readonly BitSet _MONKEYS_AT_in_annotationTypeDeclaration3913 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _INTERFACE_in_annotationTypeDeclaration3923 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_annotationTypeDeclaration3933 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _annotationTypeBody_in_annotationTypeDeclaration3943 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_annotationTypeBody3964 = new BitSet(new ulong[]{0x1840502100A14010UL,0x11040C31700610UL});
		public static readonly BitSet _annotationTypeElementDeclaration_in_annotationTypeBody3976 = new BitSet(new ulong[]{0x1840502100A14010UL,0x11040C31700610UL});
		public static readonly BitSet _RBRACE_in_annotationTypeBody3998 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationMethodDeclaration_in_annotationTypeElementDeclaration4020 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceFieldDeclaration_in_annotationTypeElementDeclaration4030 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalClassDeclaration_in_annotationTypeElementDeclaration4040 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalInterfaceDeclaration_in_annotationTypeElementDeclaration4050 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumDeclaration_in_annotationTypeElementDeclaration4060 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationTypeDeclaration_in_annotationTypeElementDeclaration4070 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_annotationTypeElementDeclaration4080 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_annotationMethodDeclaration4100 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_annotationMethodDeclaration4102 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_annotationMethodDeclaration4104 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _LPAREN_in_annotationMethodDeclaration4114 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_annotationMethodDeclaration4116 = new BitSet(new ulong[]{0x20000000UL,0x10000000UL});
		public static readonly BitSet _DEFAULT_in_annotationMethodDeclaration4119 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1A72UL});
		public static readonly BitSet _elementValue_in_annotationMethodDeclaration4121 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_annotationMethodDeclaration4150 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_block4174 = new BitSet(new ulong[]{0x38C1D82350E1C310UL,0x3FB7BC357A1E72UL});
		public static readonly BitSet _blockStatement_in_block4185 = new BitSet(new ulong[]{0x38C1D82350E1C310UL,0x3FB7BC357A1E72UL});
		public static readonly BitSet _RBRACE_in_block4206 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclarationStatement_in_blockStatement4228 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classOrInterfaceDeclaration_in_blockStatement4238 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_blockStatement4248 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclaration_in_localVariableDeclarationStatement4269 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_localVariableDeclarationStatement4279 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableModifiers_in_localVariableDeclaration4299 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_localVariableDeclaration4301 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _variableDeclarator_in_localVariableDeclaration4311 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _COMMA_in_localVariableDeclaration4322 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _variableDeclarator_in_localVariableDeclaration4324 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _block_in_statement4355 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSERT_in_statement4379 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_statement4399 = new BitSet(new ulong[]{0x1000000UL,0x10000000UL});
		public static readonly BitSet _COLON_in_statement4402 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_statement4404 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_statement4408 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSERT_in_statement4418 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_statement4421 = new BitSet(new ulong[]{0x1000000UL,0x10000000UL});
		public static readonly BitSet _COLON_in_statement4424 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_statement4426 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_statement4430 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IF_in_statement4452 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _parExpression_in_statement4454 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_statement4456 = new BitSet(new ulong[]{0x1000000002UL});
		public static readonly BitSet _ELSE_in_statement4459 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_statement4461 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forstatement_in_statement4483 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHILE_in_statement4493 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _parExpression_in_statement4495 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_statement4497 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DO_in_statement4507 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_statement4509 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _WHILE_in_statement4511 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _parExpression_in_statement4513 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_statement4515 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _trystatement_in_statement4525 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SWITCH_in_statement4535 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _parExpression_in_statement4537 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _LBRACE_in_statement4539 = new BitSet(new ulong[]{0x20080000UL,0x1000000UL});
		public static readonly BitSet _switchBlockStatementGroups_in_statement4541 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _RBRACE_in_statement4543 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYNCHRONIZED_in_statement4553 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _parExpression_in_statement4555 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _block_in_statement4557 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RETURN_in_statement4567 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0300A1870UL});
		public static readonly BitSet _expression_in_statement4570 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_statement4575 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THROW_in_statement4585 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_statement4587 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_statement4589 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BREAK_in_statement4599 = new BitSet(new ulong[]{0x40000000000000UL,0x10000000UL});
		public static readonly BitSet _IDENTIFIER_in_statement4614 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_statement4631 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONTINUE_in_statement4641 = new BitSet(new ulong[]{0x40000000000000UL,0x10000000UL});
		public static readonly BitSet _IDENTIFIER_in_statement4656 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_statement4673 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_statement4683 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_statement4686 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_statement4701 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_statement4703 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_statement4705 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_statement4715 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchBlockStatementGroup_in_switchBlockStatementGroups4737 = new BitSet(new ulong[]{0x20080002UL});
		public static readonly BitSet _switchLabel_in_switchBlockStatementGroup4766 = new BitSet(new ulong[]{0x38C1D82350E1C312UL,0x3FB7BC347A1E72UL});
		public static readonly BitSet _blockStatement_in_switchBlockStatementGroup4777 = new BitSet(new ulong[]{0x38C1D82350E1C312UL,0x3FB7BC347A1E72UL});
		public static readonly BitSet _CASE_in_switchLabel4808 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_switchLabel4810 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_switchLabel4812 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEFAULT_in_switchLabel4822 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_switchLabel4824 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRY_in_trystatement4845 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _block_in_trystatement4847 = new BitSet(new ulong[]{0x200000100000UL});
		public static readonly BitSet _catches_in_trystatement4861 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _FINALLY_in_trystatement4863 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _block_in_trystatement4865 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _catches_in_trystatement4879 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FINALLY_in_trystatement4893 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _block_in_trystatement4895 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _catchClause_in_catches4926 = new BitSet(new ulong[]{0x100002UL});
		public static readonly BitSet _catchClause_in_catches4937 = new BitSet(new ulong[]{0x100002UL});
		public static readonly BitSet _CATCH_in_catchClause4968 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _LPAREN_in_catchClause4970 = new BitSet(new ulong[]{0x840500100214000UL,0x20000210UL});
		public static readonly BitSet _formalParameter_in_catchClause4972 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_catchClause4982 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _block_in_catchClause4984 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableModifiers_in_formalParameter5005 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_formalParameter5007 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_formalParameter5009 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_formalParameter5020 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_formalParameter5022 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _FOR_in_forstatement5071 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _LPAREN_in_forstatement5073 = new BitSet(new ulong[]{0x840500100214000UL,0x20000210UL});
		public static readonly BitSet _variableModifiers_in_forstatement5075 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_forstatement5077 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_forstatement5079 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_forstatement5081 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_forstatement5092 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_forstatement5094 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_forstatement5096 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FOR_in_forstatement5128 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _LPAREN_in_forstatement5130 = new BitSet(new ulong[]{0x2840D80300614200UL,0xA91B0300A1A70UL});
		public static readonly BitSet _forInit_in_forstatement5150 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_forstatement5171 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0300A1870UL});
		public static readonly BitSet _expression_in_forstatement5191 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_forstatement5212 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0280A1870UL});
		public static readonly BitSet _expressionList_in_forstatement5232 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_forstatement5253 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_forstatement5255 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclaration_in_forInit5275 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionList_in_forInit5285 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_parExpression5305 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_parExpression5307 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_parExpression5309 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expressionList5329 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _COMMA_in_expressionList5340 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_expressionList5342 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _conditionalExpression_in_expression5374 = new BitSet(new ulong[]{0x8004000042082UL,0x4280050080UL});
		public static readonly BitSet _assignmentOperator_in_expression5385 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_expression5387 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EQ_in_assignmentOperator5419 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PLUSEQ_in_assignmentOperator5429 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUBEQ_in_assignmentOperator5439 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STAREQ_in_assignmentOperator5449 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SLASHEQ_in_assignmentOperator5459 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _AMPEQ_in_assignmentOperator5469 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BAREQ_in_assignmentOperator5479 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CARETEQ_in_assignmentOperator5489 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PERCENTEQ_in_assignmentOperator5499 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_assignmentOperator5510 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _LT_in_assignmentOperator5512 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _EQ_in_assignmentOperator5514 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_assignmentOperator5525 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _GT_in_assignmentOperator5527 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _GT_in_assignmentOperator5529 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _EQ_in_assignmentOperator5531 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_assignmentOperator5542 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _GT_in_assignmentOperator5544 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _EQ_in_assignmentOperator5546 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalOrExpression_in_conditionalExpression5567 = new BitSet(new ulong[]{0x2UL,0x800000UL});
		public static readonly BitSet _QUES_in_conditionalExpression5578 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_conditionalExpression5580 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_conditionalExpression5582 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _conditionalExpression_in_conditionalExpression5584 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalAndExpression_in_conditionalOrExpression5615 = new BitSet(new ulong[]{0x1002UL});
		public static readonly BitSet _BARBAR_in_conditionalOrExpression5626 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _conditionalAndExpression_in_conditionalOrExpression5628 = new BitSet(new ulong[]{0x1002UL});
		public static readonly BitSet _inclusiveOrExpression_in_conditionalAndExpression5659 = new BitSet(new ulong[]{0x42UL});
		public static readonly BitSet _AMPAMP_in_conditionalAndExpression5670 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _inclusiveOrExpression_in_conditionalAndExpression5672 = new BitSet(new ulong[]{0x42UL});
		public static readonly BitSet _exclusiveOrExpression_in_inclusiveOrExpression5703 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _BAR_in_inclusiveOrExpression5714 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _exclusiveOrExpression_in_inclusiveOrExpression5716 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _andExpression_in_exclusiveOrExpression5747 = new BitSet(new ulong[]{0x20002UL});
		public static readonly BitSet _CARET_in_exclusiveOrExpression5758 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _andExpression_in_exclusiveOrExpression5760 = new BitSet(new ulong[]{0x20002UL});
		public static readonly BitSet _equalityExpression_in_andExpression5791 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _AMP_in_andExpression5802 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _equalityExpression_in_andExpression5804 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _instanceOfExpression_in_equalityExpression5835 = new BitSet(new ulong[]{0x8000000402UL});
		public static readonly BitSet _set_in_equalityExpression5862 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _instanceOfExpression_in_equalityExpression5912 = new BitSet(new ulong[]{0x8000000402UL});
		public static readonly BitSet _relationalExpression_in_instanceOfExpression5943 = new BitSet(new ulong[]{0x400000000000002UL});
		public static readonly BitSet _INSTANCEOF_in_instanceOfExpression5954 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_instanceOfExpression5956 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression5987 = new BitSet(new ulong[]{0x8000000000002UL,0x80UL});
		public static readonly BitSet _relationalOp_in_relationalExpression5998 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression6000 = new BitSet(new ulong[]{0x8000000000002UL,0x80UL});
		public static readonly BitSet _LT_in_relationalOp6032 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _EQ_in_relationalOp6034 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_relationalOp6045 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _EQ_in_relationalOp6047 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_relationalOp6057 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_relationalOp6067 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression6087 = new BitSet(new ulong[]{0x8000000000002UL,0x80UL});
		public static readonly BitSet _shiftOp_in_shiftExpression6098 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression6100 = new BitSet(new ulong[]{0x8000000000002UL,0x80UL});
		public static readonly BitSet _LT_in_shiftOp6133 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _LT_in_shiftOp6135 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_shiftOp6146 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _GT_in_shiftOp6148 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _GT_in_shiftOp6150 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_shiftOp6161 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _GT_in_shiftOp6163 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression6184 = new BitSet(new ulong[]{0x2UL,0x2000020000UL});
		public static readonly BitSet _set_in_additiveExpression6211 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression6261 = new BitSet(new ulong[]{0x2UL,0x2000020000UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression6299 = new BitSet(new ulong[]{0x2UL,0x140008000UL});
		public static readonly BitSet _set_in_multiplicativeExpression6326 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression6394 = new BitSet(new ulong[]{0x2UL,0x140008000UL});
		public static readonly BitSet _PLUS_in_unaryExpression6427 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression6430 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUB_in_unaryExpression6440 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression6442 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PLUSPLUS_in_unaryExpression6452 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression6454 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUBSUB_in_unaryExpression6464 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression6466 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unaryExpressionNotPlusMinus_in_unaryExpression6476 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TILDE_in_unaryExpressionNotPlusMinus6496 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _unaryExpression_in_unaryExpressionNotPlusMinus6498 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BANG_in_unaryExpressionNotPlusMinus6508 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _unaryExpression_in_unaryExpressionNotPlusMinus6510 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _castExpression_in_unaryExpressionNotPlusMinus6520 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primary_in_unaryExpressionNotPlusMinus6530 = new BitSet(new ulong[]{0x80000002UL,0x8000080004UL});
		public static readonly BitSet _selector_in_unaryExpressionNotPlusMinus6541 = new BitSet(new ulong[]{0x80000002UL,0x8000080004UL});
		public static readonly BitSet _LPAREN_in_castExpression6611 = new BitSet(new ulong[]{0x800400100214000UL,0x20000010UL});
		public static readonly BitSet _primitiveType_in_castExpression6613 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_castExpression6615 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _unaryExpression_in_castExpression6617 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_castExpression6627 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_castExpression6629 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_castExpression6631 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA911020001870UL});
		public static readonly BitSet _unaryExpressionNotPlusMinus_in_castExpression6633 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _parExpression_in_primary6655 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THIS_in_primary6677 = new BitSet(new ulong[]{0x80000002UL,0x44UL});
		public static readonly BitSet _DOT_in_primary6688 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_primary6690 = new BitSet(new ulong[]{0x80000002UL,0x44UL});
		public static readonly BitSet _identifierSuffix_in_primary6712 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_primary6733 = new BitSet(new ulong[]{0x80000002UL,0x44UL});
		public static readonly BitSet _DOT_in_primary6744 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_primary6746 = new BitSet(new ulong[]{0x80000002UL,0x44UL});
		public static readonly BitSet _identifierSuffix_in_primary6768 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_primary6789 = new BitSet(new ulong[]{0x80000000UL,0x40UL});
		public static readonly BitSet _superSuffix_in_primary6799 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_primary6809 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _creator_in_primary6819 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_primary6829 = new BitSet(new ulong[]{0x80000000UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_primary6840 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_primary6842 = new BitSet(new ulong[]{0x80000000UL,0x4UL});
		public static readonly BitSet _DOT_in_primary6863 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _CLASS_in_primary6865 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_primary6875 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _DOT_in_primary6877 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _CLASS_in_primary6879 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_superSuffix6905 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_superSuffix6915 = new BitSet(new ulong[]{0x40000000000000UL,0x80UL});
		public static readonly BitSet _typeArguments_in_superSuffix6918 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_superSuffix6939 = new BitSet(new ulong[]{0x2UL,0x40UL});
		public static readonly BitSet _arguments_in_superSuffix6950 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACKET_in_identifierSuffix6983 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_identifierSuffix6985 = new BitSet(new ulong[]{0x80000000UL,0x4UL});
		public static readonly BitSet _DOT_in_identifierSuffix7006 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _CLASS_in_identifierSuffix7008 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACKET_in_identifierSuffix7019 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_identifierSuffix7021 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_identifierSuffix7023 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _arguments_in_identifierSuffix7044 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_identifierSuffix7054 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _CLASS_in_identifierSuffix7056 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_identifierSuffix7066 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _nonWildcardTypeArguments_in_identifierSuffix7068 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_identifierSuffix7070 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _arguments_in_identifierSuffix7072 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_identifierSuffix7082 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _THIS_in_identifierSuffix7084 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_identifierSuffix7094 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _SUPER_in_identifierSuffix7096 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _arguments_in_identifierSuffix7098 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _innerCreator_in_identifierSuffix7108 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_selector7130 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_selector7132 = new BitSet(new ulong[]{0x2UL,0x40UL});
		public static readonly BitSet _arguments_in_selector7143 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_selector7164 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _THIS_in_selector7166 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_selector7176 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _SUPER_in_selector7178 = new BitSet(new ulong[]{0x80000000UL,0x40UL});
		public static readonly BitSet _superSuffix_in_selector7188 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _innerCreator_in_selector7198 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACKET_in_selector7208 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_selector7210 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_selector7212 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_creator7232 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _nonWildcardTypeArguments_in_creator7234 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _classOrInterfaceType_in_creator7236 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _classCreatorRest_in_creator7238 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_creator7248 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _classOrInterfaceType_in_creator7250 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _classCreatorRest_in_creator7252 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayCreator_in_creator7262 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_arrayCreator7282 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _createdName_in_arrayCreator7284 = new BitSet(new ulong[]{0x0UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_arrayCreator7294 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_arrayCreator7296 = new BitSet(new ulong[]{0x0UL,0x6UL});
		public static readonly BitSet _LBRACKET_in_arrayCreator7307 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_arrayCreator7309 = new BitSet(new ulong[]{0x0UL,0x6UL});
		public static readonly BitSet _arrayInitializer_in_arrayCreator7330 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_arrayCreator7341 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _createdName_in_arrayCreator7343 = new BitSet(new ulong[]{0x0UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_arrayCreator7353 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_arrayCreator7355 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_arrayCreator7365 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_arrayCreator7379 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_arrayCreator7381 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_arrayCreator7395 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_arrayCreator7417 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_arrayCreator7419 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _arrayInitializer_in_variableInitializer7450 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_variableInitializer7460 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_arrayInitializer7480 = new BitSet(new ulong[]{0x2840C80302614200UL,0xA91B0210A1872UL});
		public static readonly BitSet _variableInitializer_in_arrayInitializer7496 = new BitSet(new ulong[]{0x2000000UL,0x1000000UL});
		public static readonly BitSet _COMMA_in_arrayInitializer7515 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1872UL});
		public static readonly BitSet _variableInitializer_in_arrayInitializer7517 = new BitSet(new ulong[]{0x2000000UL,0x1000000UL});
		public static readonly BitSet _COMMA_in_arrayInitializer7567 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _RBRACE_in_arrayInitializer7580 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classOrInterfaceType_in_createdName7614 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_createdName7624 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_innerCreator7645 = new BitSet(new ulong[]{0x0UL,0x800UL});
		public static readonly BitSet _NEW_in_innerCreator7647 = new BitSet(new ulong[]{0x40000000000000UL,0x80UL});
		public static readonly BitSet _nonWildcardTypeArguments_in_innerCreator7658 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_innerCreator7679 = new BitSet(new ulong[]{0x0UL,0xC0UL});
		public static readonly BitSet _typeArguments_in_innerCreator7690 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _classCreatorRest_in_innerCreator7711 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_classCreatorRest7732 = new BitSet(new ulong[]{0x2UL,0x2UL});
		public static readonly BitSet _classBody_in_classCreatorRest7743 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_nonWildcardTypeArguments7775 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _typeList_in_nonWildcardTypeArguments7777 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _GT_in_nonWildcardTypeArguments7787 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_arguments7807 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0280A1870UL});
		public static readonly BitSet _expressionList_in_arguments7810 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_arguments7823 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_classHeader7947 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _CLASS_in_classHeader7949 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_classHeader7951 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_enumHeader7971 = new BitSet(new ulong[]{0x40002000000000UL});
		public static readonly BitSet _set_in_enumHeader7973 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_enumHeader7979 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_interfaceHeader7999 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _INTERFACE_in_interfaceHeader8001 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_interfaceHeader8003 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_annotationHeader8023 = new BitSet(new ulong[]{0x0UL,0x200UL});
		public static readonly BitSet _MONKEYS_AT_in_annotationHeader8025 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _INTERFACE_in_annotationHeader8027 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_annotationHeader8029 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_typeHeader8049 = new BitSet(new ulong[]{0x1000002000800000UL,0x200UL});
		public static readonly BitSet _CLASS_in_typeHeader8052 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _ENUM_in_typeHeader8054 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _MONKEYS_AT_in_typeHeader8057 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _INTERFACE_in_typeHeader8061 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_typeHeader8065 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_methodHeader8085 = new BitSet(new ulong[]{0x840400100214000UL,0x8000020000090UL});
		public static readonly BitSet _typeParameters_in_methodHeader8087 = new BitSet(new ulong[]{0x840400100214000UL,0x8000020000010UL});
		public static readonly BitSet _type_in_methodHeader8091 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _VOID_in_methodHeader8093 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_methodHeader8097 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _LPAREN_in_methodHeader8099 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_fieldHeader8119 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_fieldHeader8121 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_fieldHeader8123 = new BitSet(new ulong[]{0x4002000000UL,0x10000004UL});
		public static readonly BitSet _LBRACKET_in_fieldHeader8126 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_fieldHeader8127 = new BitSet(new ulong[]{0x4002000000UL,0x10000004UL});
		public static readonly BitSet _set_in_fieldHeader8131 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableModifiers_in_localVariableHeader8157 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_localVariableHeader8159 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_localVariableHeader8161 = new BitSet(new ulong[]{0x4002000000UL,0x10000004UL});
		public static readonly BitSet _LBRACKET_in_localVariableHeader8164 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_localVariableHeader8165 = new BitSet(new ulong[]{0x4002000000UL,0x10000004UL});
		public static readonly BitSet _set_in_localVariableHeader8169 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotations_in_synpred2_Java105 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _packageDeclaration_in_synpred2_Java134 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDeclaration_in_synpred12_Java505 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalClassDeclaration_in_synpred27_Java755 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalInterfaceDeclaration_in_synpred43_Java1446 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fieldDeclaration_in_synpred52_Java1780 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _methodDeclaration_in_synpred53_Java1791 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDeclaration_in_synpred54_Java1802 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _explicitConstructorInvocation_in_synpred57_Java1941 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_synpred59_Java1851 = new BitSet(new ulong[]{0x40000000000000UL,0x80UL});
		public static readonly BitSet _typeParameters_in_synpred59_Java1862 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_synpred59_Java1883 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _formalParameters_in_synpred59_Java1895 = new BitSet(new ulong[]{0x0UL,0x400000000002UL});
		public static readonly BitSet _THROWS_in_synpred59_Java1906 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _qualifiedNameList_in_synpred59_Java1908 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _LBRACE_in_synpred59_Java1929 = new BitSet(new ulong[]{0x38C1D82350E1C310UL,0x3FB7BC357A1EF2UL});
		public static readonly BitSet _explicitConstructorInvocation_in_synpred59_Java1941 = new BitSet(new ulong[]{0x38C1D82350E1C310UL,0x3FB7BC357A1E72UL});
		public static readonly BitSet _blockStatement_in_synpred59_Java1963 = new BitSet(new ulong[]{0x38C1D82350E1C310UL,0x3FB7BC357A1E72UL});
		public static readonly BitSet _RBRACE_in_synpred59_Java1984 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceFieldDeclaration_in_synpred68_Java2364 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceMethodDeclaration_in_synpred69_Java2374 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceDeclaration_in_synpred70_Java2384 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDeclaration_in_synpred71_Java2394 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ellipsisParameterDecl_in_synpred96_Java3160 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalParameterDecl_in_synpred98_Java3170 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _COMMA_in_synpred98_Java3181 = new BitSet(new ulong[]{0x840500100214000UL,0x20000210UL});
		public static readonly BitSet _normalParameterDecl_in_synpred98_Java3183 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _normalParameterDecl_in_synpred99_Java3205 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _COMMA_in_synpred99_Java3215 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nonWildcardTypeArguments_in_synpred103_Java3350 = new BitSet(new ulong[]{0x0UL,0x110000000000UL});
		public static readonly BitSet _set_in_synpred103_Java3376 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _arguments_in_synpred103_Java3408 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_synpred103_Java3410 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationMethodDeclaration_in_synpred117_Java4020 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceFieldDeclaration_in_synpred118_Java4030 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalClassDeclaration_in_synpred119_Java4040 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalInterfaceDeclaration_in_synpred120_Java4050 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumDeclaration_in_synpred121_Java4060 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationTypeDeclaration_in_synpred122_Java4070 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclarationStatement_in_synpred125_Java4228 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classOrInterfaceDeclaration_in_synpred126_Java4238 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSERT_in_synpred130_Java4379 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_synpred130_Java4399 = new BitSet(new ulong[]{0x1000000UL,0x10000000UL});
		public static readonly BitSet _COLON_in_synpred130_Java4402 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_synpred130_Java4404 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_synpred130_Java4408 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSERT_in_synpred132_Java4418 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_synpred132_Java4421 = new BitSet(new ulong[]{0x1000000UL,0x10000000UL});
		public static readonly BitSet _COLON_in_synpred132_Java4424 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_synpred132_Java4426 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_synpred132_Java4430 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELSE_in_synpred133_Java4459 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_synpred133_Java4461 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_synpred148_Java4683 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_synpred148_Java4686 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_synpred149_Java4701 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_synpred149_Java4703 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_synpred149_Java4705 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _catches_in_synpred153_Java4861 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _FINALLY_in_synpred153_Java4863 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _block_in_synpred153_Java4865 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _catches_in_synpred154_Java4879 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FOR_in_synpred157_Java5071 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _LPAREN_in_synpred157_Java5073 = new BitSet(new ulong[]{0x840500100214000UL,0x20000210UL});
		public static readonly BitSet _variableModifiers_in_synpred157_Java5075 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_synpred157_Java5077 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_synpred157_Java5079 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_synpred157_Java5081 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_synpred157_Java5092 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_synpred157_Java5094 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_synpred157_Java5096 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclaration_in_synpred161_Java5275 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _castExpression_in_synpred202_Java6520 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_synpred206_Java6611 = new BitSet(new ulong[]{0x800400100214000UL,0x20000010UL});
		public static readonly BitSet _primitiveType_in_synpred206_Java6613 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_synpred206_Java6615 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _unaryExpression_in_synpred206_Java6617 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_synpred208_Java6688 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_synpred208_Java6690 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifierSuffix_in_synpred209_Java6712 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_synpred211_Java6744 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_synpred211_Java6746 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifierSuffix_in_synpred212_Java6768 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACKET_in_synpred224_Java7019 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_synpred224_Java7021 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_synpred224_Java7023 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_synpred236_Java7232 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _nonWildcardTypeArguments_in_synpred236_Java7234 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _classOrInterfaceType_in_synpred236_Java7236 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _classCreatorRest_in_synpred236_Java7238 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_synpred237_Java7248 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _classOrInterfaceType_in_synpred237_Java7250 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _classCreatorRest_in_synpred237_Java7252 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_synpred239_Java7282 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _createdName_in_synpred239_Java7284 = new BitSet(new ulong[]{0x0UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_synpred239_Java7294 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_synpred239_Java7296 = new BitSet(new ulong[]{0x0UL,0x6UL});
		public static readonly BitSet _LBRACKET_in_synpred239_Java7307 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_synpred239_Java7309 = new BitSet(new ulong[]{0x0UL,0x6UL});
		public static readonly BitSet _arrayInitializer_in_synpred239_Java7330 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACKET_in_synpred240_Java7379 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_synpred240_Java7381 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_synpred240_Java7395 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  ANTLRReasoningCounter 
